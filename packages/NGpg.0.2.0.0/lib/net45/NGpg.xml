<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NGpg</name>
    </assembly>
    <members>
        <member name="T:NGpg.GPG">
            <summary>
            Perform easy-to-use, one-time GPG operations.
            </summary>
            <remarks>
            If you need to perform several successive operations, consider using class <see cref="T:NGpg.GPGContext"/>, which
            can be more efficient (allows to reuse GPG internal state).
            </remarks>
            <example>
            <para>
            Encrypt and decrypt a string:
            <code>
            var keySearch = "TestKey";
            var plainString = "hello, world";
            var cipherString = GPG.EncryptString(plainString, keySearch);
            var decryptedString = GPG.DecryptString(cipherString);
            </code>
            </para>
            </example>
        </member>
        <member name="M:NGpg.GPG.EncryptString(System.String,System.String,Libgpgme.EncryptFlags,System.Boolean)">
            <summary>
            Encrypt one string for one recipient.
            </summary>
            <param name="plaintext">Plaintext.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="encryptFlags">Bitwise-or combination of values from enum <see cref="T:Libgpgme.EncryptFlags"/>.</param>
            <param name="armor">Indicate whether the output string should be base64 encoded.</param>
        </member>
        <member name="M:NGpg.GPG.EncryptString(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Encrypt one string for one recipient.
            </summary>
            <param name="plaintext">Plaintext.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="compress">Indicate whether the string should be compressed before encryption.</param>
            <param name="armor">Indicate whether the output string should be base64 encoded.</param>
        </member>
        <member name="M:NGpg.GPG.EncryptString(System.String,System.String,System.Boolean)">
            <summary>
            Encrypt one string for one recipient.
            </summary>
            <remarks>
            The output file will not be base64 encoded ("armored").
            </remarks>
            <param name="plaintext">Plaintext.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="compress">Indicate whether the string should be compressed before encryption.</param>
        </member>
        <member name="M:NGpg.GPG.EncryptString(System.String,System.String)">
            <summary>
            Encrypt one string for one recipient.
            </summary>
            <remarks>
            The file will be compressed before encryption.
            The output file will not be base64 encoded ("armored").
            </remarks>
            <param name="plaintext">Plaintext.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
        </member>
        <member name="M:NGpg.GPG.DecryptString(System.String)">
            <summary>
            Decrypt one string.
            </summary>
            <remarks>
            The user must have the private key and must be able to decrypt it
            (through gpg-agent or any other password / pin-entry software).
            </remarks>
            <param name="ciphertext">Encrypted string.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:NGpg.GPG.EncryptFile(System.String,System.String,System.String,Libgpgme.EncryptFlags,System.Boolean)">
            <summary>
            Encrypt one file for one recipient.
            </summary>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="encryptFlags">Bitwise-or combination of values from enum <see cref="T:Libgpgme.EncryptFlags"/>.</param>
            <param name="armor">Indicate whether the output file should be base64 encoded.</param>
        </member>
        <member name="M:NGpg.GPG.EncryptFile(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Encrypt one file for one recipient.
            </summary>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="compress">Indicate whether the file should be compressed before encryption.</param>
            <param name="armor">Indicate whether the output file should be base64 encoded.</param>
        </member>
        <member name="M:NGpg.GPG.EncryptFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Encrypt one file for one recipient.
            </summary>
            <remarks>
            The output file will not be base64 encoded ("armored").
            </remarks>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="compress">Indicate whether the file should be compressed before encryption.</param>
        </member>
        <member name="M:NGpg.GPG.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encrypt one file for one recipient.
            </summary>
            <remarks>
            The file will be compressed before encryption.
            The output file will not be base64 encoded ("armored").
            </remarks>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
        </member>
        <member name="M:NGpg.GPG.DecryptFile(System.String,System.String)">
            <summary>
            Decrypt one file.
            </summary>
            <remarks>
            The user must have the private key and must be able to decrypt it
            (through gpg-agent or any other password / pin-entry software).
            </remarks>
            <param name="encryptedPath">Path of input encrypted file.</param>
            <param name="decryptedPath">Path of output decrypted file.</param>
        </member>
        <member name="T:NGpg.GPGContext">
            <summary>
            Perform GPG operations within a single context (a context contains the internal state of operations as well as configuration parameters).
            </summary>
            <example>
            using (var gpg = new GPGContext())
            {
                // Encrypt
                var key = gpg.SearchKey(keySearch);
                gpg.EncryptFiles(plain, cipher, new Key[] { key });
                // Decrypt
                gpg.DecryptFiles(cipher, decryptedDir);
            }
            </example>
        </member>
        <member name="M:NGpg.GPGContext.EncryptString(System.String,System.String,Libgpgme.EncryptFlags)">
            <summary>
            Encrypt one string for one recipient.
            </summary>
            <param name="plaintext">Plaintext.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="encryptFlags">Bitwise-or combination of values from enum <see cref="T:Libgpgme.EncryptFlags"/>.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptString(System.String,System.String,System.Boolean)">
            <summary>
            Encrypt one string for one recipient.
            </summary>
            <param name="plaintext">Plaintext.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="compress">Indicate whether the string should be compressed before encryption.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptString(System.String,System.String)">
            <summary>
            Encrypt one string for one recipient.
            </summary>
            <param name="plaintext">Plaintext.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
        </member>
        <member name="M:NGpg.GPGContext.DecryptString(System.String)">
            <summary>
            Decrypt one string.
            </summary>
            <remarks>
            The user must have the private key and must be able to decrypt it
            (through gpg-agent or any other password / pin-entry software).
            </remarks>
            <param name="ciphertext">Encrypted string.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:NGpg.GPGContext.EncryptFile(System.String,System.String,Libgpgme.Key[],Libgpgme.EncryptFlags)">
            <summary>
            Encrypt one file for a list of recipients.
            </summary>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="publicKeys">Public keys of the recipients. You may use <see cref="M:NGpg.GPGContext.SearchKey(System.String)"/> to retrieve keys.</param>
            <param name="encryptFlags">Bitwise-or combination of values from enum <see cref="T:Libgpgme.EncryptFlags"/>.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptFile(System.String,System.String,System.String,Libgpgme.EncryptFlags)">
            <summary>
            Encrypt one file for one recipient.
            </summary>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="encryptFlags">Bitwise-or combination of values from enum <see cref="T:Libgpgme.EncryptFlags"/>.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptFile(System.String,System.String,Libgpgme.Key[],System.Boolean)">
            <summary>
            Encrypt one file for a list of recipients.
            </summary>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="publicKeys">Public keys of the recipients. You may use <see cref="M:NGpg.GPGContext.SearchKey(System.String)"/> to retrieve keys.</param>
            <param name="compress">Indicate whether the file should be compressed before encryption.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Encrypt one file for one recipient.
            </summary>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
            <param name="compress">Indicate whether the file should be compressed before encryption.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptFile(System.String,System.String,Libgpgme.Key[])">
            <summary>
            Encrypt one file for a list of recipients.
            </summary>
            <remarks>
            The file will be compressed before encryption.
            </remarks>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="publicKeys">Public keys of the recipients. You may use <see cref="M:NGpg.GPGContext.SearchKey(System.String)"/> to retrieve keys.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encrypt one file for one recipient.
            </summary>
            <remarks>
            The file will be compressed before encryption.
            </remarks>
            <param name="plainPath">Path of input plaintext file.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="keySearch">A search string for the public key of the recipient.</param>
        </member>
        <member name="M:NGpg.GPGContext.EncryptFiles(System.String[],System.String,Libgpgme.Key[])">
            <summary>
            Encrypt several files for a list of recipients.
            </summary>
            <remarks>
            Input files are first compressed into a zip file, which is encrypted using GPG.
            Note: several input files cannot have the same name.
            </remarks>
            <param name="plainPaths">Path of input files.</param>
            <param name="encryptedPath">Path of output encrypted file.</param>
            <param name="publicKeys">Public keys of the recipients. You may use <see cref="M:NGpg.GPGContext.SearchKey(System.String)"/> to retrieve keys.</param>
        </member>
        <member name="M:NGpg.GPGContext.DecryptFile(System.String,System.String)">
            <summary>
            Decrypt one file.
            </summary>
            <remarks>
            The user must have the private key and must be able to decrypt it
            (through gpg-agent or any other password / pin-entry software).
            </remarks>
            <param name="encryptedPath">Path of input encrypted file.</param>
            <param name="decryptedPath">Path of output decrypted file.</param>
        </member>
        <member name="M:NGpg.GPGContext.DecryptFiles(System.String,System.String)">
            <summary>
            Decrypt an encrypt archive (encrypted using <see cref="M:NGpg.GPGContext.EncryptFiles(System.String[],System.String,Libgpgme.Key[])"/>).
            </summary>
            <param name="encryptedArchivePath">Path of the encrypted archive.</param>
            <param name="outputDirectory">Path of output directory.</param>
        </member>
        <member name="M:NGpg.GPGContext.#ctor(System.Boolean)">
            <summary>
            Initiate a new GPG context.
            </summary>
            <param name="armor">Indicate whether the output file should be base64 encoded.</param>
        </member>
        <member name="M:NGpg.GPGContext.#ctor">
            <summary>
            Initiate a new GPG context.
            </summary>
        </member>
        <member name="M:NGpg.GPGContext.SearchKey(System.String)">
            <summary>
            Retrieve one key.
            </summary>
            <remarks>
            Raise an exception if there is no matching key, or several matching keys.
            </remarks>
            <param name="keySearch">A search string for the key.</param>
        </member>
        <member name="M:NGpg.GPGContext.GetEncryptFlags(System.Boolean)">
            <summary>
            Set encrypt flags.
            </summary>
        </member>
        <member name="M:NGpg.Utils.LogInfoWithSize(NLog.Logger,System.Int64,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format">{0} is the size with unit</param>
        </member>
        <member name="M:NGpg.Utils.LogInfoWithSize(NLog.Logger,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format">{1} is the file name, {0} is the size with unit</param>
        </member>
        <member name="M:Libgpgme.Context.SetDllDirectory(System.String)">
            <summary>
            Sets the GNUPG directory where the libgpgme-11.dll can be found.
            </summary>
            <param name="path">Path to libgpgme-11.dll.</param>
        </member>
        <member name="F:Libgpgme.EncryptFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Libgpgme.EncryptFlags.AlwaysTrust">
            <summary>
            Specifies that all the recipients in recp should be trusted, even if the keys do not have a high enough validity in the keyring.
            </summary>
            <remarks>
            This flag should be used with care; in general it is not a good idea to use any untrusted keys.
            </remarks>
        </member>
        <member name="F:Libgpgme.EncryptFlags.NoEncryptTo">
            <summary>
            Specifies that no default or hidden default recipients as configured in the crypto backend should be included.
            </summary>
            <remarks>
            This can be useful for managing different user profiles.
            </remarks>
        </member>
        <member name="F:Libgpgme.EncryptFlags.NoCompress">
            <summary>
            Specifies that the plaintext shall not be compressed before it is encrypted.
            </summary>
            <remarks>
            This is in some cases useful if the length of the encrypted message may reveal information about the plaintext.
            </remarks>
        </member>
        <member name="F:Libgpgme.EncryptFlags.Prepare">
            <summary>
            Used with the UI Server protocol to prepare an encryption (i.e. sending the PREP_ENCRYPT command).
            </summary>
        </member>
        <member name="F:Libgpgme.EncryptFlags.ExpectSign">
            <summary>
            Used with the UI Server protocol to prepare for an encryption and a sign command.
            </summary>
        </member>
        <member name="M:Libgpgme.Gpgme.CreateContext">
            <summary>
            Creates a new GPGME context.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
