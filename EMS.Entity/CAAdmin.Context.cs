//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMS.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AtlasAdminToolsEntities : DbContext
    {
        public AtlasAdminToolsEntities(string nameOrConnectionString): base(nameOrConnectionString)
        {
            this.Database.CommandTimeout = 1000;
            this.Configuration.LazyLoadingEnabled = false;
        }
        public AtlasAdminToolsEntities(): base("name=CAEntities")
        {
            this.Database.CommandTimeout = 1000;
            this.Configuration.LazyLoadingEnabled = false;
        }

        public virtual ObjectResult<string> AdminAPIToolsLedgerJournal(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AdminAPIToolsLedgerJournal", jSONparametersParameter);
        }


    }

    public partial class CAAdminEntities : DbContext
    {
        public CAAdminEntities()
            : base("name=CAAdminEntities")
        {
            this.Database.CommandTimeout = 1000;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CAUserAdmin> CAUserAdmins { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Production> Productions { get; set; }
        public virtual DbSet<ProductionConfig> ProductionConfigs { get; set; }
        public virtual DbSet<Studio> Studios { get; set; }
        public virtual DbSet<UserProduction> UserProductions { get; set; }
    
        public virtual ObjectResult<Nullable<int>> addproductionaccessforuser(Nullable<int> adminUserid, Nullable<int> prodID)
        {
            var adminUseridParameter = adminUserid.HasValue ?
                new ObjectParameter("AdminUserid", adminUserid) :
                new ObjectParameter("AdminUserid", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("addproductionaccessforuser", adminUseridParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<CheckAuthenticationCode_Result> CheckAuthenticationCode(Nullable<int> userId, string authenticationCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var authenticationCodeParameter = authenticationCode != null ?
                new ObjectParameter("AuthenticationCode", authenticationCode) :
                new ObjectParameter("AuthenticationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckAuthenticationCode_Result>("CheckAuthenticationCode", userIdParameter, authenticationCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckEmailVaild(string email, string admin)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adminParameter = admin != null ?
                new ObjectParameter("Admin", admin) :
                new ObjectParameter("Admin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckEmailVaild", emailParameter, adminParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckNewDBName(string dBName)
        {
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckNewDBName", dBNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckUserexistanceCAAdmin(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckUserexistanceCAAdmin", emailParameter);
        }
    
        public virtual ObjectResult<GetAccessByKeyToken_Result> GetAccessByKeyToken(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessByKeyToken_Result>("GetAccessByKeyToken", emailParameter);
        }
    
        public virtual ObjectResult<GetDBConfigByProdId_Result> GetDBConfigByProdId(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDBConfigByProdId_Result>("GetDBConfigByProdId", prodIdParameter);
        }
    
        public virtual ObjectResult<GetProdcutionListByUserId_Result> GetProdcutionListByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProdcutionListByUserId_Result>("GetProdcutionListByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserDetailsAdmin_Result> GetUserDetailsAdmin(string email, string password, string type)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetailsAdmin_Result>("GetUserDetailsAdmin", emailParameter, passwordParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetUserDetailsPassword_Result> GetUserDetailsPassword(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetailsPassword_Result>("GetUserDetailsPassword", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertEMSUser(string email, string password, string authenticationCode, string accountstatus, Nullable<bool> status, Nullable<int> createdby, Nullable<bool> adminFlag, Nullable<int> prodId)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var authenticationCodeParameter = authenticationCode != null ?
                new ObjectParameter("AuthenticationCode", authenticationCode) :
                new ObjectParameter("AuthenticationCode", typeof(string));
    
            var accountstatusParameter = accountstatus != null ?
                new ObjectParameter("Accountstatus", accountstatus) :
                new ObjectParameter("Accountstatus", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var adminFlagParameter = adminFlag.HasValue ?
                new ObjectParameter("AdminFlag", adminFlag) :
                new ObjectParameter("AdminFlag", typeof(bool));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertEMSUser", emailParameter, passwordParameter, authenticationCodeParameter, accountstatusParameter, statusParameter, createdbyParameter, adminFlagParameter, prodIdParameter);
        }
    
        public virtual int InsertOnlyCausersbyemailID(Nullable<int> adminUserId, string emailID, Nullable<int> prodid)
        {
            var adminUserIdParameter = adminUserId.HasValue ?
                new ObjectParameter("AdminUserId", adminUserId) :
                new ObjectParameter("AdminUserId", typeof(int));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOnlyCausersbyemailID", adminUserIdParameter, emailIDParameter, prodidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateAdminUser(Nullable<int> userId, string email, string password, string authCode, string accountStatus, Nullable<bool> status, Nullable<int> createdBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var authCodeParameter = authCode != null ?
                new ObjectParameter("AuthCode", authCode) :
                new ObjectParameter("AuthCode", typeof(string));
    
            var accountStatusParameter = accountStatus != null ?
                new ObjectParameter("AccountStatus", accountStatus) :
                new ObjectParameter("AccountStatus", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateAdminUser", userIdParameter, emailParameter, passwordParameter, authCodeParameter, accountStatusParameter, statusParameter, createdByParameter);
        }
    
        public virtual int InsertupdateUserProduction(Nullable<int> prodId, Nullable<int> userId, Nullable<int> createdBy)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertupdateUserProduction", prodIdParameter, userIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<ProductionNewDBCreate_Result> ProductionNewDBCreate(string prodName, Nullable<int> studioId, Nullable<int> divisionId, string status, Nullable<int> createdBy, string productionCode)
        {
            var prodNameParameter = prodName != null ?
                new ObjectParameter("ProdName", prodName) :
                new ObjectParameter("ProdName", typeof(string));
    
            var studioIdParameter = studioId.HasValue ?
                new ObjectParameter("StudioId", studioId) :
                new ObjectParameter("StudioId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var productionCodeParameter = productionCode != null ?
                new ObjectParameter("ProductionCode", productionCode) :
                new ObjectParameter("ProductionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionNewDBCreate_Result>("ProductionNewDBCreate", prodNameParameter, studioIdParameter, divisionIdParameter, statusParameter, createdByParameter, productionCodeParameter);
        }
    
        public virtual ObjectResult<UpdateAuthCode_Result> UpdateAuthCode(Nullable<int> userId, string authCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var authCodeParameter = authCode != null ?
                new ObjectParameter("AuthCode", authCode) :
                new ObjectParameter("AuthCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateAuthCode_Result>("UpdateAuthCode", userIdParameter, authCodeParameter);
        }
    
        public virtual int UpdatePasswordOfUser(string password, Nullable<int> userId)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePasswordOfUser", passwordParameter, userIdParameter);
        }
    
        public virtual int UpdateUserStatusAdmin(Nullable<int> userId, Nullable<bool> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserStatusAdmin", userIdParameter, statusParameter);
        }
    }
}
