//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMS.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CAEntities : DbContext
    {
        public CAEntities(string nameOrConnectionString)
: base(nameOrConnectionString)
        {
            this.Database.CommandTimeout = 1000;
            this.Configuration.LazyLoadingEnabled = false;
        }

        public CAEntities()
            : base("name=CAEntities")
        {
            this.Database.CommandTimeout = 1000;
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountClearing> AccountClearings { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<BankInfo> BankInfoes { get; set; }
        public virtual DbSet<BatchNumber> BatchNumbers { get; set; }
        public virtual DbSet<Budget> Budgets { get; set; }
        public virtual DbSet<BudgetAccount> BudgetAccounts { get; set; }
        public virtual DbSet<BudgetCategory> BudgetCategories { get; set; }
        public virtual DbSet<BudgetDetail> BudgetDetails { get; set; }
        public virtual DbSet<BudgetFile> BudgetFiles { get; set; }
        public virtual DbSet<CAUser> CAUsers { get; set; }
        public virtual DbSet<CheckSetting> CheckSettings { get; set; }
        public virtual DbSet<ClosePeriod> ClosePeriods { get; set; }
        public virtual DbSet<COA> COAs { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyGroup> CompanyGroups { get; set; }
        public virtual DbSet<CompanySetting> CompanySettings { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CountryState> CountryStates { get; set; }
        public virtual DbSet<Currecny> Currecnies { get; set; }
        public virtual DbSet<Custodian> Custodians { get; set; }
        public virtual DbSet<GroupCompanyAccess> GroupCompanyAccesses { get; set; }
        public virtual DbSet<GroupPermission> GroupPermissions { get; set; }
        public virtual DbSet<JournalEntry> JournalEntries { get; set; }
        public virtual DbSet<JournalEntryDetail> JournalEntryDetails { get; set; }
        public virtual DbSet<LedgerAccount> LedgerAccounts { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Mydefault> Mydefaults { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentLine> PaymentLines { get; set; }
        public virtual DbSet<PayrollBankSetup> PayrollBankSetups { get; set; }
        public virtual DbSet<PayrollFreeField> PayrollFreeFields { get; set; }
        public virtual DbSet<PayrollFringeAddon> PayrollFringeAddons { get; set; }
        public virtual DbSet<PayrollFringeHeader> PayrollFringeHeaders { get; set; }
        public virtual DbSet<PayrollOffset> PayrollOffsets { get; set; }
        public virtual DbSet<PayrollUser> PayrollUsers { get; set; }
        public virtual DbSet<PCEnvelope> PCEnvelopes { get; set; }
        public virtual DbSet<PCEnvelopeLine> PCEnvelopeLines { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderLine> PurchaseOrderLines { get; set; }
        public virtual DbSet<Recipient> Recipients { get; set; }
        public virtual DbSet<Segment> Segments { get; set; }
        public virtual DbSet<SegmentLedger> SegmentLedgers { get; set; }
        public virtual DbSet<SourceCode> SourceCodes { get; set; }
        public virtual DbSet<StartingValue> StartingValues { get; set; }
        public virtual DbSet<taxinfo> taxinfoes { get; set; }
        public virtual DbSet<TblAccount> TblAccounts { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<TransactionCode> TransactionCodes { get; set; }
        public virtual DbSet<TransactionValue> TransactionValues { get; set; }
        public virtual DbSet<UserAccess> UserAccesses { get; set; }
        public virtual DbSet<UserProfileAP> UserProfileAPs { get; set; }
        public virtual DbSet<BudgetAccountsFinal> BudgetAccountsFinals { get; set; }
        public virtual DbSet<BudgetCategoryFinal> BudgetCategoryFinals { get; set; }
        public virtual DbSet<BudgetDetailFinal> BudgetDetailFinals { get; set; }
        public virtual DbSet<CheckRun> CheckRuns { get; set; }
        public virtual DbSet<CheckRunAddon> CheckRunAddons { get; set; }
        public virtual DbSet<CheckRunStatu> CheckRunStatus { get; set; }
        public virtual DbSet<CRW> CRWs { get; set; }
        public virtual DbSet<CRWNotesNew> CRWNotesNews { get; set; }
        public virtual DbSet<EstimatedCost> EstimatedCosts { get; set; }
        public virtual DbSet<EstimatedCostSet> EstimatedCostSets { get; set; }
        public virtual DbSet<MyConfig> MyConfigs { get; set; }
        public virtual DbSet<PayrollCheck> PayrollChecks { get; set; }
        public virtual DbSet<PayrollExpense> PayrollExpenses { get; set; }
        public virtual DbSet<PayrollExpenseItem> PayrollExpenseItems { get; set; }
        public virtual DbSet<PayrollExpensePost> PayrollExpensePosts { get; set; }
        public virtual DbSet<PayrollFile> PayrollFiles { get; set; }
        public virtual DbSet<ReconcilationAddon> ReconcilationAddons { get; set; }
        public virtual DbSet<tblNumber> tblNumbers { get; set; }
        public virtual DbSet<Variance> Variances { get; set; }
        public virtual DbSet<VendorInfo> VendorInfoes { get; set; }
        public virtual DbSet<CRWBudgetAccountsFinal_Fix> CRWBudgetAccountsFinal_Fix { get; set; }
        public virtual DbSet<CRWDetail> CRWDetails { get; set; }
        public virtual DbSet<CRWEstimatedCost_Fix> CRWEstimatedCost_Fix { get; set; }
        public virtual DbSet<CRWHeader> CRWHeaders { get; set; }
        public virtual DbSet<vUnpaidInvoice> vUnpaidInvoices { get; set; }
        public virtual DbSet<vwPayrollPostAmount> vwPayrollPostAmounts { get; set; }
        public virtual DbSet<TaxCodeDetail> TaxCodeDetails { get; set; }
        public virtual DbSet<tblVendor> tblVendors { get; set; }
        public virtual DbSet<BankReconcilation> BankReconcilations { get; set; }
        public virtual DbSet<BankAdjustment> BankAdjustments { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceLine> InvoiceLines { get; set; }
    
        [DbFunction("CAEntities", "getaccount")]
        public virtual IQueryable<getaccount_Result> getaccount(string xml)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getaccount_Result>("[CAEntities].[getaccount](@xml)", xmlParameter);
        }
    
        [DbFunction("CAEntities", "getaccountdetail")]
        public virtual IQueryable<getaccountdetail_Result> getaccountdetail(string xml)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getaccountdetail_Result>("[CAEntities].[getaccountdetail](@xml)", xmlParameter);
        }
    
        [DbFunction("CAEntities", "getcat")]
        public virtual IQueryable<getcat_Result> getcat(string xml)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getcat_Result>("[CAEntities].[getcat](@xml)", xmlParameter);
        }
    
        [DbFunction("CAEntities", "SplitCSV")]
        public virtual IQueryable<SplitCSV_Result> SplitCSV(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitCSV_Result>("[CAEntities].[SplitCSV](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("CAEntities", "SplitId")]
        public virtual IQueryable<SplitId_Result> SplitId(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitId_Result>("[CAEntities].[SplitId](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddNewAccounttoBudget(Nullable<int> budgetfileid, string accountNumber, string accountDescription, string accountFringe, string accountTotal, Nullable<int> prodID, Nullable<int> createdby, string categoryNumber)
        {
            var budgetfileidParameter = budgetfileid.HasValue ?
                new ObjectParameter("Budgetfileid", budgetfileid) :
                new ObjectParameter("Budgetfileid", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var accountDescriptionParameter = accountDescription != null ?
                new ObjectParameter("AccountDescription", accountDescription) :
                new ObjectParameter("AccountDescription", typeof(string));
    
            var accountFringeParameter = accountFringe != null ?
                new ObjectParameter("AccountFringe", accountFringe) :
                new ObjectParameter("AccountFringe", typeof(string));
    
            var accountTotalParameter = accountTotal != null ?
                new ObjectParameter("AccountTotal", accountTotal) :
                new ObjectParameter("AccountTotal", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var categoryNumberParameter = categoryNumber != null ?
                new ObjectParameter("CategoryNumber", categoryNumber) :
                new ObjectParameter("CategoryNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddNewAccounttoBudget", budgetfileidParameter, accountNumberParameter, accountDescriptionParameter, accountFringeParameter, accountTotalParameter, prodIDParameter, createdbyParameter, categoryNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddNewCategorytoBudget(Nullable<int> budgetfileid, string categoryNumber, string categoryDescription, string categoryFringe, string categoryTotal, Nullable<int> prodID, Nullable<int> createdby)
        {
            var budgetfileidParameter = budgetfileid.HasValue ?
                new ObjectParameter("Budgetfileid", budgetfileid) :
                new ObjectParameter("Budgetfileid", typeof(int));
    
            var categoryNumberParameter = categoryNumber != null ?
                new ObjectParameter("CategoryNumber", categoryNumber) :
                new ObjectParameter("CategoryNumber", typeof(string));
    
            var categoryDescriptionParameter = categoryDescription != null ?
                new ObjectParameter("CategoryDescription", categoryDescription) :
                new ObjectParameter("CategoryDescription", typeof(string));
    
            var categoryFringeParameter = categoryFringe != null ?
                new ObjectParameter("CategoryFringe", categoryFringe) :
                new ObjectParameter("CategoryFringe", typeof(string));
    
            var categoryTotalParameter = categoryTotal != null ?
                new ObjectParameter("CategoryTotal", categoryTotal) :
                new ObjectParameter("CategoryTotal", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddNewCategorytoBudget", budgetfileidParameter, categoryNumberParameter, categoryDescriptionParameter, categoryFringeParameter, categoryTotalParameter, prodIDParameter, createdbyParameter);
        }
    
        public virtual int addproductionaccessforuser(Nullable<int> adminUserid, Nullable<int> prodID)
        {
            var adminUseridParameter = adminUserid.HasValue ?
                new ObjectParameter("AdminUserid", adminUserid) :
                new ObjectParameter("AdminUserid", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addproductionaccessforuser", adminUseridParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<APInvoiceFilter_Result> APInvoiceFilter(Nullable<int> bankId, string periodStatus, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string transactionNumberFrom, string transactionNumberTo, string vendorId, string batchNumber, Nullable<int> createdBy, Nullable<bool> locationSubTotal, Nullable<bool> episodeSubTotal, Nullable<bool> exculdeOffSet, Nullable<bool> compressOffSet, Nullable<int> prodId, string status)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var transactionNumberFromParameter = transactionNumberFrom != null ?
                new ObjectParameter("TransactionNumberFrom", transactionNumberFrom) :
                new ObjectParameter("TransactionNumberFrom", typeof(string));
    
            var transactionNumberToParameter = transactionNumberTo != null ?
                new ObjectParameter("TransactionNumberTo", transactionNumberTo) :
                new ObjectParameter("TransactionNumberTo", typeof(string));
    
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var locationSubTotalParameter = locationSubTotal.HasValue ?
                new ObjectParameter("LocationSubTotal", locationSubTotal) :
                new ObjectParameter("LocationSubTotal", typeof(bool));
    
            var episodeSubTotalParameter = episodeSubTotal.HasValue ?
                new ObjectParameter("EpisodeSubTotal", episodeSubTotal) :
                new ObjectParameter("EpisodeSubTotal", typeof(bool));
    
            var exculdeOffSetParameter = exculdeOffSet.HasValue ?
                new ObjectParameter("ExculdeOffSet", exculdeOffSet) :
                new ObjectParameter("ExculdeOffSet", typeof(bool));
    
            var compressOffSetParameter = compressOffSet.HasValue ?
                new ObjectParameter("CompressOffSet", compressOffSet) :
                new ObjectParameter("CompressOffSet", typeof(bool));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APInvoiceFilter_Result>("APInvoiceFilter", bankIdParameter, periodStatusParameter, createdDateFromParameter, createdDateToParameter, transactionNumberFromParameter, transactionNumberToParameter, vendorIdParameter, batchNumberParameter, createdByParameter, locationSubTotalParameter, episodeSubTotalParameter, exculdeOffSetParameter, compressOffSetParameter, prodIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<APInvoiceReportbyAccount_Result> APInvoiceReportbyAccount(Nullable<int> cID, Nullable<int> bankId, string periodStatus, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string transactionNumberFrom, string transactionNumberTo, string vendor, string batchNumber, string user, Nullable<int> prodId, string status, string createdBy)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var transactionNumberFromParameter = transactionNumberFrom != null ?
                new ObjectParameter("TransactionNumberFrom", transactionNumberFrom) :
                new ObjectParameter("TransactionNumberFrom", typeof(string));
    
            var transactionNumberToParameter = transactionNumberTo != null ?
                new ObjectParameter("TransactionNumberTo", transactionNumberTo) :
                new ObjectParameter("TransactionNumberTo", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APInvoiceReportbyAccount_Result>("APInvoiceReportbyAccount", cIDParameter, bankIdParameter, periodStatusParameter, createdDateFromParameter, createdDateToParameter, transactionNumberFromParameter, transactionNumberToParameter, vendorParameter, batchNumberParameter, userParameter, prodIdParameter, statusParameter, createdByParameter);
        }
    
        public virtual ObjectResult<APInvoiceReportbyTransaction_Result> APInvoiceReportbyTransaction(Nullable<int> cID, Nullable<int> bankId, string periodStatus, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string transactionNumberFrom, string transactionNumberTo, string vendor, string batchNumber, string user, Nullable<int> prodId, string status, string createdBy)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("CreatedDateFrom", createdDateFrom) :
                new ObjectParameter("CreatedDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var transactionNumberFromParameter = transactionNumberFrom != null ?
                new ObjectParameter("TransactionNumberFrom", transactionNumberFrom) :
                new ObjectParameter("TransactionNumberFrom", typeof(string));
    
            var transactionNumberToParameter = transactionNumberTo != null ?
                new ObjectParameter("TransactionNumberTo", transactionNumberTo) :
                new ObjectParameter("TransactionNumberTo", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APInvoiceReportbyTransaction_Result>("APInvoiceReportbyTransaction", cIDParameter, bankIdParameter, periodStatusParameter, createdDateFromParameter, createdDateToParameter, transactionNumberFromParameter, transactionNumberToParameter, vendorParameter, batchNumberParameter, userParameter, prodIdParameter, statusParameter, createdByParameter);
        }
    
        public virtual ObjectResult<BankRegisterHeader_Result> BankRegisterHeader(Nullable<int> companyID, Nullable<int> bankId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankRegisterHeader_Result>("BankRegisterHeader", companyIDParameter, bankIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> BudgetActionStatus(Nullable<int> budgetID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("BudgetActionStatus", budgetIDParameter);
        }
    
        public virtual ObjectResult<BudgetRollUpAfterL1_Result> BudgetRollUpAfterL1(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, string amount, Nullable<int> prodID, Nullable<int> mode)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BudgetRollUpAfterL1_Result>("BudgetRollUpAfterL1", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, amountParameter, prodIDParameter, modeParameter);
        }
    
        public virtual int CancelCheckRun(Nullable<int> prodID, Nullable<int> checkRunID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CancelCheckRun", prodIDParameter, checkRunIDParameter);
        }
    
        public virtual ObjectResult<CancelCheckRunByUser_Result> CancelCheckRunByUser(Nullable<int> userID, Nullable<int> bankID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CancelCheckRunByUser_Result>("CancelCheckRunByUser", userIDParameter, bankIDParameter);
        }
    
        public virtual ObjectResult<CheckBudgetInFinalBudget_Result> CheckBudgetInFinalBudget(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> createdby, Nullable<int> prodID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckBudgetInFinalBudget_Result>("CheckBudgetInFinalBudget", budgetIDParameter, budgetFileIDParameter, createdbyParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<CheckBudgetNonZero_Result> CheckBudgetNonZero(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckBudgetNonZero_Result>("CheckBudgetNonZero", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, detailLevelParameter);
        }
    
        public virtual ObjectResult<CheckClearingAccount_Result> CheckClearingAccount(Nullable<int> payrollFileID, Nullable<int> prodId)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckClearingAccount_Result>("CheckClearingAccount", payrollFileIDParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<CheckClosePeriodStatus_Result> CheckClosePeriodStatus(Nullable<int> companyID, string period)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckClosePeriodStatus_Result>("CheckClosePeriodStatus", companyIDParameter, periodParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckCOAForProduction(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckCOAForProduction", prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckCompanyCode(string companyCode, Nullable<int> prodID)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckCompanyCode", companyCodeParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckCustodianDuplicacy(Nullable<int> custodianID, string custodianCode, Nullable<int> prodId)
        {
            var custodianIDParameter = custodianID.HasValue ?
                new ObjectParameter("CustodianID", custodianID) :
                new ObjectParameter("CustodianID", typeof(int));
    
            var custodianCodeParameter = custodianCode != null ?
                new ObjectParameter("CustodianCode", custodianCode) :
                new ObjectParameter("CustodianCode", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckCustodianDuplicacy", custodianIDParameter, custodianCodeParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<CheckForOpenRunCheck_Result> CheckForOpenRunCheck(Nullable<int> bankID, Nullable<int> prodID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckForOpenRunCheck_Result>("CheckForOpenRunCheck", bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<CheckForSegment_Result> CheckForSegment(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckForSegment_Result>("CheckForSegment", prodIDParameter);
        }
    
        public virtual ObjectResult<CheckForSetSegment_Result> CheckForSetSegment(Nullable<int> prodID, string type)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckForSetSegment_Result>("CheckForSetSegment", prodIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckGroupName(Nullable<int> prodId, string groupName, Nullable<int> groupId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckGroupName", prodIdParameter, groupNameParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckifuserCA2(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckifuserCA2", emailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckInvoiceNumberVendorId(string invoiceNumber, Nullable<int> invoiceId, Nullable<int> vendorId, Nullable<int> prodId)
        {
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckInvoiceNumberVendorId", invoiceNumberParameter, invoiceIdParameter, vendorIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckJEReverseByInvoice(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckJEReverseByInvoice", invoiceIdParameter);
        }
    
        public virtual ObjectResult<CheckLedgerExistance_Result> CheckLedgerExistance(string detailCode, Nullable<int> parentId, Nullable<int> sublevel)
        {
            var detailCodeParameter = detailCode != null ?
                new ObjectParameter("DetailCode", detailCode) :
                new ObjectParameter("DetailCode", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var sublevelParameter = sublevel.HasValue ?
                new ObjectParameter("Sublevel", sublevel) :
                new ObjectParameter("Sublevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckLedgerExistance_Result>("CheckLedgerExistance", detailCodeParameter, parentIdParameter, sublevelParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckPayrollFileBeforePost(Nullable<int> expenseID, Nullable<int> modifyBy, string transValueStr, string cOAString, string segmentString, string segmentString1, string segmentString2, string payDescription)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("ExpenseID", expenseID) :
                new ObjectParameter("ExpenseID", typeof(int));
    
            var modifyByParameter = modifyBy.HasValue ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(int));
    
            var transValueStrParameter = transValueStr != null ?
                new ObjectParameter("TransValueStr", transValueStr) :
                new ObjectParameter("TransValueStr", typeof(string));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var segmentStringParameter = segmentString != null ?
                new ObjectParameter("SegmentString", segmentString) :
                new ObjectParameter("SegmentString", typeof(string));
    
            var segmentString1Parameter = segmentString1 != null ?
                new ObjectParameter("SegmentString1", segmentString1) :
                new ObjectParameter("SegmentString1", typeof(string));
    
            var segmentString2Parameter = segmentString2 != null ?
                new ObjectParameter("SegmentString2", segmentString2) :
                new ObjectParameter("SegmentString2", typeof(string));
    
            var payDescriptionParameter = payDescription != null ?
                new ObjectParameter("PayDescription", payDescription) :
                new ObjectParameter("PayDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckPayrollFileBeforePost", expenseIDParameter, modifyByParameter, transValueStrParameter, cOAStringParameter, segmentStringParameter, segmentString1Parameter, segmentString2Parameter, payDescriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckPCEnvelopeNumberDuplicacy(string envelopeNumber, Nullable<int> pcEnvelopeID, Nullable<int> prodId)
        {
            var envelopeNumberParameter = envelopeNumber != null ?
                new ObjectParameter("EnvelopeNumber", envelopeNumber) :
                new ObjectParameter("EnvelopeNumber", typeof(string));
    
            var pcEnvelopeIDParameter = pcEnvelopeID.HasValue ?
                new ObjectParameter("PcEnvelopeID", pcEnvelopeID) :
                new ObjectParameter("PcEnvelopeID", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckPCEnvelopeNumberDuplicacy", envelopeNumberParameter, pcEnvelopeIDParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckPONumber(string pONumber, Nullable<int> prodId)
        {
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckPONumber", pONumberParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<CheckRegisterFilter_Result> CheckRegisterFilter(string companyID, Nullable<int> prodID, string bankID, string vendorID, string checkFrom, string checkTo, string checkType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var checkFromParameter = checkFrom != null ?
                new ObjectParameter("CheckFrom", checkFrom) :
                new ObjectParameter("CheckFrom", typeof(string));
    
            var checkToParameter = checkTo != null ?
                new ObjectParameter("CheckTo", checkTo) :
                new ObjectParameter("CheckTo", typeof(string));
    
            var checkTypeParameter = checkType != null ?
                new ObjectParameter("CheckType", checkType) :
                new ObjectParameter("CheckType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckRegisterFilter_Result>("CheckRegisterFilter", companyIDParameter, prodIDParameter, bankIDParameter, vendorIDParameter, checkFromParameter, checkToParameter, checkTypeParameter);
        }
    
        public virtual int CheckSettingUpdate(Nullable<int> bankId, string startNumber, string endNumber, Nullable<int> prodId, Nullable<int> createdBy)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var startNumberParameter = startNumber != null ?
                new ObjectParameter("StartNumber", startNumber) :
                new ObjectParameter("StartNumber", typeof(string));
    
            var endNumberParameter = endNumber != null ?
                new ObjectParameter("EndNumber", endNumber) :
                new ObjectParameter("EndNumber", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckSettingUpdate", bankIdParameter, startNumberParameter, endNumberParameter, prodIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckTransactionCodeField(string transactionCode, Nullable<int> prodID)
        {
            var transactionCodeParameter = transactionCode != null ?
                new ObjectParameter("TransactionCode", transactionCode) :
                new ObjectParameter("TransactionCode", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckTransactionCodeField", transactionCodeParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckUserexistanceCA(string emailid)
        {
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckUserexistanceCA", emailidParameter);
        }
    
        public virtual ObjectResult<CheckWTNo_Result> CheckWTNo(string wTList, Nullable<int> bankID, Nullable<int> prodID, string checkType)
        {
            var wTListParameter = wTList != null ?
                new ObjectParameter("WTList", wTList) :
                new ObjectParameter("WTList", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var checkTypeParameter = checkType != null ?
                new ObjectParameter("CheckType", checkType) :
                new ObjectParameter("CheckType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckWTNo_Result>("CheckWTNo", wTListParameter, bankIDParameter, prodIDParameter, checkTypeParameter);
        }
    
        public virtual int ComplateCheckRun(Nullable<int> checkRunID, Nullable<int> prodId)
        {
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComplateCheckRun", checkRunIDParameter, prodIdParameter);
        }
    
        public virtual int correctCOAforASSetLiability()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("correctCOAforASSetLiability");
        }
    
        public virtual ObjectResult<Nullable<int>> CreateCOAfromBudgetAccount(string cOAString, Nullable<int> prodid)
        {
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateCOAfromBudgetAccount", cOAStringParameter, prodidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateCOAfromBudgetAccountNew(string bAIString, Nullable<int> budgetFileID, Nullable<int> prodid, Nullable<int> createdBy)
        {
            var bAIStringParameter = bAIString != null ?
                new ObjectParameter("BAIString", bAIString) :
                new ObjectParameter("BAIString", typeof(string));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateCOAfromBudgetAccountNew", bAIStringParameter, budgetFileIDParameter, prodidParameter, createdByParameter);
        }
    
        public virtual int CreateCOAfromBudgetCategory(string cOAString, Nullable<int> prodid)
        {
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCOAfromBudgetCategory", cOAStringParameter, prodidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateCOAfromBudgetCategoryNew(string bCIString, Nullable<int> budgetFileID, Nullable<int> prodid, Nullable<int> createdBy)
        {
            var bCIStringParameter = bCIString != null ?
                new ObjectParameter("BCIString", bCIString) :
                new ObjectParameter("BCIString", typeof(string));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateCOAfromBudgetCategoryNew", bCIStringParameter, budgetFileIDParameter, prodidParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CRWBudgetAmountDistribution_Result> CRWBudgetAmountDistribution(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, string amount)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CRWBudgetAmountDistribution_Result>("CRWBudgetAmountDistribution", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, amountParameter);
        }
    
        public virtual ObjectResult<CRWBudgetAmountDistributionAfterL2_Result> CRWBudgetAmountDistributionAfterL2(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, string amount)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CRWBudgetAmountDistributionAfterL2_Result>("CRWBudgetAmountDistributionAfterL2", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, amountParameter);
        }
    
        public virtual ObjectResult<CRWBudgetAmountRollUp_Result> CRWBudgetAmountRollUp(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, string amount)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CRWBudgetAmountRollUp_Result>("CRWBudgetAmountRollUp", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, amountParameter);
        }
    
        public virtual ObjectResult<CRWLockRow_Result> CRWLockRow(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CRWLockRow_Result>("CRWLockRow", cOAIDParameter, budgetIDParameter, budgetFileIDParameter);
        }
    
        public virtual ObjectResult<DeleteCRWNotes_Result> DeleteCRWNotes(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> prodID, Nullable<int> userID, Nullable<int> notesID)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var notesIDParameter = notesID.HasValue ?
                new ObjectParameter("NotesID", notesID) :
                new ObjectParameter("NotesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteCRWNotes_Result>("DeleteCRWNotes", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, prodIDParameter, userIDParameter, notesIDParameter);
        }
    
        public virtual int DeleteInvoiceByInvoiceId(Nullable<int> invoiceId, Nullable<int> prodId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInvoiceByInvoiceId", invoiceIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteInvoiceLine(Nullable<int> poLineId, Nullable<int> invoiceLineId, Nullable<int> invoiceId)
        {
            var poLineIdParameter = poLineId.HasValue ?
                new ObjectParameter("poLineId", poLineId) :
                new ObjectParameter("poLineId", typeof(int));
    
            var invoiceLineIdParameter = invoiceLineId.HasValue ?
                new ObjectParameter("InvoiceLineId", invoiceLineId) :
                new ObjectParameter("InvoiceLineId", typeof(int));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteInvoiceLine", poLineIdParameter, invoiceLineIdParameter, invoiceIdParameter);
        }
    
        public virtual int DeleteJEandJEDetail(Nullable<int> journalEntryId)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("JournalEntryId", journalEntryId) :
                new ObjectParameter("JournalEntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteJEandJEDetail", journalEntryIdParameter);
        }
    
        public virtual int DeleteJournalEntryDetailById(Nullable<int> journalEntryDetailId, string type)
        {
            var journalEntryDetailIdParameter = journalEntryDetailId.HasValue ?
                new ObjectParameter("JournalEntryDetailId", journalEntryDetailId) :
                new ObjectParameter("JournalEntryDetailId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteJournalEntryDetailById", journalEntryDetailIdParameter, typeParameter);
        }
    
        public virtual int DeleteMyDefaultForUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMyDefaultForUser", userIdParameter);
        }
    
        public virtual int DeletePCEnvelopeById(Nullable<int> pCEnvelopeId, Nullable<int> prodId, string detail)
        {
            var pCEnvelopeIdParameter = pCEnvelopeId.HasValue ?
                new ObjectParameter("PCEnvelopeId", pCEnvelopeId) :
                new ObjectParameter("PCEnvelopeId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePCEnvelopeById", pCEnvelopeIdParameter, prodIdParameter, detailParameter);
        }
    
        public virtual int DeletePoById(Nullable<int> pOId)
        {
            var pOIdParameter = pOId.HasValue ?
                new ObjectParameter("POId", pOId) :
                new ObjectParameter("POId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePoById", pOIdParameter);
        }
    
        public virtual int DeletePOLine(Nullable<int> pOLineId)
        {
            var pOLineIdParameter = pOLineId.HasValue ?
                new ObjectParameter("POLineId", pOLineId) :
                new ObjectParameter("POLineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePOLine", pOLineIdParameter);
        }
    
        public virtual int DeleteSegmentByProdId(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSegmentByProdId", prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteTblAccountById(Nullable<int> accountId, string segmentType)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var segmentTypeParameter = segmentType != null ?
                new ObjectParameter("SegmentType", segmentType) :
                new ObjectParameter("SegmentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteTblAccountById", accountIdParameter, segmentTypeParameter);
        }
    
        public virtual int DeleteVendorInfoById(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendorInfoById", vendorIdParameter);
        }
    
        public virtual ObjectResult<EditCheckNumber_Result> EditCheckNumber(Nullable<int> bankID, Nullable<int> prodID, string checkNumber)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EditCheckNumber_Result>("EditCheckNumber", bankIDParameter, prodIDParameter, checkNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EmptyBudget(Nullable<int> uploadedby, string companCode, Nullable<int> prodid, Nullable<int> budgetid, string s1, string s2, string s3, string s4, string s5, string s6, string s7, string s8, string ledgerLebel, string segmentName, string segStr1, string segStr2)
        {
            var uploadedbyParameter = uploadedby.HasValue ?
                new ObjectParameter("uploadedby", uploadedby) :
                new ObjectParameter("uploadedby", typeof(int));
    
            var companCodeParameter = companCode != null ?
                new ObjectParameter("CompanCode", companCode) :
                new ObjectParameter("CompanCode", typeof(string));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            var budgetidParameter = budgetid.HasValue ?
                new ObjectParameter("Budgetid", budgetid) :
                new ObjectParameter("Budgetid", typeof(int));
    
            var s1Parameter = s1 != null ?
                new ObjectParameter("S1", s1) :
                new ObjectParameter("S1", typeof(string));
    
            var s2Parameter = s2 != null ?
                new ObjectParameter("S2", s2) :
                new ObjectParameter("S2", typeof(string));
    
            var s3Parameter = s3 != null ?
                new ObjectParameter("S3", s3) :
                new ObjectParameter("S3", typeof(string));
    
            var s4Parameter = s4 != null ?
                new ObjectParameter("S4", s4) :
                new ObjectParameter("S4", typeof(string));
    
            var s5Parameter = s5 != null ?
                new ObjectParameter("S5", s5) :
                new ObjectParameter("S5", typeof(string));
    
            var s6Parameter = s6 != null ?
                new ObjectParameter("S6", s6) :
                new ObjectParameter("S6", typeof(string));
    
            var s7Parameter = s7 != null ?
                new ObjectParameter("S7", s7) :
                new ObjectParameter("S7", typeof(string));
    
            var s8Parameter = s8 != null ?
                new ObjectParameter("S8", s8) :
                new ObjectParameter("S8", typeof(string));
    
            var ledgerLebelParameter = ledgerLebel != null ?
                new ObjectParameter("LedgerLebel", ledgerLebel) :
                new ObjectParameter("LedgerLebel", typeof(string));
    
            var segmentNameParameter = segmentName != null ?
                new ObjectParameter("SegmentName", segmentName) :
                new ObjectParameter("SegmentName", typeof(string));
    
            var segStr1Parameter = segStr1 != null ?
                new ObjectParameter("SegStr1", segStr1) :
                new ObjectParameter("SegStr1", typeof(string));
    
            var segStr2Parameter = segStr2 != null ?
                new ObjectParameter("SegStr2", segStr2) :
                new ObjectParameter("SegStr2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EmptyBudget", uploadedbyParameter, companCodeParameter, prodidParameter, budgetidParameter, s1Parameter, s2Parameter, s3Parameter, s4Parameter, s5Parameter, s6Parameter, s7Parameter, s8Parameter, ledgerLebelParameter, segmentNameParameter, segStr1Parameter, segStr2Parameter);
        }
    
        public virtual ObjectResult<FederalTaxAgencyAutoFill_Result> FederalTaxAgencyAutoFill()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FederalTaxAgencyAutoFill_Result>("FederalTaxAgencyAutoFill");
        }
    
        public virtual ObjectResult<FederalTaxFormAutoFill_Result> FederalTaxFormAutoFill()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FederalTaxFormAutoFill_Result>("FederalTaxFormAutoFill");
        }
    
        public virtual ObjectResult<FetchCOAbyCOACode_Result> FetchCOAbyCOACode(string cOACode, Nullable<int> prodID)
        {
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCOAbyCOACode_Result>("FetchCOAbyCOACode", cOACodeParameter, prodIDParameter);
        }
    
        public virtual int GenerateClosePeriodForCompany(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateClosePeriodForCompany", companyIdParameter);
        }
    
        public virtual int GenerateCOA(Nullable<int> prodID, string s1, string s2, string s3, string s4, string s5, string s6, string s7, string s8)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var s1Parameter = s1 != null ?
                new ObjectParameter("s1", s1) :
                new ObjectParameter("s1", typeof(string));
    
            var s2Parameter = s2 != null ?
                new ObjectParameter("s2", s2) :
                new ObjectParameter("s2", typeof(string));
    
            var s3Parameter = s3 != null ?
                new ObjectParameter("s3", s3) :
                new ObjectParameter("s3", typeof(string));
    
            var s4Parameter = s4 != null ?
                new ObjectParameter("s4", s4) :
                new ObjectParameter("s4", typeof(string));
    
            var s5Parameter = s5 != null ?
                new ObjectParameter("s5", s5) :
                new ObjectParameter("s5", typeof(string));
    
            var s6Parameter = s6 != null ?
                new ObjectParameter("s6", s6) :
                new ObjectParameter("s6", typeof(string));
    
            var s7Parameter = s7 != null ?
                new ObjectParameter("s7", s7) :
                new ObjectParameter("s7", typeof(string));
    
            var s8Parameter = s8 != null ?
                new ObjectParameter("s8", s8) :
                new ObjectParameter("s8", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateCOA", prodIDParameter, s1Parameter, s2Parameter, s3Parameter, s4Parameter, s5Parameter, s6Parameter, s7Parameter, s8Parameter);
        }
    
        public virtual int GenerateDefaultAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateDefaultAccounts");
        }
    
        public virtual ObjectResult<Get_Result> Get(Nullable<int> cOAID)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Result>("Get", cOAIDParameter);
        }
    
        public virtual ObjectResult<GetAccontType_Result> GetAccontType(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccontType_Result>("GetAccontType", prodIdParameter);
        }
    
        public virtual ObjectResult<GetAccountDetailByProdId_Result> GetAccountDetailByProdId(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountDetailByProdId_Result>("GetAccountDetailByProdId", prodIdParameter);
        }
    
        public virtual ObjectResult<GetAccountForCRWFromBudget_Result> GetAccountForCRWFromBudget(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountForCRWFromBudget_Result>("GetAccountForCRWFromBudget", prodIDParameter);
        }
    
        public virtual ObjectResult<GetAccountListForRecipient_Result> GetAccountListForRecipient(string coaCode, Nullable<int> prodId, Nullable<int> recipientId)
        {
            var coaCodeParameter = coaCode != null ?
                new ObjectParameter("CoaCode", coaCode) :
                new ObjectParameter("CoaCode", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var recipientIdParameter = recipientId.HasValue ?
                new ObjectParameter("RecipientId", recipientId) :
                new ObjectParameter("RecipientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountListForRecipient_Result>("GetAccountListForRecipient", coaCodeParameter, prodIdParameter, recipientIdParameter);
        }
    
        public virtual ObjectResult<GetAccountNameForBudget_Result> GetAccountNameForBudget(Nullable<int> prodID, string classification)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountNameForBudget_Result>("GetAccountNameForBudget", prodIDParameter, classificationParameter);
        }
    
        public virtual ObjectResult<GetAccountTypeForGL_Result> GetAccountTypeForGL(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountTypeForGL_Result>("GetAccountTypeForGL", prodIDParameter);
        }
    
        public virtual ObjectResult<GetAdminPayrollFile_Result> GetAdminPayrollFile(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdminPayrollFile_Result>("GetAdminPayrollFile", prodIDParameter);
        }
    
        public virtual ObjectResult<GetAllAccountType_Result> GetAllAccountType(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAccountType_Result>("GetAllAccountType", prodIdParameter);
        }
    
        public virtual ObjectResult<GetAllBatchNumber_Result> GetAllBatchNumber(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBatchNumber_Result>("GetAllBatchNumber", prodIdParameter);
        }
    
        public virtual ObjectResult<GetAllBudgetById_Result> GetAllBudgetById(Nullable<int> budgetid)
        {
            var budgetidParameter = budgetid.HasValue ?
                new ObjectParameter("Budgetid", budgetid) :
                new ObjectParameter("Budgetid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBudgetById_Result>("GetAllBudgetById", budgetidParameter);
        }
    
        public virtual ObjectResult<GetAllclosedPeriods_Result> GetAllclosedPeriods(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllclosedPeriods_Result>("GetAllclosedPeriods", companyIdParameter);
        }
    
        public virtual ObjectResult<GetAllDetailOfTblAccount_Result> GetAllDetailOfTblAccount(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDetailOfTblAccount_Result>("GetAllDetailOfTblAccount", prodIdParameter);
        }
    
        public virtual ObjectResult<GetAllPurchaseOrder_Result> GetAllPurchaseOrder(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPurchaseOrder_Result>("GetAllPurchaseOrder", prodIDParameter);
        }
    
        public virtual ObjectResult<GetAllSegmentByProdId_Result> GetAllSegmentByProdId(Nullable<int> prodId, Nullable<int> mode)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSegmentByProdId_Result>("GetAllSegmentByProdId", prodIdParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetAllTransactionValue_Result> GetAllTransactionValue(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTransactionValue_Result>("GetAllTransactionValue", prodIDParameter);
        }
    
        public virtual ObjectResult<GEtAllUserInfo_Result> GEtAllUserInfo(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GEtAllUserInfo_Result>("GEtAllUserInfo", prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetBankBalancebyBankid(Nullable<int> bankid)
        {
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("Bankid", bankid) :
                new ObjectParameter("Bankid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetBankBalancebyBankid", bankidParameter);
        }
    
        public virtual ObjectResult<GetBankInfoByCompanyId_Result> GetBankInfoByCompanyId(Nullable<int> companyId, Nullable<int> prodId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankInfoByCompanyId_Result>("GetBankInfoByCompanyId", companyIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetBankInfoById_Result> GetBankInfoById(Nullable<int> bankId)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankInfoById_Result>("GetBankInfoById", bankIdParameter);
        }
    
        public virtual ObjectResult<GetBankInfoPayroll_Result> GetBankInfoPayroll(Nullable<int> companyId, Nullable<int> prodId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankInfoPayroll_Result>("GetBankInfoPayroll", companyIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetBanklistReport_Result> GetBanklistReport(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBanklistReport_Result>("GetBanklistReport", prodIDParameter);
        }
    
        public virtual ObjectResult<GetBankSetupByProdID_Result> GetBankSetupByProdID(Nullable<int> companyID, Nullable<int> prodID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankSetupByProdID_Result>("GetBankSetupByProdID", companyIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<string> GetBatchNumber(Nullable<int> prodId, Nullable<int> userId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetBatchNumber", prodIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetBudgetAccountForGL_Result> GetBudgetAccountForGL(Nullable<int> budgetFileID, Nullable<int> prodID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetAccountForGL_Result>("GetBudgetAccountForGL", budgetFileIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBudgetAccounts_Result> GetBudgetAccounts(Nullable<int> budgetFileID, Nullable<int> prodID, string createCOA)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createCOAParameter = createCOA != null ?
                new ObjectParameter("CreateCOA", createCOA) :
                new ObjectParameter("CreateCOA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetAccounts_Result>("GetBudgetAccounts", budgetFileIDParameter, prodIDParameter, createCOAParameter);
        }
    
        public virtual ObjectResult<GetBudgetAccountsNew_Result> GetBudgetAccountsNew(Nullable<int> budgetFileID, Nullable<int> prodID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetAccountsNew_Result>("GetBudgetAccountsNew", budgetFileIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBudgetByCompanyForCRW_Result> GetBudgetByCompanyForCRW(string companCode, Nullable<int> prodID, string lO, string eP, Nullable<int> mode)
        {
            var companCodeParameter = companCode != null ?
                new ObjectParameter("CompanCode", companCode) :
                new ObjectParameter("CompanCode", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var lOParameter = lO != null ?
                new ObjectParameter("LO", lO) :
                new ObjectParameter("LO", typeof(string));
    
            var ePParameter = eP != null ?
                new ObjectParameter("EP", eP) :
                new ObjectParameter("EP", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetByCompanyForCRW_Result>("GetBudgetByCompanyForCRW", companCodeParameter, prodIDParameter, lOParameter, ePParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetBudgetCategory_Result> GetBudgetCategory(Nullable<int> budgetFileID, Nullable<int> prodID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetCategory_Result>("GetBudgetCategory", budgetFileIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBudgetCategoryForGL_Result> GetBudgetCategoryForGL(Nullable<int> budgetfileid, Nullable<int> prodID)
        {
            var budgetfileidParameter = budgetfileid.HasValue ?
                new ObjectParameter("Budgetfileid", budgetfileid) :
                new ObjectParameter("Budgetfileid", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetCategoryForGL_Result>("GetBudgetCategoryForGL", budgetfileidParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBudgetDetail_Result> GetBudgetDetail(Nullable<int> budgetid, Nullable<int> userID)
        {
            var budgetidParameter = budgetid.HasValue ?
                new ObjectParameter("Budgetid", budgetid) :
                new ObjectParameter("Budgetid", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetDetail_Result>("GetBudgetDetail", budgetidParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetBudgetDetailForGL_Result> GetBudgetDetailForGL(Nullable<int> budgetFileID, Nullable<int> prodID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetDetailForGL_Result>("GetBudgetDetailForGL", budgetFileIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBudgetDetails_Result> GetBudgetDetails(Nullable<int> budgetFileID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetDetails_Result>("GetBudgetDetails", budgetFileIDParameter);
        }
    
        public virtual ObjectResult<GetBudgetList_Result> GetBudgetList(Nullable<int> prodid)
        {
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBudgetList_Result>("GetBudgetList", prodidParameter);
        }
    
        public virtual ObjectResult<GetCAUserListByPropId_Result> GetCAUserListByPropId(Nullable<int> propId)
        {
            var propIdParameter = propId.HasValue ?
                new ObjectParameter("PropId", propId) :
                new ObjectParameter("PropId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCAUserListByPropId_Result>("GetCAUserListByPropId", propIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCheckNumberForPayment(Nullable<int> bankId, Nullable<int> prodId)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCheckNumberForPayment", bankIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetCheckPreview_Result> GetCheckPreview(Nullable<int> checkRunID)
        {
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCheckPreview_Result>("GetCheckPreview", checkRunIDParameter);
        }
    
        public virtual ObjectResult<GetCheckPrintFilter_Result> GetCheckPrintFilter(string companyID, string bankID, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, string prodID, string checkRunIDList, Nullable<int> userID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var prodIDParameter = prodID != null ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(string));
    
            var checkRunIDListParameter = checkRunIDList != null ?
                new ObjectParameter("CheckRunIDList", checkRunIDList) :
                new ObjectParameter("CheckRunIDList", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCheckPrintFilter_Result>("GetCheckPrintFilter", companyIDParameter, bankIDParameter, date1Parameter, date2Parameter, prodIDParameter, checkRunIDListParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> GetCheckRun(Nullable<int> prodID, Nullable<int> bankID, Nullable<int> userID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCheckRun", prodIDParameter, bankIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> GetCheckRunAddon(Nullable<int> checkRunID, Nullable<int> paymentID, string checkNo)
        {
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var checkNoParameter = checkNo != null ?
                new ObjectParameter("CheckNo", checkNo) :
                new ObjectParameter("CheckNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCheckRunAddon", checkRunIDParameter, paymentIDParameter, checkNoParameter);
        }
    
        public virtual ObjectResult<GetCheckRunList_Result> GetCheckRunList(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCheckRunList_Result>("GetCheckRunList", prodIDParameter);
        }
    
        public virtual ObjectResult<GetCheckSummaryFilter_Result> GetCheckSummaryFilter(string companyID, string bankID, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, string prodID, string checkRunIDList, Nullable<int> userID, string checKType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var prodIDParameter = prodID != null ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(string));
    
            var checkRunIDListParameter = checkRunIDList != null ?
                new ObjectParameter("CheckRunIDList", checkRunIDList) :
                new ObjectParameter("CheckRunIDList", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var checKTypeParameter = checKType != null ?
                new ObjectParameter("ChecKType", checKType) :
                new ObjectParameter("ChecKType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCheckSummaryFilter_Result>("GetCheckSummaryFilter", companyIDParameter, bankIDParameter, date1Parameter, date2Parameter, prodIDParameter, checkRunIDListParameter, userIDParameter, checKTypeParameter);
        }
    
        public virtual ObjectResult<GetCheckSummaryTotal_Result> GetCheckSummaryTotal(string companyID, string bankID, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, string prodID, string checkRunIDList, Nullable<int> userID, string checKType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var prodIDParameter = prodID != null ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(string));
    
            var checkRunIDListParameter = checkRunIDList != null ?
                new ObjectParameter("CheckRunIDList", checkRunIDList) :
                new ObjectParameter("CheckRunIDList", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var checKTypeParameter = checKType != null ?
                new ObjectParameter("ChecKType", checKType) :
                new ObjectParameter("ChecKType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCheckSummaryTotal_Result>("GetCheckSummaryTotal", companyIDParameter, bankIDParameter, date1Parameter, date2Parameter, prodIDParameter, checkRunIDListParameter, userIDParameter, checKTypeParameter);
        }
    
        public virtual ObjectResult<GetClearingAccount_Result> GetClearingAccount(string type, Nullable<int> companyId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClearingAccount_Result>("GetClearingAccount", typeParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetCleringAccountById_Result> GetCleringAccountById(string type, Nullable<int> companyId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCleringAccountById_Result>("GetCleringAccountById", typeParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetClosePeriodDeomJE_Result> GetClosePeriodDeomJE(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClosePeriodDeomJE_Result>("GetClosePeriodDeomJE", prodIDParameter);
        }
    
        public virtual ObjectResult<GetClosePeriodFortransaction_Result> GetClosePeriodFortransaction(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClosePeriodFortransaction_Result>("GetClosePeriodFortransaction", companyIdParameter);
        }
    
        public virtual ObjectResult<GetClosePeriodList_Result> GetClosePeriodList(Nullable<int> prodID, Nullable<int> cID, Nullable<int> mode)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClosePeriodList_Result>("GetClosePeriodList", prodIDParameter, cIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetClosePeriodStatus_Result> GetClosePeriodStatus(Nullable<int> companyId, Nullable<int> closePeriodID)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var closePeriodIDParameter = closePeriodID.HasValue ?
                new ObjectParameter("ClosePeriodID", closePeriodID) :
                new ObjectParameter("ClosePeriodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClosePeriodStatus_Result>("GetClosePeriodStatus", companyIdParameter, closePeriodIDParameter);
        }
    
        public virtual ObjectResult<GetCOAbyProdId_Result> GetCOAbyProdId(Nullable<int> prodId, string cOAString)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCOAbyProdId_Result>("GetCOAbyProdId", prodIdParameter, cOAStringParameter);
        }
    
        public virtual ObjectResult<GetCOABySegmentNumber_Result> GetCOABySegmentNumber(Nullable<int> prodId, Nullable<int> segment)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var segmentParameter = segment.HasValue ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCOABySegmentNumber_Result>("GetCOABySegmentNumber", prodIdParameter, segmentParameter);
        }
    
        public virtual ObjectResult<GetCOABySegmentPosition_Result> GetCOABySegmentPosition(string cOACode, Nullable<int> prodId, Nullable<int> segmentPosition)
        {
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var segmentPositionParameter = segmentPosition.HasValue ?
                new ObjectParameter("SegmentPosition", segmentPosition) :
                new ObjectParameter("SegmentPosition", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCOABySegmentPosition_Result>("GetCOABySegmentPosition", cOACodeParameter, prodIdParameter, segmentPositionParameter);
        }
    
        public virtual ObjectResult<GetCOABySegmentPosition1_Result> GetCOABySegmentPosition1(string cOACode, Nullable<int> prodId, Nullable<int> segmentPosition)
        {
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var segmentPositionParameter = segmentPosition.HasValue ?
                new ObjectParameter("SegmentPosition", segmentPosition) :
                new ObjectParameter("SegmentPosition", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCOABySegmentPosition1_Result>("GetCOABySegmentPosition1", cOACodeParameter, prodIdParameter, segmentPositionParameter);
        }
    
        public virtual ObjectResult<GetCoaDetailforCustodian_Result> GetCoaDetailforCustodian(string coaCode, Nullable<int> prodId, Nullable<int> custodianId)
        {
            var coaCodeParameter = coaCode != null ?
                new ObjectParameter("CoaCode", coaCode) :
                new ObjectParameter("CoaCode", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var custodianIdParameter = custodianId.HasValue ?
                new ObjectParameter("CustodianId", custodianId) :
                new ObjectParameter("CustodianId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCoaDetailforCustodian_Result>("GetCoaDetailforCustodian", coaCodeParameter, prodIdParameter, custodianIdParameter);
        }
    
        public virtual ObjectResult<GetCOAForClearing_Result> GetCOAForClearing(Nullable<int> prodId, Nullable<int> accountType, Nullable<int> companyId, Nullable<int> bankid, string clearingType, Nullable<int> segmentPosition, string cOACode, string accountName)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("Bankid", bankid) :
                new ObjectParameter("Bankid", typeof(int));
    
            var clearingTypeParameter = clearingType != null ?
                new ObjectParameter("ClearingType", clearingType) :
                new ObjectParameter("ClearingType", typeof(string));
    
            var segmentPositionParameter = segmentPosition.HasValue ?
                new ObjectParameter("SegmentPosition", segmentPosition) :
                new ObjectParameter("SegmentPosition", typeof(int));
    
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCOAForClearing_Result>("GetCOAForClearing", prodIdParameter, accountTypeParameter, companyIdParameter, bankidParameter, clearingTypeParameter, segmentPositionParameter, cOACodeParameter, accountNameParameter);
        }
    
        public virtual ObjectResult<GetCOAListByCompany_Result> GetCOAListByCompany(Nullable<int> prodId, string codeString)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var codeStringParameter = codeString != null ?
                new ObjectParameter("CodeString", codeString) :
                new ObjectParameter("CodeString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCOAListByCompany_Result>("GetCOAListByCompany", prodIdParameter, codeStringParameter);
        }
    
        public virtual ObjectResult<GetCompanyDetail_Result> GetCompanyDetail(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyDetail_Result>("GetCompanyDetail", companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyDetailForAccount_Result> GetCompanyDetailForAccount(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyDetailForAccount_Result>("GetCompanyDetailForAccount", prodIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyIdByGroupId_Result> GetCompanyIdByGroupId(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyIdByGroupId_Result>("GetCompanyIdByGroupId", groupIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyList_Result> GetCompanyList(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyList_Result>("GetCompanyList", prodIdParameter);
        }
    
        public virtual ObjectResult<GetCompanylistReport_Result> GetCompanylistReport(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanylistReport_Result>("GetCompanylistReport", prodIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyNameByID_Result> GetCompanyNameByID(Nullable<int> cID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyNameByID_Result>("GetCompanyNameByID", cIDParameter);
        }
    
        public virtual ObjectResult<GetCompnayCodeByProdId_Result> GetCompnayCodeByProdId(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompnayCodeByProdId_Result>("GetCompnayCodeByProdId", prodIdParameter);
        }
    
        public virtual ObjectResult<GetCRWHead_Result> GetCRWHead(Nullable<int> cID, Nullable<int> budgetID, Nullable<int> budgetFileID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRWHead_Result>("GetCRWHead", cIDParameter, budgetIDParameter, budgetFileIDParameter);
        }
    
        public virtual ObjectResult<GetCrwHeadDataByBudgetID_Result> GetCrwHeadDataByBudgetID(Nullable<int> budgetID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCrwHeadDataByBudgetID_Result>("GetCrwHeadDataByBudgetID", budgetIDParameter);
        }
    
        public virtual ObjectResult<GetCRWInfo_Result> GetCRWInfo(Nullable<int> budgetFileID, Nullable<int> budgetID, Nullable<int> prodid)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRWInfo_Result>("GetCRWInfo", budgetFileIDParameter, budgetIDParameter, prodidParameter);
        }
    
        public virtual ObjectResult<GetCRWListForReport_Result> GetCRWListForReport(Nullable<int> prodID, Nullable<int> mode, string companyID, string location, Nullable<int> budgetID, Nullable<int> budgetFileID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRWListForReport_Result>("GetCRWListForReport", prodIDParameter, modeParameter, companyIDParameter, locationParameter, budgetIDParameter, budgetFileIDParameter);
        }
    
        public virtual int GetCRWNotes(Nullable<int> cID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> budgetCategoryID, string accountNumber, Nullable<int> userID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetCategoryIDParameter = budgetCategoryID.HasValue ?
                new ObjectParameter("BudgetCategoryID", budgetCategoryID) :
                new ObjectParameter("BudgetCategoryID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCRWNotes", cIDParameter, budgetIDParameter, budgetFileIDParameter, budgetCategoryIDParameter, accountNumberParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetCRWNotesNew_Result> GetCRWNotesNew(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> prodID, Nullable<int> userID)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRWNotesNew_Result>("GetCRWNotesNew", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, prodIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetCRWRollUp_Result> GetCRWRollUp(Nullable<int> budgetFileID, Nullable<int> budgetID, Nullable<int> prodid)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRWRollUp_Result>("GetCRWRollUp", budgetFileIDParameter, budgetIDParameter, prodidParameter);
        }
    
        public virtual ObjectResult<GetCRWRollUpReport_Result> GetCRWRollUpReport(Nullable<int> budgetFileID, Nullable<int> budgetID, Nullable<int> prodid, string filterJSON)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var filterJSONParameter = filterJSON != null ?
                new ObjectParameter("FilterJSON", filterJSON) :
                new ObjectParameter("FilterJSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRWRollUpReport_Result>("GetCRWRollUpReport", budgetFileIDParameter, budgetIDParameter, prodidParameter, filterJSONParameter);
        }
    
        public virtual ObjectResult<GetCRWRollUpWithBlank_Result> GetCRWRollUpWithBlank(Nullable<int> budgetFileID, Nullable<int> budgetID, Nullable<int> prodid)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCRWRollUpWithBlank_Result>("GetCRWRollUpWithBlank", budgetFileIDParameter, budgetIDParameter, prodidParameter);
        }
    
        public virtual ObjectResult<GetCurrencyDetails_Result> GetCurrencyDetails(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrencyDetails_Result>("GetCurrencyDetails", prodIDParameter);
        }
    
        public virtual ObjectResult<GetCustodianCode_Result> GetCustodianCode(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustodianCode_Result>("GetCustodianCode", prodIdParameter);
        }
    
        public virtual ObjectResult<GetDataForCheckReport_Result> GetDataForCheckReport(Nullable<int> checkRunID)
        {
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataForCheckReport_Result>("GetDataForCheckReport", checkRunIDParameter);
        }
    
        public virtual ObjectResult<GetDataForCheckReportHeader_Result> GetDataForCheckReportHeader(Nullable<int> checkRunID)
        {
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataForCheckReportHeader_Result>("GetDataForCheckReportHeader", checkRunIDParameter);
        }
    
        public virtual ObjectResult<GetDedaultCOLO_Result> GetDedaultCOLO(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDedaultCOLO_Result>("GetDedaultCOLO", prodIDParameter);
        }
    
        public virtual ObjectResult<GetDefaultBankInfoByCompanyId_Result> GetDefaultBankInfoByCompanyId(Nullable<int> prodId, Nullable<int> companyId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("prodId", prodId) :
                new ObjectParameter("prodId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDefaultBankInfoByCompanyId_Result>("GetDefaultBankInfoByCompanyId", prodIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetDefaultSegmentValueByUserId_Result> GetDefaultSegmentValueByUserId(Nullable<int> userId, Nullable<int> prodId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDefaultSegmentValueByUserId_Result>("GetDefaultSegmentValueByUserId", userIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetDefaultSettingByUserId_Result> GetDefaultSettingByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDefaultSettingByUserId_Result>("GetDefaultSettingByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<getDetailAccount_Result> getDetailAccount(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDetailAccount_Result>("getDetailAccount", prodIDParameter);
        }
    
        public virtual ObjectResult<GetDetailAccountNoParent_Result> GetDetailAccountNoParent(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetailAccountNoParent_Result>("GetDetailAccountNoParent", prodIdParameter);
        }
    
        public virtual ObjectResult<GetDetailLevelAccountCRW_Result> GetDetailLevelAccountCRW(Nullable<int> prodID, string accountCode, Nullable<int> mode)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetailLevelAccountCRW_Result>("GetDetailLevelAccountCRW", prodIDParameter, accountCodeParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetEpisodeForCRWFromBudget_Result> GetEpisodeForCRWFromBudget(Nullable<int> prodID, string cO, string lO)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            var lOParameter = lO != null ?
                new ObjectParameter("LO", lO) :
                new ObjectParameter("LO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEpisodeForCRWFromBudget_Result>("GetEpisodeForCRWFromBudget", prodIDParameter, cOParameter, lOParameter);
        }
    
        public virtual ObjectResult<string> GeteverseJEDetail(Nullable<int> journalEntryId)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("JournalEntryId", journalEntryId) :
                new ObjectParameter("JournalEntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GeteverseJEDetail", journalEntryIdParameter);
        }
    
        public virtual ObjectResult<GetExchangeRate_Result> GetExchangeRate(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExchangeRate_Result>("GetExchangeRate", companyIDParameter);
        }
    
        public virtual ObjectResult<GetFreeFieldDetail_Result> GetFreeFieldDetail(string companyCode, Nullable<int> prodID)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFreeFieldDetail_Result>("GetFreeFieldDetail", companyCodeParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetFringeByProdId_Result> GetFringeByProdId(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFringeByProdId_Result>("GetFringeByProdId", prodIDParameter);
        }
    
        public virtual ObjectResult<GetGroupDetailsBypropId_Result> GetGroupDetailsBypropId(Nullable<int> propId)
        {
            var propIdParameter = propId.HasValue ?
                new ObjectParameter("PropId", propId) :
                new ObjectParameter("PropId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGroupDetailsBypropId_Result>("GetGroupDetailsBypropId", propIdParameter);
        }
    
        public virtual ObjectResult<GetInvoiceDetailListCRW_Result> GetInvoiceDetailListCRW(Nullable<int> cID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> budgetCategoryID, Nullable<int> prodID, string accountNumber)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetCategoryIDParameter = budgetCategoryID.HasValue ?
                new ObjectParameter("BudgetCategoryID", budgetCategoryID) :
                new ObjectParameter("BudgetCategoryID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceDetailListCRW_Result>("GetInvoiceDetailListCRW", cIDParameter, budgetIDParameter, budgetFileIDParameter, budgetCategoryIDParameter, prodIDParameter, accountNumberParameter);
        }
    
        public virtual ObjectResult<GetInvoiceListForPayment_Result> GetInvoiceListForPayment(Nullable<int> prodId, Nullable<int> bankId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("prodId", prodId) :
                new ObjectParameter("prodId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceListForPayment_Result>("GetInvoiceListForPayment", prodIdParameter, bankIdParameter);
        }
    
        public virtual ObjectResult<GetInvoiceListForPaymentNew_Result> GetInvoiceListForPaymentNew(Nullable<int> prodId, Nullable<int> bankId, string companyCode, string vendorID, Nullable<System.DateTime> invDate1, Nullable<System.DateTime> invDate2, string period)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("prodId", prodId) :
                new ObjectParameter("prodId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var invDate1Parameter = invDate1.HasValue ?
                new ObjectParameter("InvDate1", invDate1) :
                new ObjectParameter("InvDate1", typeof(System.DateTime));
    
            var invDate2Parameter = invDate2.HasValue ?
                new ObjectParameter("InvDate2", invDate2) :
                new ObjectParameter("InvDate2", typeof(System.DateTime));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceListForPaymentNew_Result>("GetInvoiceListForPaymentNew", prodIdParameter, bankIdParameter, companyCodeParameter, vendorIDParameter, invDate1Parameter, invDate2Parameter, periodParameter);
        }
    
        public virtual ObjectResult<GetInvoiceListPosted_Result> GetInvoiceListPosted(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceListPosted_Result>("GetInvoiceListPosted", prodIdParameter);
        }
    
        public virtual ObjectResult<GetInvoiceNoByCompanyCode_Result> GetInvoiceNoByCompanyCode(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("companyCode", companyCode) :
                new ObjectParameter("companyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceNoByCompanyCode_Result>("GetInvoiceNoByCompanyCode", companyCodeParameter);
        }
    
        public virtual ObjectResult<GetJEDetailFilter_Result> GetJEDetailFilter(Nullable<int> prodId, string ss1, string ss2, string ss3, string ss4, string ss5, Nullable<System.DateTime> sTARTDate, Nullable<System.DateTime> endDate, string vendorIds, Nullable<int> companyId, string currency, string period, string source, Nullable<int> setId, string type, string documentNo)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var ss1Parameter = ss1 != null ?
                new ObjectParameter("ss1", ss1) :
                new ObjectParameter("ss1", typeof(string));
    
            var ss2Parameter = ss2 != null ?
                new ObjectParameter("ss2", ss2) :
                new ObjectParameter("ss2", typeof(string));
    
            var ss3Parameter = ss3 != null ?
                new ObjectParameter("ss3", ss3) :
                new ObjectParameter("ss3", typeof(string));
    
            var ss4Parameter = ss4 != null ?
                new ObjectParameter("ss4", ss4) :
                new ObjectParameter("ss4", typeof(string));
    
            var ss5Parameter = ss5 != null ?
                new ObjectParameter("ss5", ss5) :
                new ObjectParameter("ss5", typeof(string));
    
            var sTARTDateParameter = sTARTDate.HasValue ?
                new ObjectParameter("STARTDate", sTARTDate) :
                new ObjectParameter("STARTDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var vendorIdsParameter = vendorIds != null ?
                new ObjectParameter("VendorIds", vendorIds) :
                new ObjectParameter("VendorIds", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJEDetailFilter_Result>("GetJEDetailFilter", prodIdParameter, ss1Parameter, ss2Parameter, ss3Parameter, ss4Parameter, ss5Parameter, sTARTDateParameter, endDateParameter, vendorIdsParameter, companyIdParameter, currencyParameter, periodParameter, sourceParameter, setIdParameter, typeParameter, documentNoParameter);
        }
    
        public virtual ObjectResult<GetJEDetailForAdjutment_Result> GetJEDetailForAdjutment(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("prodId", prodId) :
                new ObjectParameter("prodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJEDetailForAdjutment_Result>("GetJEDetailForAdjutment", prodIdParameter);
        }
    
        public virtual ObjectResult<GetJEDetailListCRW_Result> GetJEDetailListCRW(Nullable<int> cID, Nullable<int> prodID, string accountNumber)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJEDetailListCRW_Result>("GetJEDetailListCRW", cIDParameter, prodIDParameter, accountNumberParameter);
        }
    
        public virtual ObjectResult<GetJEListForDistribution_Result> GetJEListForDistribution(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJEListForDistribution_Result>("GetJEListForDistribution", prodIdParameter);
        }
    
        public virtual ObjectResult<GetJournalEntryDetailByStatus_Result> GetJournalEntryDetailByStatus(Nullable<int> prodId, Nullable<int> startTransaction, Nullable<int> endTransaction)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var startTransactionParameter = startTransaction.HasValue ?
                new ObjectParameter("StartTransaction", startTransaction) :
                new ObjectParameter("StartTransaction", typeof(int));
    
            var endTransactionParameter = endTransaction.HasValue ?
                new ObjectParameter("EndTransaction", endTransaction) :
                new ObjectParameter("EndTransaction", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJournalEntryDetailByStatus_Result>("GetJournalEntryDetailByStatus", prodIdParameter, startTransactionParameter, endTransactionParameter);
        }
    
        public virtual ObjectResult<GetJournalEntryDetailTransValue_Result> GetJournalEntryDetailTransValue(Nullable<int> journalEntryId)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("journalEntryId", journalEntryId) :
                new ObjectParameter("journalEntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJournalEntryDetailTransValue_Result>("GetJournalEntryDetailTransValue", journalEntryIdParameter);
        }
    
        public virtual ObjectResult<GetJournalEntryList_Result> GetJournalEntryList(Nullable<int> prodId, string auditStatus)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var auditStatusParameter = auditStatus != null ?
                new ObjectParameter("AuditStatus", auditStatus) :
                new ObjectParameter("AuditStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJournalEntryList_Result>("GetJournalEntryList", prodIdParameter, auditStatusParameter);
        }
    
        public virtual ObjectResult<GetLastVendorNumByProdId_Result> GetLastVendorNumByProdId(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastVendorNumByProdId_Result>("GetLastVendorNumByProdId", prodIDParameter);
        }
    
        public virtual ObjectResult<GetLedgerAccounts_Result> GetLedgerAccounts(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLedgerAccounts_Result>("GetLedgerAccounts", prodIdParameter);
        }
    
        public virtual ObjectResult<GetLedgerDetailByProdId_Result> GetLedgerDetailByProdId(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLedgerDetailByProdId_Result>("GetLedgerDetailByProdId", prodIdParameter);
        }
    
        public virtual ObjectResult<GetListForTrailBalance_Result> GetListForTrailBalance(Nullable<int> prodId, string companyCode, string segmentcode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var segmentcodeParameter = segmentcode != null ?
                new ObjectParameter("Segmentcode", segmentcode) :
                new ObjectParameter("Segmentcode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListForTrailBalance_Result>("GetListForTrailBalance", prodIdParameter, companyCodeParameter, segmentcodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetListForTrailBalanceGroup_Result> GetListForTrailBalanceGroup(Nullable<int> prodId, string cOACOde, Nullable<int> segment, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var cOACOdeParameter = cOACOde != null ?
                new ObjectParameter("COACOde", cOACOde) :
                new ObjectParameter("COACOde", typeof(string));
    
            var segmentParameter = segment.HasValue ?
                new ObjectParameter("Segment", segment) :
                new ObjectParameter("Segment", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListForTrailBalanceGroup_Result>("GetListForTrailBalanceGroup", prodIdParameter, cOACOdeParameter, segmentParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetListForTrialBalance_Result> GetListForTrialBalance(Nullable<int> prodId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListForTrialBalance_Result>("GetListForTrialBalance", prodIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetListOfCustodian_Result> GetListOfCustodian(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListOfCustodian_Result>("GetListOfCustodian", prodIdParameter);
        }
    
        public virtual ObjectResult<GetLocationForCRWFromBudget_Result> GetLocationForCRWFromBudget(Nullable<int> prodID, string cO)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationForCRWFromBudget_Result>("GetLocationForCRWFromBudget", prodIDParameter, cOParameter);
        }
    
        public virtual ObjectResult<GetModuleDetailsByModuleId_Result> GetModuleDetailsByModuleId(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModuleDetailsByModuleId_Result>("GetModuleDetailsByModuleId", moduleIdParameter);
        }
    
        public virtual ObjectResult<GetModulesDetails_Result> GetModulesDetails(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModulesDetails_Result>("GetModulesDetails", groupIdParameter);
        }
    
        public virtual ObjectResult<GetModuleTreeforgroup_Result> GetModuleTreeforgroup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModuleTreeforgroup_Result>("GetModuleTreeforgroup", groupIdParameter);
        }
    
        public virtual ObjectResult<GetMyDefaultsByProdId_Result> GetMyDefaultsByProdId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyDefaultsByProdId_Result>("GetMyDefaultsByProdId", userIdParameter);
        }
    
        public virtual ObjectResult<GetOpenPeriod_Result> GetOpenPeriod(Nullable<int> prodID, Nullable<int> cID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpenPeriod_Result>("GetOpenPeriod", prodIDParameter, cIDParameter);
        }
    
        public virtual ObjectResult<GetPaymentList_Result> GetPaymentList(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentList_Result>("GetPaymentList", prodIdParameter);
        }
    
        public virtual int GetPayrollAddFringeByConpanyID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayrollAddFringeByConpanyID", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollAddRange_Result> GetPayrollAddRange(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollAddRange_Result>("GetPayrollAddRange", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollBankdetailbyProdID_Result> GetPayrollBankdetailbyProdID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollBankdetailbyProdID_Result>("GetPayrollBankdetailbyProdID", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollDataFileFill_Result> GetPayrollDataFileFill(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollDataFileFill_Result>("GetPayrollDataFileFill", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollDataFileForAudit_Result> GetPayrollDataFileForAudit(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollDataFileForAudit_Result>("GetPayrollDataFileForAudit", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollExpenseByPayrollUser_Result> GetPayrollExpenseByPayrollUser(Nullable<int> payrollFileID, Nullable<int> payrollUserID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            var payrollUserIDParameter = payrollUserID.HasValue ?
                new ObjectParameter("PayrollUserID", payrollUserID) :
                new ObjectParameter("PayrollUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollExpenseByPayrollUser_Result>("GetPayrollExpenseByPayrollUser", payrollFileIDParameter, payrollUserIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollFileAmountDetail_Result> GetPayrollFileAmountDetail(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollFileAmountDetail_Result>("GetPayrollFileAmountDetail", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollFileAmountDetailPost_Result> GetPayrollFileAmountDetailPost(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollFileAmountDetailPost_Result>("GetPayrollFileAmountDetailPost", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollFileinClientSide_Result> GetPayrollFileinClientSide(string companyCode, Nullable<int> prodID)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollFileinClientSide_Result>("GetPayrollFileinClientSide", companyCodeParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollFileUserListByPayrollID_Result> GetPayrollFileUserListByPayrollID(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollFileUserListByPayrollID_Result>("GetPayrollFileUserListByPayrollID", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollFilterData_Result> GetPayrollFilterData(Nullable<int> prodId, string cID, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, string invoiceNo, Nullable<int> mode)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var cIDParameter = cID != null ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(string));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollFilterData_Result>("GetPayrollFilterData", prodIdParameter, cIDParameter, date1Parameter, date2Parameter, invoiceNoParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetPayrollFreeFieldByCompanyId_Result> GetPayrollFreeFieldByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollFreeFieldByCompanyId_Result>("GetPayrollFreeFieldByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<GetPayrollFringeByCompanyID_Result> GetPayrollFringeByCompanyID(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollFringeByCompanyID_Result>("GetPayrollFringeByCompanyID", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollHistory_Result> GetPayrollHistory(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollHistory_Result>("GetPayrollHistory", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollHistoryNew_Result> GetPayrollHistoryNew(Nullable<int> companyID, Nullable<int> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollHistoryNew_Result>("GetPayrollHistoryNew", companyIDParameter, userIDParameter);
        }
    
        public virtual int GetPayrollKeyByProdId(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayrollKeyByProdId", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollOffsets_Result> GetPayrollOffsets(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollOffsets_Result>("GetPayrollOffsets", companyIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollReportHeader_Result> GetPayrollReportHeader(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollReportHeader_Result>("GetPayrollReportHeader", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<GetPayrollVendor_Result> GetPayrollVendor(Nullable<int> cID, Nullable<int> prodID, Nullable<int> mode)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollVendor_Result>("GetPayrollVendor", cIDParameter, prodIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetPCEnvelopeLineDetailById_Result> GetPCEnvelopeLineDetailById(Nullable<int> pCEnvelopeId)
        {
            var pCEnvelopeIdParameter = pCEnvelopeId.HasValue ?
                new ObjectParameter("PCEnvelopeId", pCEnvelopeId) :
                new ObjectParameter("PCEnvelopeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCEnvelopeLineDetailById_Result>("GetPCEnvelopeLineDetailById", pCEnvelopeIdParameter);
        }
    
        public virtual int GetPCEnvelopeLineDetailById1(Nullable<int> pCEnvelopeId)
        {
            var pCEnvelopeIdParameter = pCEnvelopeId.HasValue ?
                new ObjectParameter("PCEnvelopeId", pCEnvelopeId) :
                new ObjectParameter("PCEnvelopeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPCEnvelopeLineDetailById1", pCEnvelopeIdParameter);
        }
    
        public virtual ObjectResult<GetPCEnvelopList_Result> GetPCEnvelopList(Nullable<int> prodId, string status)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPCEnvelopList_Result>("GetPCEnvelopList", prodIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetPendingInvoiceList_Result> GetPendingInvoiceList(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingInvoiceList_Result>("GetPendingInvoiceList", prodIdParameter);
        }
    
        public virtual ObjectResult<GetPeriodForBible_Result> GetPeriodForBible(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPeriodForBible_Result>("GetPeriodForBible", companyIdParameter);
        }
    
        public virtual ObjectResult<GetPODetailList_Result> GetPODetailList(Nullable<int> cID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> budgetCategoryID, string accountNumber, Nullable<int> prodID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetCategoryIDParameter = budgetCategoryID.HasValue ?
                new ObjectParameter("BudgetCategoryID", budgetCategoryID) :
                new ObjectParameter("BudgetCategoryID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPODetailList_Result>("GetPODetailList", cIDParameter, budgetIDParameter, budgetFileIDParameter, budgetCategoryIDParameter, accountNumberParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetPODetailListCRW_Result> GetPODetailListCRW(Nullable<int> cID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> budgetCategoryID, Nullable<int> prodID, string accountNumber)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetCategoryIDParameter = budgetCategoryID.HasValue ?
                new ObjectParameter("BudgetCategoryID", budgetCategoryID) :
                new ObjectParameter("BudgetCategoryID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPODetailListCRW_Result>("GetPODetailListCRW", cIDParameter, budgetIDParameter, budgetFileIDParameter, budgetCategoryIDParameter, prodIDParameter, accountNumberParameter);
        }
    
        public virtual ObjectResult<GetPOLines_Result> GetPOLines(Nullable<int> pOID, Nullable<int> prodID)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPOLines_Result>("GetPOLines", pOIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetPOLinesNotInInvoice_Result> GetPOLinesNotInInvoice(Nullable<int> pOID, Nullable<int> prodID, Nullable<int> vendorId)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPOLinesNotInInvoice_Result>("GetPOLinesNotInInvoice", pOIDParameter, prodIDParameter, vendorIdParameter);
        }
    
        public virtual ObjectResult<GetPONumber_Result> GetPONumber(Nullable<int> prodID, Nullable<int> vendorId)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPONumber_Result>("GetPONumber", prodIDParameter, vendorIdParameter);
        }
    
        public virtual ObjectResult<GetPONumberForCompany_Result> GetPONumberForCompany(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("companyCode", companyCode) :
                new ObjectParameter("companyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPONumberForCompany_Result>("GetPONumberForCompany", companyCodeParameter);
        }
    
        public virtual ObjectResult<GetRecipientVendorList_Result> GetRecipientVendorList(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecipientVendorList_Result>("GetRecipientVendorList", prodIdParameter);
        }
    
        public virtual ObjectResult<GetReconcilationReportData_Result> GetReconcilationReportData(Nullable<int> reconcilationID, Nullable<int> userID)
        {
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReconcilationReportData_Result>("GetReconcilationReportData", reconcilationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetReconcilationReportHeader_Result> GetReconcilationReportHeader(Nullable<int> reconcilationID, Nullable<int> userID)
        {
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReconcilationReportHeader_Result>("GetReconcilationReportHeader", reconcilationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetReportVendorFolder_Result> GetReportVendorFolder(Nullable<int> prodID, string vendorFrom, string vendorTo, string companyCode, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string vendorType, string vendorCountry, string vendorState, Nullable<bool> w9OnFile, Nullable<bool> w9NotOnFile, Nullable<int> userID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorFromParameter = vendorFrom != null ?
                new ObjectParameter("VendorFrom", vendorFrom) :
                new ObjectParameter("VendorFrom", typeof(string));
    
            var vendorToParameter = vendorTo != null ?
                new ObjectParameter("VendorTo", vendorTo) :
                new ObjectParameter("VendorTo", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("createdDateFrom", createdDateFrom) :
                new ObjectParameter("createdDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(string));
    
            var vendorCountryParameter = vendorCountry != null ?
                new ObjectParameter("VendorCountry", vendorCountry) :
                new ObjectParameter("VendorCountry", typeof(string));
    
            var vendorStateParameter = vendorState != null ?
                new ObjectParameter("VendorState", vendorState) :
                new ObjectParameter("VendorState", typeof(string));
    
            var w9OnFileParameter = w9OnFile.HasValue ?
                new ObjectParameter("W9OnFile", w9OnFile) :
                new ObjectParameter("W9OnFile", typeof(bool));
    
            var w9NotOnFileParameter = w9NotOnFile.HasValue ?
                new ObjectParameter("W9NotOnFile", w9NotOnFile) :
                new ObjectParameter("W9NotOnFile", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportVendorFolder_Result>("GetReportVendorFolder", prodIDParameter, vendorFromParameter, vendorToParameter, companyCodeParameter, createdDateFromParameter, createdDateToParameter, vendorTypeParameter, vendorCountryParameter, vendorStateParameter, w9OnFileParameter, w9NotOnFileParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetReportVendorList_Result> GetReportVendorList(Nullable<int> prodID, string vendorFrom, string vendorTo, string companyCode, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string vendorType, string vendorCountry, string vendorState, Nullable<bool> w9OnFile, Nullable<bool> w9NotOnFile, Nullable<int> userID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorFromParameter = vendorFrom != null ?
                new ObjectParameter("VendorFrom", vendorFrom) :
                new ObjectParameter("VendorFrom", typeof(string));
    
            var vendorToParameter = vendorTo != null ?
                new ObjectParameter("VendorTo", vendorTo) :
                new ObjectParameter("VendorTo", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("createdDateFrom", createdDateFrom) :
                new ObjectParameter("createdDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(string));
    
            var vendorCountryParameter = vendorCountry != null ?
                new ObjectParameter("VendorCountry", vendorCountry) :
                new ObjectParameter("VendorCountry", typeof(string));
    
            var vendorStateParameter = vendorState != null ?
                new ObjectParameter("VendorState", vendorState) :
                new ObjectParameter("VendorState", typeof(string));
    
            var w9OnFileParameter = w9OnFile.HasValue ?
                new ObjectParameter("W9OnFile", w9OnFile) :
                new ObjectParameter("W9OnFile", typeof(bool));
    
            var w9NotOnFileParameter = w9NotOnFile.HasValue ?
                new ObjectParameter("W9NotOnFile", w9NotOnFile) :
                new ObjectParameter("W9NotOnFile", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportVendorList_Result>("GetReportVendorList", prodIDParameter, vendorFromParameter, vendorToParameter, companyCodeParameter, createdDateFromParameter, createdDateToParameter, vendorTypeParameter, vendorCountryParameter, vendorStateParameter, w9OnFileParameter, w9NotOnFileParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetSegmentForPayroll_Result> GetSegmentForPayroll(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSegmentForPayroll_Result>("GetSegmentForPayroll", prodIdParameter);
        }
    
        public virtual ObjectResult<GetSegmentLedger_Result> GetSegmentLedger(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSegmentLedger_Result>("GetSegmentLedger", prodIdParameter);
        }
    
        public virtual ObjectResult<GetSegmentStringFromExpense_Result> GetSegmentStringFromExpense(string segmentStr, Nullable<int> prodId)
        {
            var segmentStrParameter = segmentStr != null ?
                new ObjectParameter("SegmentStr", segmentStr) :
                new ObjectParameter("SegmentStr", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSegmentStringFromExpense_Result>("GetSegmentStringFromExpense", segmentStrParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetSegmentWithLedger_Result> GetSegmentWithLedger(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSegmentWithLedger_Result>("GetSegmentWithLedger", prodIdParameter);
        }
    
        public virtual ObjectResult<GetSegmentWithLedgerToday_Result> GetSegmentWithLedgerToday(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSegmentWithLedgerToday_Result>("GetSegmentWithLedgerToday", prodIdParameter);
        }
    
        public virtual ObjectResult<GetSeriesForCRW_Result> GetSeriesForCRW(Nullable<int> cOAID, Nullable<int> setid, Nullable<int> budgetFileID, Nullable<int> budgetID, Nullable<int> prodid)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var setidParameter = setid.HasValue ?
                new ObjectParameter("Setid", setid) :
                new ObjectParameter("Setid", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSeriesForCRW_Result>("GetSeriesForCRW", cOAIDParameter, setidParameter, budgetFileIDParameter, budgetIDParameter, prodidParameter);
        }
    
        public virtual ObjectResult<GetSetForCRW_Result> GetSetForCRW(Nullable<int> cOAID, Nullable<int> budgetFileID, Nullable<int> budgetID, Nullable<int> prodid)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSetForCRW_Result>("GetSetForCRW", cOAIDParameter, budgetFileIDParameter, budgetIDParameter, prodidParameter);
        }
    
        public virtual ObjectResult<GetSourceCodeBySource_Result> GetSourceCodeBySource(Nullable<int> prodId, string source)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("prodId", prodId) :
                new ObjectParameter("prodId", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSourceCodeBySource_Result>("GetSourceCodeBySource", prodIdParameter, sourceParameter);
        }
    
        public virtual ObjectResult<GetSourceCodeDetails_Result> GetSourceCodeDetails(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSourceCodeDetails_Result>("GetSourceCodeDetails", prodIdParameter);
        }
    
        public virtual ObjectResult<GetStartEndPeriodByCompanyId_Result> GetStartEndPeriodByCompanyId(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStartEndPeriodByCompanyId_Result>("GetStartEndPeriodByCompanyId", companyIDParameter);
        }
    
        public virtual ObjectResult<GetStartEndRange_Result> GetStartEndRange(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStartEndRange_Result>("GetStartEndRange", companyIdParameter);
        }
    
        public virtual ObjectResult<GetStartingCheckNumber_Result> GetStartingCheckNumber(Nullable<int> bankId, Nullable<int> prodId)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStartingCheckNumber_Result>("GetStartingCheckNumber", bankIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetStartingvalue_Result> GetStartingvalue(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStartingvalue_Result>("GetStartingvalue", companyIDParameter);
        }
    
        public virtual ObjectResult<GetStateListByCountryId_Result> GetStateListByCountryId(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStateListByCountryId_Result>("GetStateListByCountryId", countryIDParameter);
        }
    
        public virtual ObjectResult<GetSuspenseAccountbyProdId_Result> GetSuspenseAccountbyProdId(Nullable<int> prodId, string type, Nullable<int> parentId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuspenseAccountbyProdId_Result>("GetSuspenseAccountbyProdId", prodIdParameter, typeParameter, parentIdParameter);
        }
    
        public virtual ObjectResult<GetTBByEP_Result> GetTBByEP(Nullable<int> companyid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> prodId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTBByEP_Result>("GetTBByEP", companyidParameter, fromDateParameter, toDateParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetTBByEPnewest_Result> GetTBByEPnewest(Nullable<int> companyid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> prodId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTBByEPnewest_Result>("GetTBByEPnewest", companyidParameter, fromDateParameter, toDateParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetTBByLevel1Ep_Result> GetTBByLevel1Ep(Nullable<int> companyid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> prodId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTBByLevel1Ep_Result>("GetTBByLevel1Ep", companyidParameter, fromDateParameter, toDateParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetTBByLevel1NonEp_Result> GetTBByLevel1NonEp(Nullable<int> companyid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> prodId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTBByLevel1NonEp_Result>("GetTBByLevel1NonEp", companyidParameter, fromDateParameter, toDateParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetTblAccountDetailsByCategory_Result> GetTblAccountDetailsByCategory(Nullable<int> prodId, string category)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTblAccountDetailsByCategory_Result>("GetTblAccountDetailsByCategory", prodIdParameter, categoryParameter);
        }
    
        public virtual ObjectResult<GetTranasactionCode_Result> GetTranasactionCode(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTranasactionCode_Result>("GetTranasactionCode", prodIdParameter);
        }
    
        public virtual ObjectResult<GetTransactionCode_Result> GetTransactionCode(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionCode_Result>("GetTransactionCode", prodIdParameter);
        }
    
        public virtual ObjectResult<GetTransactionCodeFill_Result> GetTransactionCodeFill(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionCodeFill_Result>("GetTransactionCodeFill", prodIdParameter);
        }
    
        public virtual ObjectResult<GetTransactionDefaultListByUserId_Result> GetTransactionDefaultListByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionDefaultListByUserId_Result>("GetTransactionDefaultListByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetTransactionNumber_Result> GetTransactionNumber(Nullable<int> prodId, Nullable<int> createdBy)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionNumber_Result>("GetTransactionNumber", prodIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetTransactionValueByCodeId_Result> GetTransactionValueByCodeId(Nullable<int> transactionCodeID)
        {
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionValueByCodeId_Result>("GetTransactionValueByCodeId", transactionCodeIDParameter);
        }
    
        public virtual ObjectResult<GetTransactionValueFillByID_Result> GetTransactionValueFillByID(Nullable<int> transactionCodeID)
        {
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionValueFillByID_Result>("GetTransactionValueFillByID", transactionCodeIDParameter);
        }
    
        public virtual ObjectResult<GetTransCodeForPayroll_Result> GetTransCodeForPayroll(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransCodeForPayroll_Result>("GetTransCodeForPayroll", prodIDParameter);
        }
    
        public virtual ObjectResult<GetTransCodeForPayrollAudit_Result> GetTransCodeForPayrollAudit(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransCodeForPayrollAudit_Result>("GetTransCodeForPayrollAudit", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<GetTransCodeFromExpense_Result> GetTransCodeFromExpense(string transStr)
        {
            var transStrParameter = transStr != null ?
                new ObjectParameter("TransStr", transStr) :
                new ObjectParameter("TransStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransCodeFromExpense_Result>("GetTransCodeFromExpense", transStrParameter);
        }
    
        public virtual ObjectResult<GetTransCodeValuByProdID_Result> GetTransCodeValuByProdID(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransCodeValuByProdID_Result>("GetTransCodeValuByProdID", prodIDParameter);
        }
    
        public virtual ObjectResult<GetUniqueTransCode_Result> GetUniqueTransCode(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUniqueTransCode_Result>("GetUniqueTransCode", prodIDParameter);
        }
    
        public virtual ObjectResult<GetUserDetailsByUserId_Result> GetUserDetailsByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetailsByUserId_Result>("GetUserDetailsByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserGroupDetails_Result> GetUserGroupDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserGroupDetails_Result>("GetUserGroupDetails", userIdParameter);
        }
    
        public virtual int GetUserlist(Nullable<int> prodid)
        {
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserlist", prodidParameter);
        }
    
        public virtual ObjectResult<GetUserProfileInfoByProdid_Result> GetUserProfileInfoByProdid(Nullable<int> prodId, string aPType, Nullable<int> userID)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var aPTypeParameter = aPType != null ?
                new ObjectParameter("APType", aPType) :
                new ObjectParameter("APType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserProfileInfoByProdid_Result>("GetUserProfileInfoByProdid", prodIdParameter, aPTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> GetUserSpecificTime(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserSpecificTime", userIDParameter);
        }
    
        public virtual ObjectResult<GetVerifyCheck_Result> GetVerifyCheck(Nullable<int> bankID, Nullable<int> prodID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVerifyCheck_Result>("GetVerifyCheck", bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertAdminPayrollFile(string invoiceRef, Nullable<int> companyID, Nullable<int> prodID, Nullable<int> createdby, string payrollFileXML)
        {
            var invoiceRefParameter = invoiceRef != null ?
                new ObjectParameter("InvoiceRef", invoiceRef) :
                new ObjectParameter("InvoiceRef", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var payrollFileXMLParameter = payrollFileXML != null ?
                new ObjectParameter("PayrollFileXML", payrollFileXML) :
                new ObjectParameter("PayrollFileXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertAdminPayrollFile", invoiceRefParameter, companyIDParameter, prodIDParameter, createdbyParameter, payrollFileXMLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertBudgetFile(Nullable<int> uploadedby, string action, Nullable<int> leaveexistingCOA, string companCode, Nullable<int> prodid, Nullable<int> budgetid, string uploadedXML, string s1, string s2, string s3, string s4, string s5, string s6, string s7, string s8, string ledgerLebel, string segmentName, string segStr1, string segStr2)
        {
            var uploadedbyParameter = uploadedby.HasValue ?
                new ObjectParameter("uploadedby", uploadedby) :
                new ObjectParameter("uploadedby", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var leaveexistingCOAParameter = leaveexistingCOA.HasValue ?
                new ObjectParameter("LeaveexistingCOA", leaveexistingCOA) :
                new ObjectParameter("LeaveexistingCOA", typeof(int));
    
            var companCodeParameter = companCode != null ?
                new ObjectParameter("CompanCode", companCode) :
                new ObjectParameter("CompanCode", typeof(string));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            var budgetidParameter = budgetid.HasValue ?
                new ObjectParameter("Budgetid", budgetid) :
                new ObjectParameter("Budgetid", typeof(int));
    
            var uploadedXMLParameter = uploadedXML != null ?
                new ObjectParameter("UploadedXML", uploadedXML) :
                new ObjectParameter("UploadedXML", typeof(string));
    
            var s1Parameter = s1 != null ?
                new ObjectParameter("S1", s1) :
                new ObjectParameter("S1", typeof(string));
    
            var s2Parameter = s2 != null ?
                new ObjectParameter("S2", s2) :
                new ObjectParameter("S2", typeof(string));
    
            var s3Parameter = s3 != null ?
                new ObjectParameter("S3", s3) :
                new ObjectParameter("S3", typeof(string));
    
            var s4Parameter = s4 != null ?
                new ObjectParameter("S4", s4) :
                new ObjectParameter("S4", typeof(string));
    
            var s5Parameter = s5 != null ?
                new ObjectParameter("S5", s5) :
                new ObjectParameter("S5", typeof(string));
    
            var s6Parameter = s6 != null ?
                new ObjectParameter("S6", s6) :
                new ObjectParameter("S6", typeof(string));
    
            var s7Parameter = s7 != null ?
                new ObjectParameter("S7", s7) :
                new ObjectParameter("S7", typeof(string));
    
            var s8Parameter = s8 != null ?
                new ObjectParameter("S8", s8) :
                new ObjectParameter("S8", typeof(string));
    
            var ledgerLebelParameter = ledgerLebel != null ?
                new ObjectParameter("LedgerLebel", ledgerLebel) :
                new ObjectParameter("LedgerLebel", typeof(string));
    
            var segmentNameParameter = segmentName != null ?
                new ObjectParameter("SegmentName", segmentName) :
                new ObjectParameter("SegmentName", typeof(string));
    
            var segStr1Parameter = segStr1 != null ?
                new ObjectParameter("SegStr1", segStr1) :
                new ObjectParameter("SegStr1", typeof(string));
    
            var segStr2Parameter = segStr2 != null ?
                new ObjectParameter("SegStr2", segStr2) :
                new ObjectParameter("SegStr2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertBudgetFile", uploadedbyParameter, actionParameter, leaveexistingCOAParameter, companCodeParameter, prodidParameter, budgetidParameter, uploadedXMLParameter, s1Parameter, s2Parameter, s3Parameter, s4Parameter, s5Parameter, s6Parameter, s7Parameter, s8Parameter, ledgerLebelParameter, segmentNameParameter, segStr1Parameter, segStr2Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertBudgetFileLedger(Nullable<int> uploadedby, Nullable<int> prodid, string uploadedXML)
        {
            var uploadedbyParameter = uploadedby.HasValue ?
                new ObjectParameter("uploadedby", uploadedby) :
                new ObjectParameter("uploadedby", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            var uploadedXMLParameter = uploadedXML != null ?
                new ObjectParameter("UploadedXML", uploadedXML) :
                new ObjectParameter("UploadedXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertBudgetFileLedger", uploadedbyParameter, prodidParameter, uploadedXMLParameter);
        }
    
        public virtual ObjectResult<InsertCheckRunByUser_Result> InsertCheckRunByUser(Nullable<int> userID, Nullable<int> bankID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertCheckRunByUser_Result>("InsertCheckRunByUser", userIDParameter, bankIDParameter);
        }
    
        public virtual int InsertCOAIDForBudget(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> prodid)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCOAIDForBudget", budgetIDParameter, budgetFileIDParameter, prodidParameter);
        }
    
        public virtual int InsertDataETCEFC(Nullable<int> budgetID, Nullable<int> budgetFileID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDataETCEFC", budgetIDParameter, budgetFileIDParameter);
        }
    
        public virtual int InsertDetailNumberInBudgetDetail(Nullable<int> budgetFileID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDetailNumberInBudgetDetail", budgetFileIDParameter);
        }
    
        public virtual int InsertIntoBudget(Nullable<int> budgetId, Nullable<int> prodid, string budgetName, Nullable<System.DateTime> createddate, Nullable<System.DateTime> modifieddate, Nullable<int> createdby, Nullable<int> modifiedby, string description)
        {
            var budgetIdParameter = budgetId.HasValue ?
                new ObjectParameter("BudgetId", budgetId) :
                new ObjectParameter("BudgetId", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var budgetNameParameter = budgetName != null ?
                new ObjectParameter("BudgetName", budgetName) :
                new ObjectParameter("BudgetName", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoBudget", budgetIdParameter, prodidParameter, budgetNameParameter, createddateParameter, modifieddateParameter, createdbyParameter, modifiedbyParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertOnlyCausersbyemailID(Nullable<int> adminUserId, string emailID, Nullable<int> prodid)
        {
            var adminUserIdParameter = adminUserId.HasValue ?
                new ObjectParameter("AdminUserId", adminUserId) :
                new ObjectParameter("AdminUserId", typeof(int));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertOnlyCausersbyemailID", adminUserIdParameter, emailIDParameter, prodidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertPayment(string groupNumber, Nullable<int> vendorId, Nullable<decimal> paidAmount, Nullable<System.DateTime> checkDate, string checkNumber, Nullable<int> bankId, string status, string payBy, Nullable<System.DateTime> paymentDate, string memo, string batchNumber, Nullable<int> prodId, Nullable<int> createdBy)
        {
            var groupNumberParameter = groupNumber != null ?
                new ObjectParameter("GroupNumber", groupNumber) :
                new ObjectParameter("GroupNumber", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var payByParameter = payBy != null ?
                new ObjectParameter("PayBy", payBy) :
                new ObjectParameter("PayBy", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertPayment", groupNumberParameter, vendorIdParameter, paidAmountParameter, checkDateParameter, checkNumberParameter, bankIdParameter, statusParameter, payByParameter, paymentDateParameter, memoParameter, batchNumberParameter, prodIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> INsertPaymentJE(Nullable<int> paymentID, Nullable<int> prodID, Nullable<int> userID, Nullable<int> bankID, string companyCode, string batchNumber)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("INsertPaymentJE", paymentIDParameter, prodIDParameter, userIDParameter, bankIDParameter, companyCodeParameter, batchNumberParameter);
        }
    
        public virtual int InsertPaymentLine(Nullable<int> paymentId, Nullable<int> invoiceId, Nullable<decimal> invoiceAmount, Nullable<int> createdBy, Nullable<int> prodId)
        {
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPaymentLine", paymentIdParameter, invoiceIdParameter, invoiceAmountParameter, createdByParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertPaymnet(Nullable<int> invoiceID, string batchNumber, string groupNumber, Nullable<System.DateTime> checkDate, string checkNumber, Nullable<int> bankID, string payBy, Nullable<System.DateTime> paymentDate, Nullable<int> createdBy, Nullable<int> prodID, Nullable<int> checkRunID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var groupNumberParameter = groupNumber != null ?
                new ObjectParameter("GroupNumber", groupNumber) :
                new ObjectParameter("GroupNumber", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var payByParameter = payBy != null ?
                new ObjectParameter("PayBy", payBy) :
                new ObjectParameter("PayBy", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertPaymnet", invoiceIDParameter, batchNumberParameter, groupNumberParameter, checkDateParameter, checkNumberParameter, bankIDParameter, payByParameter, paymentDateParameter, createdByParameter, prodIDParameter, checkRunIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertRecipient(Nullable<int> recipientId, Nullable<int> vendorID, Nullable<int> coaId, Nullable<int> prodid, Nullable<int> createdby, string coaString, Nullable<int> setId, Nullable<int> seriesId, Nullable<bool> status)
        {
            var recipientIdParameter = recipientId.HasValue ?
                new ObjectParameter("RecipientId", recipientId) :
                new ObjectParameter("RecipientId", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var coaIdParameter = coaId.HasValue ?
                new ObjectParameter("CoaId", coaId) :
                new ObjectParameter("CoaId", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var coaStringParameter = coaString != null ?
                new ObjectParameter("CoaString", coaString) :
                new ObjectParameter("CoaString", typeof(string));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            var seriesIdParameter = seriesId.HasValue ?
                new ObjectParameter("SeriesId", seriesId) :
                new ObjectParameter("SeriesId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertRecipient", recipientIdParameter, vendorIDParameter, coaIdParameter, prodidParameter, createdbyParameter, coaStringParameter, setIdParameter, seriesIdParameter, statusParameter);
        }
    
        public virtual int InsertRemBudgetdata(Nullable<int> budgetfileid)
        {
            var budgetfileidParameter = budgetfileid.HasValue ?
                new ObjectParameter("Budgetfileid", budgetfileid) :
                new ObjectParameter("Budgetfileid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRemBudgetdata", budgetfileidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateAccounts(Nullable<int> accountId, Nullable<int> segmentId, string accountCode, string accountName, Nullable<int> accountTypeId, Nullable<bool> balanceSheet, Nullable<bool> status, Nullable<bool> posting, Nullable<int> subLevel, string segmentType, Nullable<int> parentId, Nullable<int> createdBy, Nullable<int> prodId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var segmentIdParameter = segmentId.HasValue ?
                new ObjectParameter("SegmentId", segmentId) :
                new ObjectParameter("SegmentId", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountTypeIdParameter = accountTypeId.HasValue ?
                new ObjectParameter("AccountTypeId", accountTypeId) :
                new ObjectParameter("AccountTypeId", typeof(int));
    
            var balanceSheetParameter = balanceSheet.HasValue ?
                new ObjectParameter("BalanceSheet", balanceSheet) :
                new ObjectParameter("BalanceSheet", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var postingParameter = posting.HasValue ?
                new ObjectParameter("Posting", posting) :
                new ObjectParameter("Posting", typeof(bool));
    
            var subLevelParameter = subLevel.HasValue ?
                new ObjectParameter("SubLevel", subLevel) :
                new ObjectParameter("SubLevel", typeof(int));
    
            var segmentTypeParameter = segmentType != null ?
                new ObjectParameter("SegmentType", segmentType) :
                new ObjectParameter("SegmentType", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateAccounts", accountIdParameter, segmentIdParameter, accountCodeParameter, accountNameParameter, accountTypeIdParameter, balanceSheetParameter, statusParameter, postingParameter, subLevelParameter, segmentTypeParameter, parentIdParameter, createdByParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateAccountsNew(Nullable<int> accountId, Nullable<int> segmentId, string accountCode, string accountName, Nullable<int> accountTypeId, Nullable<bool> balanceSheet, Nullable<bool> status, Nullable<bool> posting, Nullable<int> subLevel, string segmentType, Nullable<int> parentId, Nullable<int> createdBy, Nullable<int> prodId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var segmentIdParameter = segmentId.HasValue ?
                new ObjectParameter("SegmentId", segmentId) :
                new ObjectParameter("SegmentId", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountTypeIdParameter = accountTypeId.HasValue ?
                new ObjectParameter("AccountTypeId", accountTypeId) :
                new ObjectParameter("AccountTypeId", typeof(int));
    
            var balanceSheetParameter = balanceSheet.HasValue ?
                new ObjectParameter("BalanceSheet", balanceSheet) :
                new ObjectParameter("BalanceSheet", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var postingParameter = posting.HasValue ?
                new ObjectParameter("Posting", posting) :
                new ObjectParameter("Posting", typeof(bool));
    
            var subLevelParameter = subLevel.HasValue ?
                new ObjectParameter("SubLevel", subLevel) :
                new ObjectParameter("SubLevel", typeof(int));
    
            var segmentTypeParameter = segmentType != null ?
                new ObjectParameter("SegmentType", segmentType) :
                new ObjectParameter("SegmentType", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateAccountsNew", accountIdParameter, segmentIdParameter, accountCodeParameter, accountNameParameter, accountTypeIdParameter, balanceSheetParameter, statusParameter, postingParameter, subLevelParameter, segmentTypeParameter, parentIdParameter, createdByParameter, prodIdParameter);
        }
    
        public virtual int InsertUpdateAddOffsets(Nullable<int> payrollOffsetID, string offsetType, Nullable<int> offsetAccount, string offsetdescription, Nullable<bool> active, Nullable<int> createdby, Nullable<int> prodID, Nullable<int> companyID)
        {
            var payrollOffsetIDParameter = payrollOffsetID.HasValue ?
                new ObjectParameter("PayrollOffsetID", payrollOffsetID) :
                new ObjectParameter("PayrollOffsetID", typeof(int));
    
            var offsetTypeParameter = offsetType != null ?
                new ObjectParameter("OffsetType", offsetType) :
                new ObjectParameter("OffsetType", typeof(string));
    
            var offsetAccountParameter = offsetAccount.HasValue ?
                new ObjectParameter("OffsetAccount", offsetAccount) :
                new ObjectParameter("OffsetAccount", typeof(int));
    
            var offsetdescriptionParameter = offsetdescription != null ?
                new ObjectParameter("Offsetdescription", offsetdescription) :
                new ObjectParameter("Offsetdescription", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAddOffsets", payrollOffsetIDParameter, offsetTypeParameter, offsetAccountParameter, offsetdescriptionParameter, activeParameter, createdbyParameter, prodIDParameter, companyIDParameter);
        }
    
        public virtual int InsertUpdateAddRange(Nullable<int> payrollFringetableID, Nullable<int> fromCOA, Nullable<int> toCOA, Nullable<int> fringeCOA, Nullable<int> createdby, Nullable<int> prodID, Nullable<int> companyID)
        {
            var payrollFringetableIDParameter = payrollFringetableID.HasValue ?
                new ObjectParameter("PayrollFringetableID", payrollFringetableID) :
                new ObjectParameter("PayrollFringetableID", typeof(int));
    
            var fromCOAParameter = fromCOA.HasValue ?
                new ObjectParameter("FromCOA", fromCOA) :
                new ObjectParameter("FromCOA", typeof(int));
    
            var toCOAParameter = toCOA.HasValue ?
                new ObjectParameter("ToCOA", toCOA) :
                new ObjectParameter("ToCOA", typeof(int));
    
            var fringeCOAParameter = fringeCOA.HasValue ?
                new ObjectParameter("FringeCOA", fringeCOA) :
                new ObjectParameter("FringeCOA", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAddRange", payrollFringetableIDParameter, fromCOAParameter, toCOAParameter, fringeCOAParameter, createdbyParameter, prodIDParameter, companyIDParameter);
        }
    
        public virtual int InsertUpdateAdminUser(Nullable<int> userId, string email, string password, string authCode, string accountStatus, Nullable<bool> status, Nullable<int> createdBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var authCodeParameter = authCode != null ?
                new ObjectParameter("AuthCode", authCode) :
                new ObjectParameter("AuthCode", typeof(string));
    
            var accountStatusParameter = accountStatus != null ?
                new ObjectParameter("AccountStatus", accountStatus) :
                new ObjectParameter("AccountStatus", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAdminUser", userIdParameter, emailParameter, passwordParameter, authCodeParameter, accountStatusParameter, statusParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateBankInfo(Nullable<int> bankId, string bankname, Nullable<int> companyId, string address1, string address2, string address3, string city, string state, string zip, string country, string routingNumber, string accountNumber, string branchNumber, string branch, Nullable<int> clearing, Nullable<int> cash, Nullable<int> suspense, Nullable<int> bankfees, Nullable<int> deposits, Nullable<int> sourceCodeID, Nullable<int> currencyID, Nullable<bool> status, Nullable<bool> postiivePay, Nullable<int> prodid, Nullable<int> createdBy)
        {
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var banknameParameter = bankname != null ?
                new ObjectParameter("Bankname", bankname) :
                new ObjectParameter("Bankname", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var routingNumberParameter = routingNumber != null ?
                new ObjectParameter("RoutingNumber", routingNumber) :
                new ObjectParameter("RoutingNumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var branchNumberParameter = branchNumber != null ?
                new ObjectParameter("BranchNumber", branchNumber) :
                new ObjectParameter("BranchNumber", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var clearingParameter = clearing.HasValue ?
                new ObjectParameter("Clearing", clearing) :
                new ObjectParameter("Clearing", typeof(int));
    
            var cashParameter = cash.HasValue ?
                new ObjectParameter("Cash", cash) :
                new ObjectParameter("Cash", typeof(int));
    
            var suspenseParameter = suspense.HasValue ?
                new ObjectParameter("Suspense", suspense) :
                new ObjectParameter("Suspense", typeof(int));
    
            var bankfeesParameter = bankfees.HasValue ?
                new ObjectParameter("Bankfees", bankfees) :
                new ObjectParameter("Bankfees", typeof(int));
    
            var depositsParameter = deposits.HasValue ?
                new ObjectParameter("Deposits", deposits) :
                new ObjectParameter("Deposits", typeof(int));
    
            var sourceCodeIDParameter = sourceCodeID.HasValue ?
                new ObjectParameter("SourceCodeID", sourceCodeID) :
                new ObjectParameter("SourceCodeID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var postiivePayParameter = postiivePay.HasValue ?
                new ObjectParameter("PostiivePay", postiivePay) :
                new ObjectParameter("PostiivePay", typeof(bool));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateBankInfo", bankIdParameter, banknameParameter, companyIdParameter, address1Parameter, address2Parameter, address3Parameter, cityParameter, stateParameter, zipParameter, countryParameter, routingNumberParameter, accountNumberParameter, branchNumberParameter, branchParameter, clearingParameter, cashParameter, suspenseParameter, bankfeesParameter, depositsParameter, sourceCodeIDParameter, currencyIDParameter, statusParameter, postiivePayParameter, prodidParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateBudget(Nullable<int> budgetId, Nullable<int> prodid, string budgetName, Nullable<int> createdby, string description)
        {
            var budgetIdParameter = budgetId.HasValue ?
                new ObjectParameter("BudgetId", budgetId) :
                new ObjectParameter("BudgetId", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var budgetNameParameter = budgetName != null ?
                new ObjectParameter("BudgetName", budgetName) :
                new ObjectParameter("BudgetName", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateBudget", budgetIdParameter, prodidParameter, budgetNameParameter, createdbyParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertupdateCheckSetting(Nullable<int> checkSettingID, Nullable<int> companyID, string style, string prefix, string length, string startNumber, string endNumber, string collated, Nullable<bool> printZero, Nullable<int> copies, Nullable<decimal> topMargin, Nullable<decimal> bottomMargin, Nullable<decimal> leftMargin, Nullable<decimal> rightMargin, string status, Nullable<int> bankID, Nullable<int> prodid, Nullable<int> createdBy, string sectionOne, string sectionTwo, string sectionThree)
        {
            var checkSettingIDParameter = checkSettingID.HasValue ?
                new ObjectParameter("CheckSettingID", checkSettingID) :
                new ObjectParameter("CheckSettingID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var styleParameter = style != null ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var lengthParameter = length != null ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(string));
    
            var startNumberParameter = startNumber != null ?
                new ObjectParameter("StartNumber", startNumber) :
                new ObjectParameter("StartNumber", typeof(string));
    
            var endNumberParameter = endNumber != null ?
                new ObjectParameter("EndNumber", endNumber) :
                new ObjectParameter("EndNumber", typeof(string));
    
            var collatedParameter = collated != null ?
                new ObjectParameter("Collated", collated) :
                new ObjectParameter("Collated", typeof(string));
    
            var printZeroParameter = printZero.HasValue ?
                new ObjectParameter("PrintZero", printZero) :
                new ObjectParameter("PrintZero", typeof(bool));
    
            var copiesParameter = copies.HasValue ?
                new ObjectParameter("Copies", copies) :
                new ObjectParameter("Copies", typeof(int));
    
            var topMarginParameter = topMargin.HasValue ?
                new ObjectParameter("TopMargin", topMargin) :
                new ObjectParameter("TopMargin", typeof(decimal));
    
            var bottomMarginParameter = bottomMargin.HasValue ?
                new ObjectParameter("BottomMargin", bottomMargin) :
                new ObjectParameter("BottomMargin", typeof(decimal));
    
            var leftMarginParameter = leftMargin.HasValue ?
                new ObjectParameter("LeftMargin", leftMargin) :
                new ObjectParameter("LeftMargin", typeof(decimal));
    
            var rightMarginParameter = rightMargin.HasValue ?
                new ObjectParameter("RightMargin", rightMargin) :
                new ObjectParameter("RightMargin", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var sectionOneParameter = sectionOne != null ?
                new ObjectParameter("SectionOne", sectionOne) :
                new ObjectParameter("SectionOne", typeof(string));
    
            var sectionTwoParameter = sectionTwo != null ?
                new ObjectParameter("SectionTwo", sectionTwo) :
                new ObjectParameter("SectionTwo", typeof(string));
    
            var sectionThreeParameter = sectionThree != null ?
                new ObjectParameter("SectionThree", sectionThree) :
                new ObjectParameter("SectionThree", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertupdateCheckSetting", checkSettingIDParameter, companyIDParameter, styleParameter, prefixParameter, lengthParameter, startNumberParameter, endNumberParameter, collatedParameter, printZeroParameter, copiesParameter, topMarginParameter, bottomMarginParameter, leftMarginParameter, rightMarginParameter, statusParameter, bankIDParameter, prodidParameter, createdByParameter, sectionOneParameter, sectionTwoParameter, sectionThreeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateClearingAccount(Nullable<int> accountClearingId, string type, string accountName, Nullable<int> cOAId, Nullable<int> companyId, Nullable<int> bankId, Nullable<int> createdBy, Nullable<int> prodId, string accountCode, string clearingType)
        {
            var accountClearingIdParameter = accountClearingId.HasValue ?
                new ObjectParameter("AccountClearingId", accountClearingId) :
                new ObjectParameter("AccountClearingId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var cOAIdParameter = cOAId.HasValue ?
                new ObjectParameter("COAId", cOAId) :
                new ObjectParameter("COAId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var clearingTypeParameter = clearingType != null ?
                new ObjectParameter("ClearingType", clearingType) :
                new ObjectParameter("ClearingType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateClearingAccount", accountClearingIdParameter, typeParameter, accountNameParameter, cOAIdParameter, companyIdParameter, bankIdParameter, createdByParameter, prodIdParameter, accountCodeParameter, clearingTypeParameter);
        }
    
        public virtual int InsertUpdateClosePeriod(Nullable<int> companyId, string status, Nullable<int> closePeriodId, string createdBy, Nullable<System.DateTime> endPeriod)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var closePeriodIdParameter = closePeriodId.HasValue ?
                new ObjectParameter("ClosePeriodId", closePeriodId) :
                new ObjectParameter("ClosePeriodId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var endPeriodParameter = endPeriod.HasValue ?
                new ObjectParameter("EndPeriod", endPeriod) :
                new ObjectParameter("EndPeriod", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateClosePeriod", companyIdParameter, statusParameter, closePeriodIdParameter, createdByParameter, endPeriodParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertupdateCOAManual(string cOACode, string parentCode, string description, string sS1, string sS2, string sS3, string sS4, string sS5, string sS6, string sS7, string sS8, Nullable<int> accountId, Nullable<int> detailLevel, Nullable<int> prodId)
        {
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var parentCodeParameter = parentCode != null ?
                new ObjectParameter("ParentCode", parentCode) :
                new ObjectParameter("ParentCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var sS1Parameter = sS1 != null ?
                new ObjectParameter("SS1", sS1) :
                new ObjectParameter("SS1", typeof(string));
    
            var sS2Parameter = sS2 != null ?
                new ObjectParameter("SS2", sS2) :
                new ObjectParameter("SS2", typeof(string));
    
            var sS3Parameter = sS3 != null ?
                new ObjectParameter("SS3", sS3) :
                new ObjectParameter("SS3", typeof(string));
    
            var sS4Parameter = sS4 != null ?
                new ObjectParameter("SS4", sS4) :
                new ObjectParameter("SS4", typeof(string));
    
            var sS5Parameter = sS5 != null ?
                new ObjectParameter("SS5", sS5) :
                new ObjectParameter("SS5", typeof(string));
    
            var sS6Parameter = sS6 != null ?
                new ObjectParameter("SS6", sS6) :
                new ObjectParameter("SS6", typeof(string));
    
            var sS7Parameter = sS7 != null ?
                new ObjectParameter("SS7", sS7) :
                new ObjectParameter("SS7", typeof(string));
    
            var sS8Parameter = sS8 != null ?
                new ObjectParameter("SS8", sS8) :
                new ObjectParameter("SS8", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertupdateCOAManual", cOACodeParameter, parentCodeParameter, descriptionParameter, sS1Parameter, sS2Parameter, sS3Parameter, sS4Parameter, sS5Parameter, sS6Parameter, sS7Parameter, sS8Parameter, accountIdParameter, detailLevelParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertUpdateCompanyCreation(Nullable<int> companyID, string companyCode, string productionTitle, string companyName, string address1, string address2, string address3, string city, string state, string zip, string companyPhone, string contact, Nullable<int> entry, Nullable<int> cost, string format, Nullable<System.DateTime> fiscalStartDate, string defaultValue, Nullable<int> createdby, Nullable<int> prodID, Nullable<System.DateTime> periodStart, string country, string periodStartType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var productionTitleParameter = productionTitle != null ?
                new ObjectParameter("ProductionTitle", productionTitle) :
                new ObjectParameter("ProductionTitle", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var entryParameter = entry.HasValue ?
                new ObjectParameter("Entry", entry) :
                new ObjectParameter("Entry", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(int));
    
            var formatParameter = format != null ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(string));
    
            var fiscalStartDateParameter = fiscalStartDate.HasValue ?
                new ObjectParameter("FiscalStartDate", fiscalStartDate) :
                new ObjectParameter("FiscalStartDate", typeof(System.DateTime));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("DefaultValue", defaultValue) :
                new ObjectParameter("DefaultValue", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var periodStartTypeParameter = periodStartType != null ?
                new ObjectParameter("PeriodStartType", periodStartType) :
                new ObjectParameter("PeriodStartType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertUpdateCompanyCreation", companyIDParameter, companyCodeParameter, productionTitleParameter, companyNameParameter, address1Parameter, address2Parameter, address3Parameter, cityParameter, stateParameter, zipParameter, companyPhoneParameter, contactParameter, entryParameter, costParameter, formatParameter, fiscalStartDateParameter, defaultValueParameter, createdbyParameter, prodIDParameter, periodStartParameter, countryParameter, periodStartTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateCompanySetting(Nullable<int> companyID, string accountingCurrency, string reportLabel, Nullable<bool> realTimeCurrency, Nullable<int> fringeAccountID, Nullable<int> laborAccountID, Nullable<int> suspenseAccountID, Nullable<int> createdby, Nullable<int> prodID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var accountingCurrencyParameter = accountingCurrency != null ?
                new ObjectParameter("AccountingCurrency", accountingCurrency) :
                new ObjectParameter("AccountingCurrency", typeof(string));
    
            var reportLabelParameter = reportLabel != null ?
                new ObjectParameter("ReportLabel", reportLabel) :
                new ObjectParameter("ReportLabel", typeof(string));
    
            var realTimeCurrencyParameter = realTimeCurrency.HasValue ?
                new ObjectParameter("RealTimeCurrency", realTimeCurrency) :
                new ObjectParameter("RealTimeCurrency", typeof(bool));
    
            var fringeAccountIDParameter = fringeAccountID.HasValue ?
                new ObjectParameter("FringeAccountID", fringeAccountID) :
                new ObjectParameter("FringeAccountID", typeof(int));
    
            var laborAccountIDParameter = laborAccountID.HasValue ?
                new ObjectParameter("LaborAccountID", laborAccountID) :
                new ObjectParameter("LaborAccountID", typeof(int));
    
            var suspenseAccountIDParameter = suspenseAccountID.HasValue ?
                new ObjectParameter("SuspenseAccountID", suspenseAccountID) :
                new ObjectParameter("SuspenseAccountID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateCompanySetting", companyIDParameter, accountingCurrencyParameter, reportLabelParameter, realTimeCurrencyParameter, fringeAccountIDParameter, laborAccountIDParameter, suspenseAccountIDParameter, createdbyParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateCompanyTaxInfo(Nullable<int> companyID, string federaltaxagency, string federaltaxform, string eIN, string companyTCC, string stateID, string statetaxID, Nullable<int> createdBy, Nullable<int> prodID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var federaltaxagencyParameter = federaltaxagency != null ?
                new ObjectParameter("federaltaxagency", federaltaxagency) :
                new ObjectParameter("federaltaxagency", typeof(string));
    
            var federaltaxformParameter = federaltaxform != null ?
                new ObjectParameter("federaltaxform", federaltaxform) :
                new ObjectParameter("federaltaxform", typeof(string));
    
            var eINParameter = eIN != null ?
                new ObjectParameter("EIN", eIN) :
                new ObjectParameter("EIN", typeof(string));
    
            var companyTCCParameter = companyTCC != null ?
                new ObjectParameter("CompanyTCC", companyTCC) :
                new ObjectParameter("CompanyTCC", typeof(string));
    
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var statetaxIDParameter = statetaxID != null ?
                new ObjectParameter("StatetaxID", statetaxID) :
                new ObjectParameter("StatetaxID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateCompanyTaxInfo", companyIDParameter, federaltaxagencyParameter, federaltaxformParameter, eINParameter, companyTCCParameter, stateIDParameter, statetaxIDParameter, createdByParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<InsertUpdateCRW_Result> InsertUpdateCRW(Nullable<int> cID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> budgetCategoryID, string accountNumber, string saveValue, string modeType)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetCategoryIDParameter = budgetCategoryID.HasValue ?
                new ObjectParameter("BudgetCategoryID", budgetCategoryID) :
                new ObjectParameter("BudgetCategoryID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var modeTypeParameter = modeType != null ?
                new ObjectParameter("ModeType", modeType) :
                new ObjectParameter("ModeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateCRW_Result>("InsertUpdateCRW", cIDParameter, budgetIDParameter, budgetFileIDParameter, budgetCategoryIDParameter, accountNumberParameter, saveValueParameter, modeTypeParameter);
        }
    
        public virtual ObjectResult<InsertUpdateCRWNew_Result> InsertUpdateCRWNew(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, string changes, Nullable<int> cOAID, string modeType)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var changesParameter = changes != null ?
                new ObjectParameter("Changes", changes) :
                new ObjectParameter("Changes", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var modeTypeParameter = modeType != null ?
                new ObjectParameter("ModeType", modeType) :
                new ObjectParameter("ModeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateCRWNew_Result>("InsertUpdateCRWNew", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, changesParameter, cOAIDParameter, modeTypeParameter);
        }
    
        public virtual int InsertUpdateCurrencyExchange(Nullable<int> companyID, string currencyName, string currencycode, Nullable<decimal> exchangeRate, Nullable<int> createdby, Nullable<bool> defaultFlag, Nullable<int> prodID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencycodeParameter = currencycode != null ?
                new ObjectParameter("Currencycode", currencycode) :
                new ObjectParameter("Currencycode", typeof(string));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var defaultFlagParameter = defaultFlag.HasValue ?
                new ObjectParameter("DefaultFlag", defaultFlag) :
                new ObjectParameter("DefaultFlag", typeof(bool));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCurrencyExchange", companyIDParameter, currencyNameParameter, currencycodeParameter, exchangeRateParameter, createdbyParameter, defaultFlagParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertupdateCustodian(Nullable<int> custodianID, string custodianCode, string currency, Nullable<int> vendorID, Nullable<int> cOAID, string cOACode, Nullable<int> setid, Nullable<int> seriesID, Nullable<int> prodid, Nullable<int> companyID, Nullable<int> createdy, Nullable<bool> status)
        {
            var custodianIDParameter = custodianID.HasValue ?
                new ObjectParameter("CustodianID", custodianID) :
                new ObjectParameter("CustodianID", typeof(int));
    
            var custodianCodeParameter = custodianCode != null ?
                new ObjectParameter("CustodianCode", custodianCode) :
                new ObjectParameter("CustodianCode", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var setidParameter = setid.HasValue ?
                new ObjectParameter("Setid", setid) :
                new ObjectParameter("Setid", typeof(int));
    
            var seriesIDParameter = seriesID.HasValue ?
                new ObjectParameter("SeriesID", seriesID) :
                new ObjectParameter("SeriesID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var createdyParameter = createdy.HasValue ?
                new ObjectParameter("Createdy", createdy) :
                new ObjectParameter("Createdy", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertupdateCustodian", custodianIDParameter, custodianCodeParameter, currencyParameter, vendorIDParameter, cOAIDParameter, cOACodeParameter, setidParameter, seriesIDParameter, prodidParameter, companyIDParameter, createdyParameter, statusParameter);
        }
    
        public virtual int InsertUpdateFringeByCompanyId(Nullable<int> payrollFringeHeaderID, Nullable<int> startRange, Nullable<int> endRange, Nullable<int> lOId, Nullable<int> epiId, Nullable<int> setId, Nullable<int> bananasId, Nullable<int> fringeAccount, Nullable<int> prodID, Nullable<int> createdby, Nullable<int> companyID)
        {
            var payrollFringeHeaderIDParameter = payrollFringeHeaderID.HasValue ?
                new ObjectParameter("PayrollFringeHeaderID", payrollFringeHeaderID) :
                new ObjectParameter("PayrollFringeHeaderID", typeof(int));
    
            var startRangeParameter = startRange.HasValue ?
                new ObjectParameter("StartRange", startRange) :
                new ObjectParameter("StartRange", typeof(int));
    
            var endRangeParameter = endRange.HasValue ?
                new ObjectParameter("EndRange", endRange) :
                new ObjectParameter("EndRange", typeof(int));
    
            var lOIdParameter = lOId.HasValue ?
                new ObjectParameter("LOId", lOId) :
                new ObjectParameter("LOId", typeof(int));
    
            var epiIdParameter = epiId.HasValue ?
                new ObjectParameter("EpiId", epiId) :
                new ObjectParameter("EpiId", typeof(int));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            var bananasIdParameter = bananasId.HasValue ?
                new ObjectParameter("BananasId", bananasId) :
                new ObjectParameter("BananasId", typeof(int));
    
            var fringeAccountParameter = fringeAccount.HasValue ?
                new ObjectParameter("FringeAccount", fringeAccount) :
                new ObjectParameter("FringeAccount", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateFringeByCompanyId", payrollFringeHeaderIDParameter, startRangeParameter, endRangeParameter, lOIdParameter, epiIdParameter, setIdParameter, bananasIdParameter, fringeAccountParameter, prodIDParameter, createdbyParameter, companyIDParameter);
        }
    
        public virtual int InsertUpdateGroupCompanyAccess(Nullable<int> groupId, string company, Nullable<int> prodId, Nullable<int> createdBy)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateGroupCompanyAccess", groupIdParameter, companyParameter, prodIdParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateGroups(Nullable<int> groupId, string groupname, Nullable<int> prodid, string status, Nullable<int> createdBy)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var groupnameParameter = groupname != null ?
                new ObjectParameter("Groupname", groupname) :
                new ObjectParameter("Groupname", typeof(string));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateGroups", groupIdParameter, groupnameParameter, prodidParameter, statusParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertupdateInvoice(Nullable<int> invoiceID, string invoiceNumber, Nullable<int> companyID, Nullable<int> vendorID, string vendorName, Nullable<bool> thirdParty, string workRegion, string description, Nullable<decimal> originalAmount, Nullable<decimal> currentBalance, Nullable<decimal> newItemamount, Nullable<decimal> newbalance, string batchNumber, Nullable<int> bankID, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, string payby, string checkGroupNumber, string checkNumber, string invoiceStatus, Nullable<int> userID, Nullable<int> prodID, Nullable<decimal> amount, Nullable<int> closePeriodID, Nullable<bool> requiredTaxCode)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var thirdPartyParameter = thirdParty.HasValue ?
                new ObjectParameter("ThirdParty", thirdParty) :
                new ObjectParameter("ThirdParty", typeof(bool));
    
            var workRegionParameter = workRegion != null ?
                new ObjectParameter("WorkRegion", workRegion) :
                new ObjectParameter("WorkRegion", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var newItemamountParameter = newItemamount.HasValue ?
                new ObjectParameter("NewItemamount", newItemamount) :
                new ObjectParameter("NewItemamount", typeof(decimal));
    
            var newbalanceParameter = newbalance.HasValue ?
                new ObjectParameter("Newbalance", newbalance) :
                new ObjectParameter("Newbalance", typeof(decimal));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var paybyParameter = payby != null ?
                new ObjectParameter("Payby", payby) :
                new ObjectParameter("Payby", typeof(string));
    
            var checkGroupNumberParameter = checkGroupNumber != null ?
                new ObjectParameter("CheckGroupNumber", checkGroupNumber) :
                new ObjectParameter("CheckGroupNumber", typeof(string));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var closePeriodIDParameter = closePeriodID.HasValue ?
                new ObjectParameter("ClosePeriodID", closePeriodID) :
                new ObjectParameter("ClosePeriodID", typeof(int));
    
            var requiredTaxCodeParameter = requiredTaxCode.HasValue ?
                new ObjectParameter("RequiredTaxCode", requiredTaxCode) :
                new ObjectParameter("RequiredTaxCode", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertupdateInvoice", invoiceIDParameter, invoiceNumberParameter, companyIDParameter, vendorIDParameter, vendorNameParameter, thirdPartyParameter, workRegionParameter, descriptionParameter, originalAmountParameter, currentBalanceParameter, newItemamountParameter, newbalanceParameter, batchNumberParameter, bankIDParameter, invoiceDateParameter, dueDateParameter, paybyParameter, checkGroupNumberParameter, checkNumberParameter, invoiceStatusParameter, userIDParameter, prodIDParameter, amountParameter, closePeriodIDParameter, requiredTaxCodeParameter);
        }
    
        public virtual int InsertupdateInvoiceLine(Nullable<int> invoiceLineID, Nullable<int> invoiceID, Nullable<int> cOAID, Nullable<decimal> amount, string lineDescription, string invoiceLinestatus, string cOAString, string transactionstring, Nullable<int> pOlineID, Nullable<int> userID, Nullable<int> prodID, Nullable<int> paymentID, Nullable<int> setID, Nullable<int> seriesID, Nullable<bool> clearedFlag, string taxCode, Nullable<int> rowID)
        {
            var invoiceLineIDParameter = invoiceLineID.HasValue ?
                new ObjectParameter("InvoiceLineID", invoiceLineID) :
                new ObjectParameter("InvoiceLineID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var lineDescriptionParameter = lineDescription != null ?
                new ObjectParameter("LineDescription", lineDescription) :
                new ObjectParameter("LineDescription", typeof(string));
    
            var invoiceLinestatusParameter = invoiceLinestatus != null ?
                new ObjectParameter("InvoiceLinestatus", invoiceLinestatus) :
                new ObjectParameter("InvoiceLinestatus", typeof(string));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var transactionstringParameter = transactionstring != null ?
                new ObjectParameter("Transactionstring", transactionstring) :
                new ObjectParameter("Transactionstring", typeof(string));
    
            var pOlineIDParameter = pOlineID.HasValue ?
                new ObjectParameter("POlineID", pOlineID) :
                new ObjectParameter("POlineID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var setIDParameter = setID.HasValue ?
                new ObjectParameter("SetID", setID) :
                new ObjectParameter("SetID", typeof(int));
    
            var seriesIDParameter = seriesID.HasValue ?
                new ObjectParameter("SeriesID", seriesID) :
                new ObjectParameter("SeriesID", typeof(int));
    
            var clearedFlagParameter = clearedFlag.HasValue ?
                new ObjectParameter("ClearedFlag", clearedFlag) :
                new ObjectParameter("ClearedFlag", typeof(bool));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("rowID", rowID) :
                new ObjectParameter("rowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertupdateInvoiceLine", invoiceLineIDParameter, invoiceIDParameter, cOAIDParameter, amountParameter, lineDescriptionParameter, invoiceLinestatusParameter, cOAStringParameter, transactionstringParameter, pOlineIDParameter, userIDParameter, prodIDParameter, paymentIDParameter, setIDParameter, seriesIDParameter, clearedFlagParameter, taxCodeParameter, rowIDParameter);
        }
    
        public virtual ObjectResult<string> InsertUpdateJEByInvoice(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertUpdateJEByInvoice", invoiceIdParameter);
        }
    
        public virtual int InsertUpdateJEByInvoice2(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateJEByInvoice2", invoiceIdParameter);
        }
    
        public virtual ObjectResult<string> InsertUpdateJEDetail(Nullable<int> journalEntryId, Nullable<int> journalEntryDetailId, string transactionLineNumber, Nullable<int> cOAId, Nullable<decimal> debitAmount, Nullable<decimal> creditAmount, Nullable<int> vendorId, string vendorName, Nullable<bool> thirdParty, string note, Nullable<int> companyId, Nullable<int> prodId, Nullable<int> createdBy, string cOAString, string transactionCodeString, Nullable<int> setId, Nullable<int> seriesId, string taxCode)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("JournalEntryId", journalEntryId) :
                new ObjectParameter("JournalEntryId", typeof(int));
    
            var journalEntryDetailIdParameter = journalEntryDetailId.HasValue ?
                new ObjectParameter("JournalEntryDetailId", journalEntryDetailId) :
                new ObjectParameter("JournalEntryDetailId", typeof(int));
    
            var transactionLineNumberParameter = transactionLineNumber != null ?
                new ObjectParameter("TransactionLineNumber", transactionLineNumber) :
                new ObjectParameter("TransactionLineNumber", typeof(string));
    
            var cOAIdParameter = cOAId.HasValue ?
                new ObjectParameter("COAId", cOAId) :
                new ObjectParameter("COAId", typeof(int));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var thirdPartyParameter = thirdParty.HasValue ?
                new ObjectParameter("ThirdParty", thirdParty) :
                new ObjectParameter("ThirdParty", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var transactionCodeStringParameter = transactionCodeString != null ?
                new ObjectParameter("TransactionCodeString", transactionCodeString) :
                new ObjectParameter("TransactionCodeString", typeof(string));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            var seriesIdParameter = seriesId.HasValue ?
                new ObjectParameter("SeriesId", seriesId) :
                new ObjectParameter("SeriesId", typeof(int));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertUpdateJEDetail", journalEntryIdParameter, journalEntryDetailIdParameter, transactionLineNumberParameter, cOAIdParameter, debitAmountParameter, creditAmountParameter, vendorIdParameter, vendorNameParameter, thirdPartyParameter, noteParameter, companyIdParameter, prodIdParameter, createdByParameter, cOAStringParameter, transactionCodeStringParameter, setIdParameter, seriesIdParameter, taxCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateJEPCEnvelope(Nullable<int> pCEnvelopeId)
        {
            var pCEnvelopeIdParameter = pCEnvelopeId.HasValue ?
                new ObjectParameter("PCEnvelopeId", pCEnvelopeId) :
                new ObjectParameter("PCEnvelopeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateJEPCEnvelope", pCEnvelopeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertupdateJournalEntry(Nullable<int> journalEntryId, string transactionNumber, string source, string description, Nullable<System.DateTime> entryDate, Nullable<decimal> debitTotal, Nullable<decimal> creditTotal, Nullable<int> totalLines, Nullable<decimal> imbalanceAmount, string auditStatus, Nullable<System.DateTime> postedDate, string referenceNumber, string batchNumber, Nullable<int> prodId, Nullable<int> createdBy, Nullable<int> closePeriod, Nullable<int> companyId, string documentNo)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("JournalEntryId", journalEntryId) :
                new ObjectParameter("JournalEntryId", typeof(int));
    
            var transactionNumberParameter = transactionNumber != null ?
                new ObjectParameter("TransactionNumber", transactionNumber) :
                new ObjectParameter("TransactionNumber", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var debitTotalParameter = debitTotal.HasValue ?
                new ObjectParameter("DebitTotal", debitTotal) :
                new ObjectParameter("DebitTotal", typeof(decimal));
    
            var creditTotalParameter = creditTotal.HasValue ?
                new ObjectParameter("CreditTotal", creditTotal) :
                new ObjectParameter("CreditTotal", typeof(decimal));
    
            var totalLinesParameter = totalLines.HasValue ?
                new ObjectParameter("TotalLines", totalLines) :
                new ObjectParameter("TotalLines", typeof(int));
    
            var imbalanceAmountParameter = imbalanceAmount.HasValue ?
                new ObjectParameter("ImbalanceAmount", imbalanceAmount) :
                new ObjectParameter("ImbalanceAmount", typeof(decimal));
    
            var auditStatusParameter = auditStatus != null ?
                new ObjectParameter("AuditStatus", auditStatus) :
                new ObjectParameter("AuditStatus", typeof(string));
    
            var postedDateParameter = postedDate.HasValue ?
                new ObjectParameter("PostedDate", postedDate) :
                new ObjectParameter("PostedDate", typeof(System.DateTime));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var closePeriodParameter = closePeriod.HasValue ?
                new ObjectParameter("ClosePeriod", closePeriod) :
                new ObjectParameter("ClosePeriod", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertupdateJournalEntry", journalEntryIdParameter, transactionNumberParameter, sourceParameter, descriptionParameter, entryDateParameter, debitTotalParameter, creditTotalParameter, totalLinesParameter, imbalanceAmountParameter, auditStatusParameter, postedDateParameter, referenceNumberParameter, batchNumberParameter, prodIdParameter, createdByParameter, closePeriodParameter, companyIdParameter, documentNoParameter);
        }
    
        public virtual int InsertUpdateKeys(Nullable<int> payrollKeyID, string rCPKey, string rCPPrinterKey, string payrollKeyValue, Nullable<int> createdby, Nullable<int> prodID, Nullable<int> companyId)
        {
            var payrollKeyIDParameter = payrollKeyID.HasValue ?
                new ObjectParameter("PayrollKeyID", payrollKeyID) :
                new ObjectParameter("PayrollKeyID", typeof(int));
    
            var rCPKeyParameter = rCPKey != null ?
                new ObjectParameter("RCPKey", rCPKey) :
                new ObjectParameter("RCPKey", typeof(string));
    
            var rCPPrinterKeyParameter = rCPPrinterKey != null ?
                new ObjectParameter("RCPPrinterKey", rCPPrinterKey) :
                new ObjectParameter("RCPPrinterKey", typeof(string));
    
            var payrollKeyValueParameter = payrollKeyValue != null ?
                new ObjectParameter("PayrollKeyValue", payrollKeyValue) :
                new ObjectParameter("PayrollKeyValue", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateKeys", payrollKeyIDParameter, rCPKeyParameter, rCPPrinterKeyParameter, payrollKeyValueParameter, createdbyParameter, prodIDParameter, companyIdParameter);
        }
    
        public virtual int InsertupdateMyDefault(string type, string userType, Nullable<int> refId, string defvalue, Nullable<int> userId, Nullable<int> prodId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(int));
    
            var defvalueParameter = defvalue != null ?
                new ObjectParameter("Defvalue", defvalue) :
                new ObjectParameter("Defvalue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertupdateMyDefault", typeParameter, userTypeParameter, refIdParameter, defvalueParameter, userIdParameter, prodIdParameter);
        }
    
        public virtual int InsertUpdateMyDefaultUserProfile(string type, string userType, Nullable<int> refId, string defvalue, Nullable<int> userId, Nullable<int> prodId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(int));
    
            var defvalueParameter = defvalue != null ?
                new ObjectParameter("Defvalue", defvalue) :
                new ObjectParameter("Defvalue", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateMyDefaultUserProfile", typeParameter, userTypeParameter, refIdParameter, defvalueParameter, userIdParameter, prodIdParameter);
        }
    
        public virtual int insertUpdatepayrollbanksetup(Nullable<int> payrollBankSetupid, Nullable<int> defaultCompanyID, Nullable<int> defaultBankId, string defaultCurrency, Nullable<int> pRSource, Nullable<int> aPSource, Nullable<int> createdby, Nullable<int> prodID, Nullable<int> vendorID)
        {
            var payrollBankSetupidParameter = payrollBankSetupid.HasValue ?
                new ObjectParameter("PayrollBankSetupid", payrollBankSetupid) :
                new ObjectParameter("PayrollBankSetupid", typeof(int));
    
            var defaultCompanyIDParameter = defaultCompanyID.HasValue ?
                new ObjectParameter("DefaultCompanyID", defaultCompanyID) :
                new ObjectParameter("DefaultCompanyID", typeof(int));
    
            var defaultBankIdParameter = defaultBankId.HasValue ?
                new ObjectParameter("DefaultBankId", defaultBankId) :
                new ObjectParameter("DefaultBankId", typeof(int));
    
            var defaultCurrencyParameter = defaultCurrency != null ?
                new ObjectParameter("DefaultCurrency", defaultCurrency) :
                new ObjectParameter("DefaultCurrency", typeof(string));
    
            var pRSourceParameter = pRSource.HasValue ?
                new ObjectParameter("PRSource", pRSource) :
                new ObjectParameter("PRSource", typeof(int));
    
            var aPSourceParameter = aPSource.HasValue ?
                new ObjectParameter("APSource", aPSource) :
                new ObjectParameter("APSource", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertUpdatepayrollbanksetup", payrollBankSetupidParameter, defaultCompanyIDParameter, defaultBankIdParameter, defaultCurrencyParameter, pRSourceParameter, aPSourceParameter, createdbyParameter, prodIDParameter, vendorIDParameter);
        }
    
        public virtual int InsertUpdatePayrollfreeFields(Nullable<int> payrollFreeFieldID, Nullable<int> freeField1, Nullable<int> freeField2, Nullable<int> freeField3, Nullable<int> createdby, Nullable<int> prodID, Nullable<int> companyId)
        {
            var payrollFreeFieldIDParameter = payrollFreeFieldID.HasValue ?
                new ObjectParameter("PayrollFreeFieldID", payrollFreeFieldID) :
                new ObjectParameter("PayrollFreeFieldID", typeof(int));
    
            var freeField1Parameter = freeField1.HasValue ?
                new ObjectParameter("FreeField1", freeField1) :
                new ObjectParameter("FreeField1", typeof(int));
    
            var freeField2Parameter = freeField2.HasValue ?
                new ObjectParameter("FreeField2", freeField2) :
                new ObjectParameter("FreeField2", typeof(int));
    
            var freeField3Parameter = freeField3.HasValue ?
                new ObjectParameter("FreeField3", freeField3) :
                new ObjectParameter("FreeField3", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePayrollfreeFields", payrollFreeFieldIDParameter, freeField1Parameter, freeField2Parameter, freeField3Parameter, createdbyParameter, prodIDParameter, companyIdParameter);
        }
    
        public virtual int InsertUpdatePayrollTransValue(Nullable<int> expenseID, Nullable<int> modifyBy, string transValueStr, string cOAString, string segmentString, string segmentString1, string segmentString2, string accountNumber, string payDescription, string segmentStr1, string transactionStr1, string setID, string seriesID)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("ExpenseID", expenseID) :
                new ObjectParameter("ExpenseID", typeof(int));
    
            var modifyByParameter = modifyBy.HasValue ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(int));
    
            var transValueStrParameter = transValueStr != null ?
                new ObjectParameter("TransValueStr", transValueStr) :
                new ObjectParameter("TransValueStr", typeof(string));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var segmentStringParameter = segmentString != null ?
                new ObjectParameter("SegmentString", segmentString) :
                new ObjectParameter("SegmentString", typeof(string));
    
            var segmentString1Parameter = segmentString1 != null ?
                new ObjectParameter("SegmentString1", segmentString1) :
                new ObjectParameter("SegmentString1", typeof(string));
    
            var segmentString2Parameter = segmentString2 != null ?
                new ObjectParameter("SegmentString2", segmentString2) :
                new ObjectParameter("SegmentString2", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var payDescriptionParameter = payDescription != null ?
                new ObjectParameter("PayDescription", payDescription) :
                new ObjectParameter("PayDescription", typeof(string));
    
            var segmentStr1Parameter = segmentStr1 != null ?
                new ObjectParameter("SegmentStr1", segmentStr1) :
                new ObjectParameter("SegmentStr1", typeof(string));
    
            var transactionStr1Parameter = transactionStr1 != null ?
                new ObjectParameter("TransactionStr1", transactionStr1) :
                new ObjectParameter("TransactionStr1", typeof(string));
    
            var setIDParameter = setID != null ?
                new ObjectParameter("SetID", setID) :
                new ObjectParameter("SetID", typeof(string));
    
            var seriesIDParameter = seriesID != null ?
                new ObjectParameter("SeriesID", seriesID) :
                new ObjectParameter("SeriesID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePayrollTransValue", expenseIDParameter, modifyByParameter, transValueStrParameter, cOAStringParameter, segmentStringParameter, segmentString1Parameter, segmentString2Parameter, accountNumberParameter, payDescriptionParameter, segmentStr1Parameter, transactionStr1Parameter, setIDParameter, seriesIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdatePCEnvelope(Nullable<int> pcEnvelopeID, Nullable<int> companyid, string batchNumber, Nullable<int> custodianId, Nullable<int> recipientId, string envelopeNumber, string description, Nullable<decimal> advanceAmount, Nullable<decimal> envelopeAmount, Nullable<decimal> lineItemAmount, Nullable<decimal> difference, Nullable<System.DateTime> postedDate, string status, Nullable<int> createdBy, Nullable<int> prodid, Nullable<int> postedBy, Nullable<int> closePeriodId)
        {
            var pcEnvelopeIDParameter = pcEnvelopeID.HasValue ?
                new ObjectParameter("PcEnvelopeID", pcEnvelopeID) :
                new ObjectParameter("PcEnvelopeID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var custodianIdParameter = custodianId.HasValue ?
                new ObjectParameter("CustodianId", custodianId) :
                new ObjectParameter("CustodianId", typeof(int));
    
            var recipientIdParameter = recipientId.HasValue ?
                new ObjectParameter("RecipientId", recipientId) :
                new ObjectParameter("RecipientId", typeof(int));
    
            var envelopeNumberParameter = envelopeNumber != null ?
                new ObjectParameter("EnvelopeNumber", envelopeNumber) :
                new ObjectParameter("EnvelopeNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var envelopeAmountParameter = envelopeAmount.HasValue ?
                new ObjectParameter("EnvelopeAmount", envelopeAmount) :
                new ObjectParameter("EnvelopeAmount", typeof(decimal));
    
            var lineItemAmountParameter = lineItemAmount.HasValue ?
                new ObjectParameter("LineItemAmount", lineItemAmount) :
                new ObjectParameter("LineItemAmount", typeof(decimal));
    
            var differenceParameter = difference.HasValue ?
                new ObjectParameter("Difference", difference) :
                new ObjectParameter("Difference", typeof(decimal));
    
            var postedDateParameter = postedDate.HasValue ?
                new ObjectParameter("PostedDate", postedDate) :
                new ObjectParameter("PostedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var postedByParameter = postedBy.HasValue ?
                new ObjectParameter("PostedBy", postedBy) :
                new ObjectParameter("PostedBy", typeof(int));
    
            var closePeriodIdParameter = closePeriodId.HasValue ?
                new ObjectParameter("ClosePeriodId", closePeriodId) :
                new ObjectParameter("ClosePeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdatePCEnvelope", pcEnvelopeIDParameter, companyidParameter, batchNumberParameter, custodianIdParameter, recipientIdParameter, envelopeNumberParameter, descriptionParameter, advanceAmountParameter, envelopeAmountParameter, lineItemAmountParameter, differenceParameter, postedDateParameter, statusParameter, createdByParameter, prodidParameter, postedByParameter, closePeriodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdatePCEnvelopeLine(Nullable<int> envelopeLineID, Nullable<int> pCEnvelopeID, Nullable<int> transactionLineNumber, Nullable<int> cOAID, Nullable<decimal> amount, Nullable<int> vendorID, string lineDescription, string transactionCodeString, Nullable<int> setid, Nullable<int> seriesID, Nullable<int> prodid, Nullable<int> createdBy, string coaString, string taxCode, string displayflag)
        {
            var envelopeLineIDParameter = envelopeLineID.HasValue ?
                new ObjectParameter("EnvelopeLineID", envelopeLineID) :
                new ObjectParameter("EnvelopeLineID", typeof(int));
    
            var pCEnvelopeIDParameter = pCEnvelopeID.HasValue ?
                new ObjectParameter("PCEnvelopeID", pCEnvelopeID) :
                new ObjectParameter("PCEnvelopeID", typeof(int));
    
            var transactionLineNumberParameter = transactionLineNumber.HasValue ?
                new ObjectParameter("TransactionLineNumber", transactionLineNumber) :
                new ObjectParameter("TransactionLineNumber", typeof(int));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var lineDescriptionParameter = lineDescription != null ?
                new ObjectParameter("LineDescription", lineDescription) :
                new ObjectParameter("LineDescription", typeof(string));
    
            var transactionCodeStringParameter = transactionCodeString != null ?
                new ObjectParameter("TransactionCodeString", transactionCodeString) :
                new ObjectParameter("TransactionCodeString", typeof(string));
    
            var setidParameter = setid.HasValue ?
                new ObjectParameter("Setid", setid) :
                new ObjectParameter("Setid", typeof(int));
    
            var seriesIDParameter = seriesID.HasValue ?
                new ObjectParameter("SeriesID", seriesID) :
                new ObjectParameter("SeriesID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var coaStringParameter = coaString != null ?
                new ObjectParameter("CoaString", coaString) :
                new ObjectParameter("CoaString", typeof(string));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var displayflagParameter = displayflag != null ?
                new ObjectParameter("Displayflag", displayflag) :
                new ObjectParameter("Displayflag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdatePCEnvelopeLine", envelopeLineIDParameter, pCEnvelopeIDParameter, transactionLineNumberParameter, cOAIDParameter, amountParameter, vendorIDParameter, lineDescriptionParameter, transactionCodeStringParameter, setidParameter, seriesIDParameter, prodidParameter, createdByParameter, coaStringParameter, taxCodeParameter, displayflagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdatePermission(Nullable<int> groupId, Nullable<int> moduleId, string access, Nullable<int> createdBy, Nullable<int> prodID)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var accessParameter = access != null ?
                new ObjectParameter("Access", access) :
                new ObjectParameter("Access", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdatePermission", groupIdParameter, moduleIdParameter, accessParameter, createdByParameter, prodIDParameter);
        }
    
        public virtual int InsertUpdateStartingvalue(Nullable<int> companyID, string aP, string pO, string invoice, Nullable<int> createdBy, Nullable<int> prodID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var aPParameter = aP != null ?
                new ObjectParameter("AP", aP) :
                new ObjectParameter("AP", typeof(string));
    
            var pOParameter = pO != null ?
                new ObjectParameter("PO", pO) :
                new ObjectParameter("PO", typeof(string));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateStartingvalue", companyIDParameter, aPParameter, pOParameter, invoiceParameter, createdByParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateTransValueByCompanyId(Nullable<int> payrollFringeAddonID, Nullable<int> payrollFringeHeaderID, Nullable<int> transactionCodeId, Nullable<int> transactionValueId, Nullable<int> createdby, Nullable<int> prodID, Nullable<int> companyID)
        {
            var payrollFringeAddonIDParameter = payrollFringeAddonID.HasValue ?
                new ObjectParameter("PayrollFringeAddonID", payrollFringeAddonID) :
                new ObjectParameter("PayrollFringeAddonID", typeof(int));
    
            var payrollFringeHeaderIDParameter = payrollFringeHeaderID.HasValue ?
                new ObjectParameter("PayrollFringeHeaderID", payrollFringeHeaderID) :
                new ObjectParameter("PayrollFringeHeaderID", typeof(int));
    
            var transactionCodeIdParameter = transactionCodeId.HasValue ?
                new ObjectParameter("TransactionCodeId", transactionCodeId) :
                new ObjectParameter("TransactionCodeId", typeof(int));
    
            var transactionValueIdParameter = transactionValueId.HasValue ?
                new ObjectParameter("TransactionValueId", transactionValueId) :
                new ObjectParameter("TransactionValueId", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateTransValueByCompanyId", payrollFringeAddonIDParameter, payrollFringeHeaderIDParameter, transactionCodeIdParameter, transactionValueIdParameter, createdbyParameter, prodIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateUser(Nullable<int> userId, string name, string title, string email, Nullable<bool> status, Nullable<int> createdby, Nullable<bool> groupBatchAccess, Nullable<bool> canClose, Nullable<bool> allBatchAccess, Nullable<int> prodId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var groupBatchAccessParameter = groupBatchAccess.HasValue ?
                new ObjectParameter("GroupBatchAccess", groupBatchAccess) :
                new ObjectParameter("GroupBatchAccess", typeof(bool));
    
            var canCloseParameter = canClose.HasValue ?
                new ObjectParameter("CanClose", canClose) :
                new ObjectParameter("CanClose", typeof(bool));
    
            var allBatchAccessParameter = allBatchAccess.HasValue ?
                new ObjectParameter("AllBatchAccess", allBatchAccess) :
                new ObjectParameter("AllBatchAccess", typeof(bool));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateUser", userIdParameter, nameParameter, titleParameter, emailParameter, statusParameter, createdbyParameter, groupBatchAccessParameter, canCloseParameter, allBatchAccessParameter, prodIdParameter);
        }
    
        public virtual int InsertUpdateUserProfileAP(Nullable<int> userProfileAPID, string company, string currency, string bankInfo, string paymentType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string vendor, string batchNumber, string userID, Nullable<int> prodId, string aPType, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var userProfileAPIDParameter = userProfileAPID.HasValue ?
                new ObjectParameter("UserProfileAPID", userProfileAPID) :
                new ObjectParameter("UserProfileAPID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var bankInfoParameter = bankInfo != null ?
                new ObjectParameter("BankInfo", bankInfo) :
                new ObjectParameter("BankInfo", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var aPTypeParameter = aPType != null ?
                new ObjectParameter("APType", aPType) :
                new ObjectParameter("APType", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUserProfileAP", userProfileAPIDParameter, companyParameter, currencyParameter, bankInfoParameter, paymentTypeParameter, fromDateParameter, toDateParameter, vendorParameter, batchNumberParameter, userIDParameter, prodIdParameter, aPTypeParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int InsertUserAccess(Nullable<int> userId, string groupId, Nullable<int> prodId, Nullable<int> createdBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var groupIdParameter = groupId != null ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserAccess", userIdParameter, groupIdParameter, prodIdParameter, createdByParameter);
        }
    
        public virtual int InsertXML(string xml)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertXML", xmlParameter);
        }
    
        public virtual ObjectResult<INVOICEJETHROUGHPAYROLL_Result> INVOICEJETHROUGHPAYROLL(Nullable<int> payrollFileID, Nullable<int> userID, Nullable<int> prodId, Nullable<int> vendorID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<INVOICEJETHROUGHPAYROLL_Result>("INVOICEJETHROUGHPAYROLL", payrollFileIDParameter, userIDParameter, prodIdParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<INVOICEJETHROUGHPAYROLL1_Result> INVOICEJETHROUGHPAYROLL1(Nullable<int> payrollFileID, Nullable<int> userID, Nullable<int> prodId, Nullable<int> journalEntryID, Nullable<int> vendorID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var journalEntryIDParameter = journalEntryID.HasValue ?
                new ObjectParameter("JournalEntryID", journalEntryID) :
                new ObjectParameter("JournalEntryID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<INVOICEJETHROUGHPAYROLL1_Result>("INVOICEJETHROUGHPAYROLL1", payrollFileIDParameter, userIDParameter, prodIdParameter, journalEntryIDParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<InvoiceNumberAutoFill_Result> InvoiceNumberAutoFill(Nullable<int> companyID, Nullable<int> mode)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceNumberAutoFill_Result>("InvoiceNumberAutoFill", companyIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<JEAuditReportFilter_Result> JEAuditReportFilter(Nullable<int> prodId, Nullable<int> companyId, string periodStatus, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createdDateTo, string transactionFrom, string tranasactionTo, string batchNumber, string userName, string status)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var transactionFromParameter = transactionFrom != null ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(string));
    
            var tranasactionToParameter = tranasactionTo != null ?
                new ObjectParameter("TranasactionTo", tranasactionTo) :
                new ObjectParameter("TranasactionTo", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JEAuditReportFilter_Result>("JEAuditReportFilter", prodIdParameter, companyIdParameter, periodStatusParameter, createDateFromParameter, createdDateToParameter, transactionFromParameter, tranasactionToParameter, batchNumberParameter, userNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<JEAuditReportFilterByAccount_Result> JEAuditReportFilterByAccount(Nullable<int> prodId, Nullable<int> companyId, string periodStatus, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createdDateTo, string transactionFrom, string tranasactionTo, string batchNumber, string userName, string status)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var transactionFromParameter = transactionFrom != null ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(string));
    
            var tranasactionToParameter = tranasactionTo != null ?
                new ObjectParameter("TranasactionTo", tranasactionTo) :
                new ObjectParameter("TranasactionTo", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JEAuditReportFilterByAccount_Result>("JEAuditReportFilterByAccount", prodIdParameter, companyIdParameter, periodStatusParameter, createDateFromParameter, createdDateToParameter, transactionFromParameter, tranasactionToParameter, batchNumberParameter, userNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> JEReverseByInvoice(Nullable<int> invoiceId, Nullable<bool> reIssue)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var reIssueParameter = reIssue.HasValue ?
                new ObjectParameter("ReIssue", reIssue) :
                new ObjectParameter("ReIssue", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("JEReverseByInvoice", invoiceIdParameter, reIssueParameter);
        }
    
        public virtual int JEReverseByInvoiceForPayment(Nullable<int> invoiceId, string reIssue, Nullable<int> newPaymentID)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var reIssueParameter = reIssue != null ?
                new ObjectParameter("ReIssue", reIssue) :
                new ObjectParameter("ReIssue", typeof(string));
    
            var newPaymentIDParameter = newPaymentID.HasValue ?
                new ObjectParameter("NewPaymentID", newPaymentID) :
                new ObjectParameter("NewPaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JEReverseByInvoiceForPayment", invoiceIdParameter, reIssueParameter, newPaymentIDParameter);
        }
    
        public virtual int JEReverseByPayment(Nullable<int> paymentID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JEReverseByPayment", paymentIDParameter);
        }
    
        public virtual ObjectResult<JETHROUGHPAYROLL_Result> JETHROUGHPAYROLL(Nullable<int> payrollFileID, Nullable<int> userID, Nullable<int> prodId, Nullable<int> vendorID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JETHROUGHPAYROLL_Result>("JETHROUGHPAYROLL", payrollFileIDParameter, userIDParameter, prodIdParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<JETHROUGHPAYROLL1_Result> JETHROUGHPAYROLL1(Nullable<int> payrollFileID, Nullable<int> userID, Nullable<int> prodId, Nullable<int> vendorID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JETHROUGHPAYROLL1_Result>("JETHROUGHPAYROLL1", payrollFileIDParameter, userIDParameter, prodIdParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<int> JournalEntryPayment(Nullable<int> paymentID, Nullable<int> prodID, Nullable<int> userID, string companyCode, string batchNumber)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<int>("JournalEntryPayment", paymentIDParameter, prodIDParameter, userIDParameter, companyCodeParameter, batchNumberParameter);
        }
    
        public virtual int JournalEntryPayment1(Nullable<int> paymentID, Nullable<int> prodID, Nullable<int> userID, Nullable<int> bankID, string companyCode, string batchNumber)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalEntryPayment1", paymentIDParameter, prodIDParameter, userIDParameter, bankIDParameter, companyCodeParameter, batchNumberParameter);
        }
    
        public virtual ObjectResult<LedgerBible_Result> LedgerBible(Nullable<int> companyid, Nullable<int> periodIdfrom, Nullable<int> periodIdTo, Nullable<int> prodId, string lO)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var periodIdfromParameter = periodIdfrom.HasValue ?
                new ObjectParameter("PeriodIdfrom", periodIdfrom) :
                new ObjectParameter("PeriodIdfrom", typeof(int));
    
            var periodIdToParameter = periodIdTo.HasValue ?
                new ObjectParameter("PeriodIdTo", periodIdTo) :
                new ObjectParameter("PeriodIdTo", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var lOParameter = lO != null ?
                new ObjectParameter("LO", lO) :
                new ObjectParameter("LO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LedgerBible_Result>("LedgerBible", companyidParameter, periodIdfromParameter, periodIdToParameter, prodIdParameter, lOParameter);
        }
    
        public virtual ObjectResult<LedgerInQuiry_Result> LedgerInQuiry(Nullable<int> companyid, string periodStatus, Nullable<int> prodId, Nullable<System.DateTime> eFDateFrom, Nullable<System.DateTime> eFDateTo, string batch, string createdBy, Nullable<int> trStart, Nullable<int> trend, string documentNo, string tT, string vendorFrom, string vendorTo, string location, string accountFrom, string accountTo)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var eFDateFromParameter = eFDateFrom.HasValue ?
                new ObjectParameter("EFDateFrom", eFDateFrom) :
                new ObjectParameter("EFDateFrom", typeof(System.DateTime));
    
            var eFDateToParameter = eFDateTo.HasValue ?
                new ObjectParameter("EFDateTo", eFDateTo) :
                new ObjectParameter("EFDateTo", typeof(System.DateTime));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var trStartParameter = trStart.HasValue ?
                new ObjectParameter("TrStart", trStart) :
                new ObjectParameter("TrStart", typeof(int));
    
            var trendParameter = trend.HasValue ?
                new ObjectParameter("Trend", trend) :
                new ObjectParameter("Trend", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var tTParameter = tT != null ?
                new ObjectParameter("TT", tT) :
                new ObjectParameter("TT", typeof(string));
    
            var vendorFromParameter = vendorFrom != null ?
                new ObjectParameter("VendorFrom", vendorFrom) :
                new ObjectParameter("VendorFrom", typeof(string));
    
            var vendorToParameter = vendorTo != null ?
                new ObjectParameter("VendorTo", vendorTo) :
                new ObjectParameter("VendorTo", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var accountFromParameter = accountFrom != null ?
                new ObjectParameter("AccountFrom", accountFrom) :
                new ObjectParameter("AccountFrom", typeof(string));
    
            var accountToParameter = accountTo != null ?
                new ObjectParameter("AccountTo", accountTo) :
                new ObjectParameter("AccountTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LedgerInQuiry_Result>("LedgerInQuiry", companyidParameter, periodStatusParameter, prodIdParameter, eFDateFromParameter, eFDateToParameter, batchParameter, createdByParameter, trStartParameter, trendParameter, documentNoParameter, tTParameter, vendorFromParameter, vendorToParameter, locationParameter, accountFromParameter, accountToParameter);
        }
    
        public virtual ObjectResult<LedgerInQuiryTransaction_Result> LedgerInQuiryTransaction(Nullable<int> companyid, string periodStatus, Nullable<int> prodId, Nullable<System.DateTime> eFDateFrom, Nullable<System.DateTime> eFDateTo, string batch, string createdBy, Nullable<int> trStart, Nullable<int> trend, string documentNo, string tT, string vendorFrom, string vendorTo, string location, string accountFrom, string accountTo)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var eFDateFromParameter = eFDateFrom.HasValue ?
                new ObjectParameter("EFDateFrom", eFDateFrom) :
                new ObjectParameter("EFDateFrom", typeof(System.DateTime));
    
            var eFDateToParameter = eFDateTo.HasValue ?
                new ObjectParameter("EFDateTo", eFDateTo) :
                new ObjectParameter("EFDateTo", typeof(System.DateTime));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var trStartParameter = trStart.HasValue ?
                new ObjectParameter("TrStart", trStart) :
                new ObjectParameter("TrStart", typeof(int));
    
            var trendParameter = trend.HasValue ?
                new ObjectParameter("Trend", trend) :
                new ObjectParameter("Trend", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var tTParameter = tT != null ?
                new ObjectParameter("TT", tT) :
                new ObjectParameter("TT", typeof(string));
    
            var vendorFromParameter = vendorFrom != null ?
                new ObjectParameter("VendorFrom", vendorFrom) :
                new ObjectParameter("VendorFrom", typeof(string));
    
            var vendorToParameter = vendorTo != null ?
                new ObjectParameter("VendorTo", vendorTo) :
                new ObjectParameter("VendorTo", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var accountFromParameter = accountFrom != null ?
                new ObjectParameter("AccountFrom", accountFrom) :
                new ObjectParameter("AccountFrom", typeof(string));
    
            var accountToParameter = accountTo != null ?
                new ObjectParameter("AccountTo", accountTo) :
                new ObjectParameter("AccountTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LedgerInQuiryTransaction_Result>("LedgerInQuiryTransaction", companyidParameter, periodStatusParameter, prodIdParameter, eFDateFromParameter, eFDateToParameter, batchParameter, createdByParameter, trStartParameter, trendParameter, documentNoParameter, tTParameter, vendorFromParameter, vendorToParameter, locationParameter, accountFromParameter, accountToParameter);
        }
    
        public virtual ObjectResult<LedgerShared_Result> LedgerShared(Nullable<int> pCompanyid, string pPeriodStatus, Nullable<int> pProdId, Nullable<System.DateTime> pEFDateFrom, Nullable<System.DateTime> pEFDateTo, string pBatch, string pCreatedBy, Nullable<int> pTrStart, Nullable<int> pTrend, string pDocumentNo, string pTT, string pVendorFrom, string pVendorTo, string pLocation, string pAccountFrom, string pAccountTo, string pSortExpr)
        {
            var pCompanyidParameter = pCompanyid.HasValue ?
                new ObjectParameter("PCompanyid", pCompanyid) :
                new ObjectParameter("PCompanyid", typeof(int));
    
            var pPeriodStatusParameter = pPeriodStatus != null ?
                new ObjectParameter("PPeriodStatus", pPeriodStatus) :
                new ObjectParameter("PPeriodStatus", typeof(string));
    
            var pProdIdParameter = pProdId.HasValue ?
                new ObjectParameter("PProdId", pProdId) :
                new ObjectParameter("PProdId", typeof(int));
    
            var pEFDateFromParameter = pEFDateFrom.HasValue ?
                new ObjectParameter("PEFDateFrom", pEFDateFrom) :
                new ObjectParameter("PEFDateFrom", typeof(System.DateTime));
    
            var pEFDateToParameter = pEFDateTo.HasValue ?
                new ObjectParameter("PEFDateTo", pEFDateTo) :
                new ObjectParameter("PEFDateTo", typeof(System.DateTime));
    
            var pBatchParameter = pBatch != null ?
                new ObjectParameter("PBatch", pBatch) :
                new ObjectParameter("PBatch", typeof(string));
    
            var pCreatedByParameter = pCreatedBy != null ?
                new ObjectParameter("PCreatedBy", pCreatedBy) :
                new ObjectParameter("PCreatedBy", typeof(string));
    
            var pTrStartParameter = pTrStart.HasValue ?
                new ObjectParameter("PTrStart", pTrStart) :
                new ObjectParameter("PTrStart", typeof(int));
    
            var pTrendParameter = pTrend.HasValue ?
                new ObjectParameter("PTrend", pTrend) :
                new ObjectParameter("PTrend", typeof(int));
    
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("PDocumentNo", pDocumentNo) :
                new ObjectParameter("PDocumentNo", typeof(string));
    
            var pTTParameter = pTT != null ?
                new ObjectParameter("PTT", pTT) :
                new ObjectParameter("PTT", typeof(string));
    
            var pVendorFromParameter = pVendorFrom != null ?
                new ObjectParameter("PVendorFrom", pVendorFrom) :
                new ObjectParameter("PVendorFrom", typeof(string));
    
            var pVendorToParameter = pVendorTo != null ?
                new ObjectParameter("PVendorTo", pVendorTo) :
                new ObjectParameter("PVendorTo", typeof(string));
    
            var pLocationParameter = pLocation != null ?
                new ObjectParameter("PLocation", pLocation) :
                new ObjectParameter("PLocation", typeof(string));
    
            var pAccountFromParameter = pAccountFrom != null ?
                new ObjectParameter("PAccountFrom", pAccountFrom) :
                new ObjectParameter("PAccountFrom", typeof(string));
    
            var pAccountToParameter = pAccountTo != null ?
                new ObjectParameter("PAccountTo", pAccountTo) :
                new ObjectParameter("PAccountTo", typeof(string));
    
            var pSortExprParameter = pSortExpr != null ?
                new ObjectParameter("PSortExpr", pSortExpr) :
                new ObjectParameter("PSortExpr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LedgerShared_Result>("LedgerShared", pCompanyidParameter, pPeriodStatusParameter, pProdIdParameter, pEFDateFromParameter, pEFDateToParameter, pBatchParameter, pCreatedByParameter, pTrStartParameter, pTrendParameter, pDocumentNoParameter, pTTParameter, pVendorFromParameter, pVendorToParameter, pLocationParameter, pAccountFromParameter, pAccountToParameter, pSortExprParameter);
        }
    
        public virtual int LoadMissingAccountAfterL2(Nullable<int> createdby, Nullable<int> prodID)
        {
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadMissingAccountAfterL2", createdbyParameter, prodIDParameter);
        }
    
        public virtual int LoadMissingAccountLevel1(Nullable<int> createdby, Nullable<int> prodID)
        {
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadMissingAccountLevel1", createdbyParameter, prodIDParameter);
        }
    
        public virtual int LoadMissingAccountLevel2(Nullable<int> createdby, Nullable<int> prodID)
        {
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadMissingAccountLevel2", createdbyParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<NewProc_Result> NewProc(Nullable<int> companyid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> prodId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewProc_Result>("NewProc", companyidParameter, fromDateParameter, toDateParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<OverWriteAdminPayrollFile_Result> OverWriteAdminPayrollFile(string invoiceRef, Nullable<int> companyID, Nullable<int> prodID, Nullable<int> createdby, string payrollFileXML)
        {
            var invoiceRefParameter = invoiceRef != null ?
                new ObjectParameter("InvoiceRef", invoiceRef) :
                new ObjectParameter("InvoiceRef", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var payrollFileXMLParameter = payrollFileXML != null ?
                new ObjectParameter("PayrollFileXML", payrollFileXML) :
                new ObjectParameter("PayrollFileXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OverWriteAdminPayrollFile_Result>("OverWriteAdminPayrollFile", invoiceRefParameter, companyIDParameter, prodIDParameter, createdbyParameter, payrollFileXMLParameter);
        }
    
        public virtual ObjectResult<PayrollCheckPrint_Result> PayrollCheckPrint(Nullable<int> payrollFileID)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayrollCheckPrint_Result>("PayrollCheckPrint", payrollFileIDParameter);
        }
    
        public virtual ObjectResult<PDFCopiesPID_Result> PDFCopiesPID(Nullable<int> checkRunID, Nullable<int> bankID, Nullable<int> prodID)
        {
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PDFCopiesPID_Result>("PDFCopiesPID", checkRunIDParameter, bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<PDFInvoiceLine_Result> PDFInvoiceLine(Nullable<int> paymentID, Nullable<int> bankID, Nullable<int> prodID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PDFInvoiceLine_Result>("PDFInvoiceLine", paymentIDParameter, bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<PDFInvoiceTaxAmount_Result> PDFInvoiceTaxAmount(Nullable<int> paymentID, Nullable<int> bankID, Nullable<int> prodID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PDFInvoiceTaxAmount_Result>("PDFInvoiceTaxAmount", paymentIDParameter, bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<PDFVendorDetail_Result> PDFVendorDetail(Nullable<int> paymentID, Nullable<int> bankID, Nullable<int> prodID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PDFVendorDetail_Result>("PDFVendorDetail", paymentIDParameter, bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<POListingReports_Result> POListingReports(Nullable<int> prodId, Nullable<int> companyId, string periodNoFrom, string periodNoTo, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo, string poNoFrom, string poNoTo, string vendorId, string batch, string userName, string pOStatus, Nullable<bool> locationSubTotal, Nullable<bool> episodeSubTotal)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var periodNoFromParameter = periodNoFrom != null ?
                new ObjectParameter("PeriodNoFrom", periodNoFrom) :
                new ObjectParameter("PeriodNoFrom", typeof(string));
    
            var periodNoToParameter = periodNoTo != null ?
                new ObjectParameter("PeriodNoTo", periodNoTo) :
                new ObjectParameter("PeriodNoTo", typeof(string));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("CreateDateTo", createDateTo) :
                new ObjectParameter("CreateDateTo", typeof(System.DateTime));
    
            var poNoFromParameter = poNoFrom != null ?
                new ObjectParameter("PoNoFrom", poNoFrom) :
                new ObjectParameter("PoNoFrom", typeof(string));
    
            var poNoToParameter = poNoTo != null ?
                new ObjectParameter("PoNoTo", poNoTo) :
                new ObjectParameter("PoNoTo", typeof(string));
    
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pOStatusParameter = pOStatus != null ?
                new ObjectParameter("POStatus", pOStatus) :
                new ObjectParameter("POStatus", typeof(string));
    
            var locationSubTotalParameter = locationSubTotal.HasValue ?
                new ObjectParameter("LocationSubTotal", locationSubTotal) :
                new ObjectParameter("LocationSubTotal", typeof(bool));
    
            var episodeSubTotalParameter = episodeSubTotal.HasValue ?
                new ObjectParameter("EpisodeSubTotal", episodeSubTotal) :
                new ObjectParameter("EpisodeSubTotal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<POListingReports_Result>("POListingReports", prodIdParameter, companyIdParameter, periodNoFromParameter, periodNoToParameter, createDateFromParameter, createDateToParameter, poNoFromParameter, poNoToParameter, vendorIdParameter, batchParameter, userNameParameter, pOStatusParameter, locationSubTotalParameter, episodeSubTotalParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProceedBudgetFinal(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> createdby, Nullable<int> prodID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProceedBudgetFinal", budgetIDParameter, budgetFileIDParameter, createdbyParameter, prodIDParameter);
        }
    
        public virtual int ProcessBudget(string actionType, Nullable<int> budgetFileID, Nullable<int> budgetID, Nullable<int> createdby)
        {
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessBudget", actionTypeParameter, budgetFileIDParameter, budgetIDParameter, createdbyParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> ProductionCleanUp(Nullable<int> prodID, string emailId, Nullable<int> userId)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("ProductionCleanUp", prodIDParameter, emailIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<ReconcilationListForReport_Result> ReconcilationListForReport(string companyID, string bankID, string recID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var recIDParameter = recID != null ?
                new ObjectParameter("RecID", recID) :
                new ObjectParameter("RecID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReconcilationListForReport_Result>("ReconcilationListForReport", companyIDParameter, bankIDParameter, recIDParameter);
        }
    
        public virtual ObjectResult<ReportPettyCash_Result> ReportPettyCash(Nullable<int> prodId, Nullable<System.DateTime> reportDate, Nullable<int> company, Nullable<int> pCBank, Nullable<int> currencyCode, Nullable<int> reportCurrencyCode, string closePeriodStatus, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo, string transactionNoFrom, string transactionNoTo, string vendorId, string batchNumber, string createdBy, string location, Nullable<bool> locationSubTotal, Nullable<bool> episodeSubTotal, string status)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(int));
    
            var pCBankParameter = pCBank.HasValue ?
                new ObjectParameter("PCBank", pCBank) :
                new ObjectParameter("PCBank", typeof(int));
    
            var currencyCodeParameter = currencyCode.HasValue ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(int));
    
            var reportCurrencyCodeParameter = reportCurrencyCode.HasValue ?
                new ObjectParameter("ReportCurrencyCode", reportCurrencyCode) :
                new ObjectParameter("ReportCurrencyCode", typeof(int));
    
            var closePeriodStatusParameter = closePeriodStatus != null ?
                new ObjectParameter("ClosePeriodStatus", closePeriodStatus) :
                new ObjectParameter("ClosePeriodStatus", typeof(string));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("CreateDateTo", createDateTo) :
                new ObjectParameter("CreateDateTo", typeof(System.DateTime));
    
            var transactionNoFromParameter = transactionNoFrom != null ?
                new ObjectParameter("TransactionNoFrom", transactionNoFrom) :
                new ObjectParameter("TransactionNoFrom", typeof(string));
    
            var transactionNoToParameter = transactionNoTo != null ?
                new ObjectParameter("TransactionNoTo", transactionNoTo) :
                new ObjectParameter("TransactionNoTo", typeof(string));
    
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var locationSubTotalParameter = locationSubTotal.HasValue ?
                new ObjectParameter("LocationSubTotal", locationSubTotal) :
                new ObjectParameter("LocationSubTotal", typeof(bool));
    
            var episodeSubTotalParameter = episodeSubTotal.HasValue ?
                new ObjectParameter("EpisodeSubTotal", episodeSubTotal) :
                new ObjectParameter("EpisodeSubTotal", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportPettyCash_Result>("ReportPettyCash", prodIdParameter, reportDateParameter, companyParameter, pCBankParameter, currencyCodeParameter, reportCurrencyCodeParameter, closePeriodStatusParameter, createDateFromParameter, createDateToParameter, transactionNoFromParameter, transactionNoToParameter, vendorIdParameter, batchNumberParameter, createdByParameter, locationParameter, locationSubTotalParameter, episodeSubTotalParameter, statusParameter);
        }
    
        public virtual ObjectResult<ReportPettyCashTotal_Result> ReportPettyCashTotal(Nullable<int> prodId, Nullable<System.DateTime> reportDate, Nullable<int> company, Nullable<int> pCBank, Nullable<int> currencyCode, Nullable<int> reportCurrencyCode, string closePeriodStatus, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo, string transactionNoFrom, string transactionNoTo, string vendorId, string batchNumber, Nullable<int> createdBy, string location, Nullable<bool> locationSubTotal, Nullable<bool> episodeSubTotal, string status)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(int));
    
            var pCBankParameter = pCBank.HasValue ?
                new ObjectParameter("PCBank", pCBank) :
                new ObjectParameter("PCBank", typeof(int));
    
            var currencyCodeParameter = currencyCode.HasValue ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(int));
    
            var reportCurrencyCodeParameter = reportCurrencyCode.HasValue ?
                new ObjectParameter("ReportCurrencyCode", reportCurrencyCode) :
                new ObjectParameter("ReportCurrencyCode", typeof(int));
    
            var closePeriodStatusParameter = closePeriodStatus != null ?
                new ObjectParameter("ClosePeriodStatus", closePeriodStatus) :
                new ObjectParameter("ClosePeriodStatus", typeof(string));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("CreateDateFrom", createDateFrom) :
                new ObjectParameter("CreateDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("CreateDateTo", createDateTo) :
                new ObjectParameter("CreateDateTo", typeof(System.DateTime));
    
            var transactionNoFromParameter = transactionNoFrom != null ?
                new ObjectParameter("TransactionNoFrom", transactionNoFrom) :
                new ObjectParameter("TransactionNoFrom", typeof(string));
    
            var transactionNoToParameter = transactionNoTo != null ?
                new ObjectParameter("TransactionNoTo", transactionNoTo) :
                new ObjectParameter("TransactionNoTo", typeof(string));
    
            var vendorIdParameter = vendorId != null ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var locationSubTotalParameter = locationSubTotal.HasValue ?
                new ObjectParameter("LocationSubTotal", locationSubTotal) :
                new ObjectParameter("LocationSubTotal", typeof(bool));
    
            var episodeSubTotalParameter = episodeSubTotal.HasValue ?
                new ObjectParameter("EpisodeSubTotal", episodeSubTotal) :
                new ObjectParameter("EpisodeSubTotal", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportPettyCashTotal_Result>("ReportPettyCashTotal", prodIdParameter, reportDateParameter, companyParameter, pCBankParameter, currencyCodeParameter, reportCurrencyCodeParameter, closePeriodStatusParameter, createDateFromParameter, createDateToParameter, transactionNoFromParameter, transactionNoToParameter, vendorIdParameter, batchNumberParameter, createdByParameter, locationParameter, locationSubTotalParameter, episodeSubTotalParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RePrintPayment(Nullable<int> paymentID, string batchNumber, Nullable<int> prodID, Nullable<int> userID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RePrintPayment", paymentIDParameter, batchNumberParameter, prodIDParameter, userIDParameter);
        }
    
        public virtual int SaveCompnayAccounts(Nullable<int> createdBy, Nullable<int> prodId, string aCCountCode, string accountName)
        {
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var aCCountCodeParameter = aCCountCode != null ?
                new ObjectParameter("ACCountCode", aCCountCode) :
                new ObjectParameter("ACCountCode", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveCompnayAccounts", createdByParameter, prodIdParameter, aCCountCodeParameter, accountNameParameter);
        }
    
        public virtual ObjectResult<SaveCRWNotes_Result> SaveCRWNotes(Nullable<int> cOAID, Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> userID, string note, Nullable<int> prodID)
        {
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveCRWNotes_Result>("SaveCRWNotes", cOAIDParameter, budgetIDParameter, budgetFileIDParameter, userIDParameter, noteParameter, prodIDParameter);
        }
    
        public virtual int SaveTrabsactionDate(Nullable<int> payrollFileID, Nullable<System.DateTime> transactionDate, string status, string batchNumber, string periodStatus)
        {
            var payrollFileIDParameter = payrollFileID.HasValue ?
                new ObjectParameter("PayrollFileID", payrollFileID) :
                new ObjectParameter("PayrollFileID", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var periodStatusParameter = periodStatus != null ?
                new ObjectParameter("PeriodStatus", periodStatus) :
                new ObjectParameter("PeriodStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTrabsactionDate", payrollFileIDParameter, transactionDateParameter, statusParameter, batchNumberParameter, periodStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SaveTransactionCode(string description, string transCode, Nullable<bool> status, Nullable<int> prodID, Nullable<int> createdBy)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transCodeParameter = transCode != null ?
                new ObjectParameter("TransCode", transCode) :
                new ObjectParameter("TransCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SaveTransactionCode", descriptionParameter, transCodeParameter, statusParameter, prodIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> SaveTransactionValue(Nullable<int> transactionCodeID, string transValue, Nullable<bool> status, string description, Nullable<int> prodID, Nullable<int> createdBy)
        {
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var transValueParameter = transValue != null ?
                new ObjectParameter("TransValue", transValue) :
                new ObjectParameter("TransValue", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SaveTransactionValue", transactionCodeIDParameter, transValueParameter, statusParameter, descriptionParameter, prodIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SaveUpdatePO(Nullable<int> pOID, string pONumber, Nullable<int> companyID, Nullable<int> vendorID, string vendorName, Nullable<bool> thirdParty, string workRegion, string description, Nullable<decimal> originalAmount, Nullable<decimal> adjustmentTotal, Nullable<decimal> relievedTotal, Nullable<decimal> balanceAmount, string batchNumber, Nullable<bool> closePOuponPayment, string payby, string status, Nullable<int> createdBy, Nullable<int> prodID, Nullable<System.DateTime> pODate, Nullable<int> closePeriodId, Nullable<bool> requiredTaxCode)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var thirdPartyParameter = thirdParty.HasValue ?
                new ObjectParameter("ThirdParty", thirdParty) :
                new ObjectParameter("ThirdParty", typeof(bool));
    
            var workRegionParameter = workRegion != null ?
                new ObjectParameter("WorkRegion", workRegion) :
                new ObjectParameter("WorkRegion", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var adjustmentTotalParameter = adjustmentTotal.HasValue ?
                new ObjectParameter("AdjustmentTotal", adjustmentTotal) :
                new ObjectParameter("AdjustmentTotal", typeof(decimal));
    
            var relievedTotalParameter = relievedTotal.HasValue ?
                new ObjectParameter("RelievedTotal", relievedTotal) :
                new ObjectParameter("RelievedTotal", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var closePOuponPaymentParameter = closePOuponPayment.HasValue ?
                new ObjectParameter("ClosePOuponPayment", closePOuponPayment) :
                new ObjectParameter("ClosePOuponPayment", typeof(bool));
    
            var paybyParameter = payby != null ?
                new ObjectParameter("Payby", payby) :
                new ObjectParameter("Payby", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var closePeriodIdParameter = closePeriodId.HasValue ?
                new ObjectParameter("ClosePeriodId", closePeriodId) :
                new ObjectParameter("ClosePeriodId", typeof(int));
    
            var requiredTaxCodeParameter = requiredTaxCode.HasValue ?
                new ObjectParameter("RequiredTaxCode", requiredTaxCode) :
                new ObjectParameter("RequiredTaxCode", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SaveUpdatePO", pOIDParameter, pONumberParameter, companyIDParameter, vendorIDParameter, vendorNameParameter, thirdPartyParameter, workRegionParameter, descriptionParameter, originalAmountParameter, adjustmentTotalParameter, relievedTotalParameter, balanceAmountParameter, batchNumberParameter, closePOuponPaymentParameter, paybyParameter, statusParameter, createdByParameter, prodIDParameter, pODateParameter, closePeriodIdParameter, requiredTaxCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SaveUpdatePurchaseOrderLine(Nullable<int> pOLineId, Nullable<int> pOID, Nullable<int> cOAID, Nullable<decimal> amount, Nullable<decimal> manualAdjustment, Nullable<decimal> clearedAmount, Nullable<decimal> adjustMentTotal, Nullable<decimal> relievedTotal, Nullable<decimal> availToRelieve, Nullable<decimal> displayAmount, string lineDescription, string pOLinestatus, string cOAString, string transactionstring, Nullable<int> createdBy, Nullable<int> prodID, string thirdPartyVendor, Nullable<int> setID, Nullable<int> seriesID, string taxCode)
        {
            var pOLineIdParameter = pOLineId.HasValue ?
                new ObjectParameter("POLineId", pOLineId) :
                new ObjectParameter("POLineId", typeof(int));
    
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var manualAdjustmentParameter = manualAdjustment.HasValue ?
                new ObjectParameter("ManualAdjustment", manualAdjustment) :
                new ObjectParameter("ManualAdjustment", typeof(decimal));
    
            var clearedAmountParameter = clearedAmount.HasValue ?
                new ObjectParameter("ClearedAmount", clearedAmount) :
                new ObjectParameter("ClearedAmount", typeof(decimal));
    
            var adjustMentTotalParameter = adjustMentTotal.HasValue ?
                new ObjectParameter("AdjustMentTotal", adjustMentTotal) :
                new ObjectParameter("AdjustMentTotal", typeof(decimal));
    
            var relievedTotalParameter = relievedTotal.HasValue ?
                new ObjectParameter("RelievedTotal", relievedTotal) :
                new ObjectParameter("RelievedTotal", typeof(decimal));
    
            var availToRelieveParameter = availToRelieve.HasValue ?
                new ObjectParameter("AvailToRelieve", availToRelieve) :
                new ObjectParameter("AvailToRelieve", typeof(decimal));
    
            var displayAmountParameter = displayAmount.HasValue ?
                new ObjectParameter("DisplayAmount", displayAmount) :
                new ObjectParameter("DisplayAmount", typeof(decimal));
    
            var lineDescriptionParameter = lineDescription != null ?
                new ObjectParameter("LineDescription", lineDescription) :
                new ObjectParameter("LineDescription", typeof(string));
    
            var pOLinestatusParameter = pOLinestatus != null ?
                new ObjectParameter("POLinestatus", pOLinestatus) :
                new ObjectParameter("POLinestatus", typeof(string));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var transactionstringParameter = transactionstring != null ?
                new ObjectParameter("Transactionstring", transactionstring) :
                new ObjectParameter("Transactionstring", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var thirdPartyVendorParameter = thirdPartyVendor != null ?
                new ObjectParameter("ThirdPartyVendor", thirdPartyVendor) :
                new ObjectParameter("ThirdPartyVendor", typeof(string));
    
            var setIDParameter = setID.HasValue ?
                new ObjectParameter("SetID", setID) :
                new ObjectParameter("SetID", typeof(int));
    
            var seriesIDParameter = seriesID.HasValue ?
                new ObjectParameter("SeriesID", seriesID) :
                new ObjectParameter("SeriesID", typeof(int));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SaveUpdatePurchaseOrderLine", pOLineIdParameter, pOIDParameter, cOAIDParameter, amountParameter, manualAdjustmentParameter, clearedAmountParameter, adjustMentTotalParameter, relievedTotalParameter, availToRelieveParameter, displayAmountParameter, lineDescriptionParameter, pOLinestatusParameter, cOAStringParameter, transactionstringParameter, createdByParameter, prodIDParameter, thirdPartyVendorParameter, setIDParameter, seriesIDParameter, taxCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SaveVoidData(Nullable<int> paymentID, string isReissueInv, string batchNumber, Nullable<int> prodID, Nullable<int> userID, string status)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var isReissueInvParameter = isReissueInv != null ?
                new ObjectParameter("IsReissueInv", isReissueInv) :
                new ObjectParameter("IsReissueInv", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SaveVoidData", paymentIDParameter, isReissueInvParameter, batchNumberParameter, prodIDParameter, userIDParameter, statusParameter);
        }
    
        public virtual int SingleActionCOA(Nullable<int> accountid)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("Accountid", accountid) :
                new ObjectParameter("Accountid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SingleActionCOA", accountidParameter);
        }
    
        public virtual ObjectResult<spTimeZone_Result> spTimeZone(Nullable<int> prodID, string timeZone, string timeDifference, Nullable<int> mode)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var timeDifferenceParameter = timeDifference != null ?
                new ObjectParameter("TimeDifference", timeDifference) :
                new ObjectParameter("TimeDifference", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTimeZone_Result>("spTimeZone", prodIDParameter, timeZoneParameter, timeDifferenceParameter, modeParameter);
        }
    
        public virtual ObjectResult<TBReportComExpense_Result> TBReportComExpense(Nullable<int> companyid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> prodId)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TBReportComExpense_Result>("TBReportComExpense", companyidParameter, fromDateParameter, toDateParameter, prodIdParameter);
        }
    
        public virtual int TransFieldStatusChange(Nullable<int> transactionCodeID, Nullable<bool> status)
        {
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransFieldStatusChange", transactionCodeIDParameter, statusParameter);
        }
    
        public virtual int TransValueStatusChange(Nullable<int> transactionValueID, Nullable<bool> status)
        {
            var transactionValueIDParameter = transactionValueID.HasValue ?
                new ObjectParameter("TransactionValueID", transactionValueID) :
                new ObjectParameter("TransactionValueID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransValueStatusChange", transactionValueIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<string> UpdateBatchNumber(string batchNumber, Nullable<int> userId, Nullable<int> prodId)
        {
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateBatchNumber", batchNumberParameter, userIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<UpdateBlankEFC_Result> UpdateBlankEFC(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, string changes, Nullable<int> cOAID, string modeType)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var changesParameter = changes != null ?
                new ObjectParameter("Changes", changes) :
                new ObjectParameter("Changes", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var modeTypeParameter = modeType != null ?
                new ObjectParameter("ModeType", modeType) :
                new ObjectParameter("ModeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateBlankEFC_Result>("UpdateBlankEFC", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, changesParameter, cOAIDParameter, modeTypeParameter);
        }
    
        public virtual ObjectResult<string> UpdateBudgetAccount(Nullable<int> budgetAccountID, string parameter, Nullable<int> modifyBy, Nullable<int> mode)
        {
            var budgetAccountIDParameter = budgetAccountID.HasValue ?
                new ObjectParameter("BudgetAccountID", budgetAccountID) :
                new ObjectParameter("BudgetAccountID", typeof(int));
    
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            var modifyByParameter = modifyBy.HasValue ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateBudgetAccount", budgetAccountIDParameter, parameterParameter, modifyByParameter, modeParameter);
        }
    
        public virtual ObjectResult<string> UpdateBudgetCategory(Nullable<int> budgetCategoryID, string parameter, Nullable<int> modifyBy, Nullable<int> mode)
        {
            var budgetCategoryIDParameter = budgetCategoryID.HasValue ?
                new ObjectParameter("BudgetCategoryID", budgetCategoryID) :
                new ObjectParameter("BudgetCategoryID", typeof(int));
    
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            var modifyByParameter = modifyBy.HasValue ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateBudgetCategory", budgetCategoryIDParameter, parameterParameter, modifyByParameter, modeParameter);
        }
    
        public virtual int UpdateCOADescriptionById(Nullable<int> cOAId, string description)
        {
            var cOAIdParameter = cOAId.HasValue ?
                new ObjectParameter("COAId", cOAId) :
                new ObjectParameter("COAId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCOADescriptionById", cOAIdParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<UpdateCodeMaskingAccount_Result> UpdateCodeMaskingAccount(Nullable<int> budgetFileID, string accountNumber, Nullable<int> budgetAccountID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var budgetAccountIDParameter = budgetAccountID.HasValue ?
                new ObjectParameter("BudgetAccountID", budgetAccountID) :
                new ObjectParameter("BudgetAccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCodeMaskingAccount_Result>("UpdateCodeMaskingAccount", budgetFileIDParameter, accountNumberParameter, budgetAccountIDParameter);
        }
    
        public virtual ObjectResult<UpdateCodeMaskingCategory_Result> UpdateCodeMaskingCategory(Nullable<int> budgetFileID, string categoryNumber, Nullable<int> budgetCategoryID)
        {
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var categoryNumberParameter = categoryNumber != null ?
                new ObjectParameter("CategoryNumber", categoryNumber) :
                new ObjectParameter("CategoryNumber", typeof(string));
    
            var budgetCategoryIDParameter = budgetCategoryID.HasValue ?
                new ObjectParameter("BudgetCategoryID", budgetCategoryID) :
                new ObjectParameter("BudgetCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCodeMaskingCategory_Result>("UpdateCodeMaskingCategory", budgetFileIDParameter, categoryNumberParameter, budgetCategoryIDParameter);
        }
    
        public virtual ObjectResult<UpdateCRWBudget_Result> UpdateCRWBudget(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, Nullable<int> cOAID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCRWBudget_Result>("UpdateCRWBudget", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, cOAIDParameter);
        }
    
        public virtual ObjectResult<UpdateCRWBudgetBlank_Result> UpdateCRWBudgetBlank(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, Nullable<int> cOAID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCRWBudgetBlank_Result>("UpdateCRWBudgetBlank", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, cOAIDParameter);
        }
    
        public virtual ObjectResult<UpdateCRWEFC_Result> UpdateCRWEFC(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, string changes, Nullable<int> cOAID, string modeType)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var changesParameter = changes != null ?
                new ObjectParameter("Changes", changes) :
                new ObjectParameter("Changes", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var modeTypeParameter = modeType != null ?
                new ObjectParameter("ModeType", modeType) :
                new ObjectParameter("ModeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCRWEFC_Result>("UpdateCRWEFC", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, changesParameter, cOAIDParameter, modeTypeParameter);
        }
    
        public virtual ObjectResult<UpdateCRWETC_Result> UpdateCRWETC(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, string changes, Nullable<int> cOAID, string modeType)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var changesParameter = changes != null ?
                new ObjectParameter("Changes", changes) :
                new ObjectParameter("Changes", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var modeTypeParameter = modeType != null ?
                new ObjectParameter("ModeType", modeType) :
                new ObjectParameter("ModeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCRWETC_Result>("UpdateCRWETC", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, changesParameter, cOAIDParameter, modeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateCRWNotes(Nullable<int> cRWNotesID, string status)
        {
            var cRWNotesIDParameter = cRWNotesID.HasValue ?
                new ObjectParameter("CRWNotesID", cRWNotesID) :
                new ObjectParameter("CRWNotesID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateCRWNotes", cRWNotesIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<UpdateCRWSetBudget_Result> UpdateCRWSetBudget(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, Nullable<int> cOAID, Nullable<int> setID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var setIDParameter = setID.HasValue ?
                new ObjectParameter("SetID", setID) :
                new ObjectParameter("SetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCRWSetBudget_Result>("UpdateCRWSetBudget", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, cOAIDParameter, setIDParameter);
        }
    
        public virtual ObjectResult<UpdateCRWSetEFC_Result> UpdateCRWSetEFC(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, string changes, Nullable<int> cOAID, Nullable<int> setID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var changesParameter = changes != null ?
                new ObjectParameter("Changes", changes) :
                new ObjectParameter("Changes", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var setIDParameter = setID.HasValue ?
                new ObjectParameter("SetID", setID) :
                new ObjectParameter("SetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCRWSetEFC_Result>("UpdateCRWSetEFC", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, changesParameter, cOAIDParameter, setIDParameter);
        }
    
        public virtual ObjectResult<UpdateCRWSetETC_Result> UpdateCRWSetETC(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> detailLevel, string saveValue, string changes, Nullable<int> cOAID, Nullable<int> setID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var detailLevelParameter = detailLevel.HasValue ?
                new ObjectParameter("DetailLevel", detailLevel) :
                new ObjectParameter("DetailLevel", typeof(int));
    
            var saveValueParameter = saveValue != null ?
                new ObjectParameter("SaveValue", saveValue) :
                new ObjectParameter("SaveValue", typeof(string));
    
            var changesParameter = changes != null ?
                new ObjectParameter("Changes", changes) :
                new ObjectParameter("Changes", typeof(string));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var setIDParameter = setID.HasValue ?
                new ObjectParameter("SetID", setID) :
                new ObjectParameter("SetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCRWSetETC_Result>("UpdateCRWSetETC", budgetIDParameter, budgetFileIDParameter, detailLevelParameter, saveValueParameter, changesParameter, cOAIDParameter, setIDParameter);
        }
    
        public virtual ObjectResult<UpdateInvoiceStatus_Result> UpdateInvoiceStatus(Nullable<int> invoiceId, Nullable<int> createdBy, Nullable<int> prodId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateInvoiceStatus_Result>("UpdateInvoiceStatus", invoiceIdParameter, createdByParameter, prodIdParameter);
        }
    
        public virtual int UpdateJEDDetailByType(string type, Nullable<int> jEDId, string transactionString)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var jEDIdParameter = jEDId.HasValue ?
                new ObjectParameter("JEDId", jEDId) :
                new ObjectParameter("JEDId", typeof(int));
    
            var transactionStringParameter = transactionString != null ?
                new ObjectParameter("TransactionString", transactionString) :
                new ObjectParameter("TransactionString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateJEDDetailByType", typeParameter, jEDIdParameter, transactionStringParameter);
        }
    
        public virtual int UpdateJournalEntryForLines(Nullable<int> journalEntryId)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("JournalEntryId", journalEntryId) :
                new ObjectParameter("JournalEntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateJournalEntryForLines", journalEntryIdParameter);
        }
    
        public virtual ObjectResult<UpdateJournalEntryStatusById_Result> UpdateJournalEntryStatusById(string jEId)
        {
            var jEIdParameter = jEId != null ?
                new ObjectParameter("JEId", jEId) :
                new ObjectParameter("JEId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateJournalEntryStatusById_Result>("UpdateJournalEntryStatusById", jEIdParameter);
        }
    
        public virtual int UpdatePaymentStatus(string status, string paymentId, Nullable<int> prodId)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var paymentIdParameter = paymentId != null ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePaymentStatus", statusParameter, paymentIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<string> UpdatePCEnvelopeClosePeriod(Nullable<int> pCEnvelopeId, Nullable<int> closePeriodId, Nullable<int> prodid)
        {
            var pCEnvelopeIdParameter = pCEnvelopeId.HasValue ?
                new ObjectParameter("PCEnvelopeId", pCEnvelopeId) :
                new ObjectParameter("PCEnvelopeId", typeof(int));
    
            var closePeriodIdParameter = closePeriodId.HasValue ?
                new ObjectParameter("ClosePeriodId", closePeriodId) :
                new ObjectParameter("ClosePeriodId", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("Prodid", prodid) :
                new ObjectParameter("Prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdatePCEnvelopeClosePeriod", pCEnvelopeIdParameter, closePeriodIdParameter, prodidParameter);
        }
    
        public virtual ObjectResult<updatePCEnvelopeStatus_Result> updatePCEnvelopeStatus(string pCEnvelopId)
        {
            var pCEnvelopIdParameter = pCEnvelopId != null ?
                new ObjectParameter("PCEnvelopId", pCEnvelopId) :
                new ObjectParameter("PCEnvelopId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<updatePCEnvelopeStatus_Result>("updatePCEnvelopeStatus", pCEnvelopIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdatePO(Nullable<int> pOID, string pONumber, Nullable<int> companyID, Nullable<int> vendorID, string vendorName, Nullable<bool> thirdParty, string workRegion, string description, Nullable<decimal> originalAmount, Nullable<decimal> adjustmentTotal, Nullable<decimal> relievedTotal, Nullable<decimal> balanceAmount, string batchNumber, Nullable<bool> closePOuponPayment, string payby, string status, Nullable<int> createdBy, Nullable<int> prodID, Nullable<System.DateTime> pODate, Nullable<int> closePeriodId)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var thirdPartyParameter = thirdParty.HasValue ?
                new ObjectParameter("ThirdParty", thirdParty) :
                new ObjectParameter("ThirdParty", typeof(bool));
    
            var workRegionParameter = workRegion != null ?
                new ObjectParameter("WorkRegion", workRegion) :
                new ObjectParameter("WorkRegion", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var adjustmentTotalParameter = adjustmentTotal.HasValue ?
                new ObjectParameter("AdjustmentTotal", adjustmentTotal) :
                new ObjectParameter("AdjustmentTotal", typeof(decimal));
    
            var relievedTotalParameter = relievedTotal.HasValue ?
                new ObjectParameter("RelievedTotal", relievedTotal) :
                new ObjectParameter("RelievedTotal", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var closePOuponPaymentParameter = closePOuponPayment.HasValue ?
                new ObjectParameter("ClosePOuponPayment", closePOuponPayment) :
                new ObjectParameter("ClosePOuponPayment", typeof(bool));
    
            var paybyParameter = payby != null ?
                new ObjectParameter("Payby", payby) :
                new ObjectParameter("Payby", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var closePeriodIdParameter = closePeriodId.HasValue ?
                new ObjectParameter("ClosePeriodId", closePeriodId) :
                new ObjectParameter("ClosePeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdatePO", pOIDParameter, pONumberParameter, companyIDParameter, vendorIDParameter, vendorNameParameter, thirdPartyParameter, workRegionParameter, descriptionParameter, originalAmountParameter, adjustmentTotalParameter, relievedTotalParameter, balanceAmountParameter, batchNumberParameter, closePOuponPaymentParameter, paybyParameter, statusParameter, createdByParameter, prodIDParameter, pODateParameter, closePeriodIdParameter);
        }
    
        public virtual int UpdatePOStatus(string invoiceId)
        {
            var invoiceIdParameter = invoiceId != null ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePOStatus", invoiceIdParameter);
        }
    
        public virtual int UpdatePOStatusClose(Nullable<int> pOId, Nullable<int> prodId, string status)
        {
            var pOIdParameter = pOId.HasValue ?
                new ObjectParameter("POId", pOId) :
                new ObjectParameter("POId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("prodId", prodId) :
                new ObjectParameter("prodId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePOStatusClose", pOIdParameter, prodIdParameter, statusParameter);
        }
    
        public virtual int UpdateSegmentAdmin(string segmentCode, string segmentName, string segmentReportDescription, string codeLength, Nullable<bool> detailFlag, Nullable<int> prodId, Nullable<int> createdBy, Nullable<int> segmentLevel, string classification, string subAccount1, string subAccount2, string subAccount3, string subAccount4, string subAccount5, string subAccount6)
        {
            var segmentCodeParameter = segmentCode != null ?
                new ObjectParameter("SegmentCode", segmentCode) :
                new ObjectParameter("SegmentCode", typeof(string));
    
            var segmentNameParameter = segmentName != null ?
                new ObjectParameter("SegmentName", segmentName) :
                new ObjectParameter("SegmentName", typeof(string));
    
            var segmentReportDescriptionParameter = segmentReportDescription != null ?
                new ObjectParameter("SegmentReportDescription", segmentReportDescription) :
                new ObjectParameter("SegmentReportDescription", typeof(string));
    
            var codeLengthParameter = codeLength != null ?
                new ObjectParameter("CodeLength", codeLength) :
                new ObjectParameter("CodeLength", typeof(string));
    
            var detailFlagParameter = detailFlag.HasValue ?
                new ObjectParameter("DetailFlag", detailFlag) :
                new ObjectParameter("DetailFlag", typeof(bool));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var segmentLevelParameter = segmentLevel.HasValue ?
                new ObjectParameter("SegmentLevel", segmentLevel) :
                new ObjectParameter("SegmentLevel", typeof(int));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            var subAccount1Parameter = subAccount1 != null ?
                new ObjectParameter("SubAccount1", subAccount1) :
                new ObjectParameter("SubAccount1", typeof(string));
    
            var subAccount2Parameter = subAccount2 != null ?
                new ObjectParameter("SubAccount2", subAccount2) :
                new ObjectParameter("SubAccount2", typeof(string));
    
            var subAccount3Parameter = subAccount3 != null ?
                new ObjectParameter("SubAccount3", subAccount3) :
                new ObjectParameter("SubAccount3", typeof(string));
    
            var subAccount4Parameter = subAccount4 != null ?
                new ObjectParameter("SubAccount4", subAccount4) :
                new ObjectParameter("SubAccount4", typeof(string));
    
            var subAccount5Parameter = subAccount5 != null ?
                new ObjectParameter("SubAccount5", subAccount5) :
                new ObjectParameter("SubAccount5", typeof(string));
    
            var subAccount6Parameter = subAccount6 != null ?
                new ObjectParameter("SubAccount6", subAccount6) :
                new ObjectParameter("SubAccount6", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSegmentAdmin", segmentCodeParameter, segmentNameParameter, segmentReportDescriptionParameter, codeLengthParameter, detailFlagParameter, prodIdParameter, createdByParameter, segmentLevelParameter, classificationParameter, subAccount1Parameter, subAccount2Parameter, subAccount3Parameter, subAccount4Parameter, subAccount5Parameter, subAccount6Parameter);
        }
    
        public virtual int UpdateTransactionCode(Nullable<int> transactionCodeID, string transCode, string description, Nullable<bool> status, Nullable<int> modifyBy)
        {
            var transactionCodeIDParameter = transactionCodeID.HasValue ?
                new ObjectParameter("TransactionCodeID", transactionCodeID) :
                new ObjectParameter("TransactionCodeID", typeof(int));
    
            var transCodeParameter = transCode != null ?
                new ObjectParameter("TransCode", transCode) :
                new ObjectParameter("TransCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var modifyByParameter = modifyBy.HasValue ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransactionCode", transactionCodeIDParameter, transCodeParameter, descriptionParameter, statusParameter, modifyByParameter);
        }
    
        public virtual int UpdateTransactionValue(Nullable<int> transactionValueID, string transValue, string description, Nullable<bool> status, Nullable<int> modifiedBy)
        {
            var transactionValueIDParameter = transactionValueID.HasValue ?
                new ObjectParameter("TransactionValueID", transactionValueID) :
                new ObjectParameter("TransactionValueID", typeof(int));
    
            var transValueParameter = transValue != null ?
                new ObjectParameter("TransValue", transValue) :
                new ObjectParameter("TransValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransactionValue", transactionValueIDParameter, transValueParameter, descriptionParameter, statusParameter, modifiedByParameter);
        }
    
        public virtual int UpdateUserStatus(Nullable<int> userId, Nullable<bool> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserStatus", userIdParameter, statusParameter);
        }
    
        public virtual int UpdateUserStatusAdmin(Nullable<int> userId, Nullable<bool> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserStatusAdmin", userIdParameter, statusParameter);
        }
    
        public virtual int UpdateVarianceInfo(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> cOAID, Nullable<int> userID, Nullable<int> prodID, Nullable<decimal> amountOld, Nullable<decimal> amountNew)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var amountOldParameter = amountOld.HasValue ?
                new ObjectParameter("AmountOld", amountOld) :
                new ObjectParameter("AmountOld", typeof(decimal));
    
            var amountNewParameter = amountNew.HasValue ?
                new ObjectParameter("AmountNew", amountNew) :
                new ObjectParameter("AmountNew", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVarianceInfo", budgetIDParameter, budgetFileIDParameter, cOAIDParameter, userIDParameter, prodIDParameter, amountOldParameter, amountNewParameter);
        }
    
        public virtual ObjectResult<VendorDetailsByName_Result> VendorDetailsByName(Nullable<int> prodID, string vendorFrom, string vendorTo, string companyCode, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string vendorType, string vendorCountry, string vendorState, string defaultDropdown, Nullable<bool> w9OnFile, Nullable<bool> w9NotOnFile, Nullable<int> userID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorFromParameter = vendorFrom != null ?
                new ObjectParameter("VendorFrom", vendorFrom) :
                new ObjectParameter("VendorFrom", typeof(string));
    
            var vendorToParameter = vendorTo != null ?
                new ObjectParameter("VendorTo", vendorTo) :
                new ObjectParameter("VendorTo", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("createdDateFrom", createdDateFrom) :
                new ObjectParameter("createdDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(string));
    
            var vendorCountryParameter = vendorCountry != null ?
                new ObjectParameter("VendorCountry", vendorCountry) :
                new ObjectParameter("VendorCountry", typeof(string));
    
            var vendorStateParameter = vendorState != null ?
                new ObjectParameter("VendorState", vendorState) :
                new ObjectParameter("VendorState", typeof(string));
    
            var defaultDropdownParameter = defaultDropdown != null ?
                new ObjectParameter("DefaultDropdown", defaultDropdown) :
                new ObjectParameter("DefaultDropdown", typeof(string));
    
            var w9OnFileParameter = w9OnFile.HasValue ?
                new ObjectParameter("W9OnFile", w9OnFile) :
                new ObjectParameter("W9OnFile", typeof(bool));
    
            var w9NotOnFileParameter = w9NotOnFile.HasValue ?
                new ObjectParameter("W9NotOnFile", w9NotOnFile) :
                new ObjectParameter("W9NotOnFile", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorDetailsByName_Result>("VendorDetailsByName", prodIDParameter, vendorFromParameter, vendorToParameter, companyCodeParameter, createdDateFromParameter, createdDateToParameter, vendorTypeParameter, vendorCountryParameter, vendorStateParameter, defaultDropdownParameter, w9OnFileParameter, w9NotOnFileParameter, userIDParameter);
        }
    
        public virtual ObjectResult<VendorInquiryReport_Result> VendorInquiryReport(Nullable<int> prodID, string vendorFrom, string vendorTo, string companyCode, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string vendorType, string vendorCountry, string vendorState, string defaultDropdown, Nullable<bool> w9OnFile, Nullable<bool> w9NotOnFile)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorFromParameter = vendorFrom != null ?
                new ObjectParameter("VendorFrom", vendorFrom) :
                new ObjectParameter("VendorFrom", typeof(string));
    
            var vendorToParameter = vendorTo != null ?
                new ObjectParameter("VendorTo", vendorTo) :
                new ObjectParameter("VendorTo", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("createdDateFrom", createdDateFrom) :
                new ObjectParameter("createdDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(string));
    
            var vendorCountryParameter = vendorCountry != null ?
                new ObjectParameter("VendorCountry", vendorCountry) :
                new ObjectParameter("VendorCountry", typeof(string));
    
            var vendorStateParameter = vendorState != null ?
                new ObjectParameter("VendorState", vendorState) :
                new ObjectParameter("VendorState", typeof(string));
    
            var defaultDropdownParameter = defaultDropdown != null ?
                new ObjectParameter("DefaultDropdown", defaultDropdown) :
                new ObjectParameter("DefaultDropdown", typeof(string));
    
            var w9OnFileParameter = w9OnFile.HasValue ?
                new ObjectParameter("W9OnFile", w9OnFile) :
                new ObjectParameter("W9OnFile", typeof(bool));
    
            var w9NotOnFileParameter = w9NotOnFile.HasValue ?
                new ObjectParameter("W9NotOnFile", w9NotOnFile) :
                new ObjectParameter("W9NotOnFile", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorInquiryReport_Result>("VendorInquiryReport", prodIDParameter, vendorFromParameter, vendorToParameter, companyCodeParameter, createdDateFromParameter, createdDateToParameter, vendorTypeParameter, vendorCountryParameter, vendorStateParameter, defaultDropdownParameter, w9OnFileParameter, w9NotOnFileParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> VerifiedCheckEntry(Nullable<int> paymentID, Nullable<int> mode, Nullable<int> prodID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("VerifiedCheckEntry", paymentIDParameter, modeParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<SettingsTaxCodeGet_Result> SettingsTaxCodeGet(Nullable<int> prodId, Nullable<int> taxCodeId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var taxCodeIdParameter = taxCodeId.HasValue ?
                new ObjectParameter("TaxCodeId", taxCodeId) :
                new ObjectParameter("TaxCodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SettingsTaxCodeGet_Result>("SettingsTaxCodeGet", prodIdParameter, taxCodeIdParameter);
        }
    
        public virtual ObjectResult<SettingsTaxCodesUpsert_Result> SettingsTaxCodesUpsert(Nullable<int> taxID, string taxCode, string taxDescription, Nullable<bool> active, Nullable<int> createdby, Nullable<int> modifiedby, Nullable<int> prodId)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var taxDescriptionParameter = taxDescription != null ?
                new ObjectParameter("TaxDescription", taxDescription) :
                new ObjectParameter("TaxDescription", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("Modifiedby", modifiedby) :
                new ObjectParameter("Modifiedby", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SettingsTaxCodesUpsert_Result>("SettingsTaxCodesUpsert", taxIDParameter, taxCodeParameter, taxDescriptionParameter, activeParameter, createdbyParameter, modifiedbyParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<APInvoicesPostedList_Result> APInvoicesPostedList(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APInvoicesPostedList_Result>("APInvoicesPostedList", prodIdParameter);
        }
    
        public virtual ObjectResult<APCheckCycleVoidUnissued_Result> APCheckCycleVoidUnissued(Nullable<int> bankID, Nullable<int> startvoid, Nullable<int> endvoid, Nullable<int> userID, string batchNumber, Nullable<int> prodID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var startvoidParameter = startvoid.HasValue ?
                new ObjectParameter("startvoid", startvoid) :
                new ObjectParameter("startvoid", typeof(int));
    
            var endvoidParameter = endvoid.HasValue ?
                new ObjectParameter("endvoid", endvoid) :
                new ObjectParameter("endvoid", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APCheckCycleVoidUnissued_Result>("APCheckCycleVoidUnissued", bankIDParameter, startvoidParameter, endvoidParameter, userIDParameter, batchNumberParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<CheckRegisterFilter1_Result> CheckRegisterFilter1(string companyID, Nullable<int> prodID, string bankID, string vendorID, Nullable<int> checkFrom, Nullable<int> checkTo, string checkType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var checkFromParameter = checkFrom.HasValue ?
                new ObjectParameter("CheckFrom", checkFrom) :
                new ObjectParameter("CheckFrom", typeof(int));
    
            var checkToParameter = checkTo.HasValue ?
                new ObjectParameter("CheckTo", checkTo) :
                new ObjectParameter("CheckTo", typeof(int));
    
            var checkTypeParameter = checkType != null ?
                new ObjectParameter("CheckType", checkType) :
                new ObjectParameter("CheckType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckRegisterFilter1_Result>("CheckRegisterFilter1", companyIDParameter, prodIDParameter, bankIDParameter, vendorIDParameter, checkFromParameter, checkToParameter, checkTypeParameter);
        }
    
        public virtual ObjectResult<GetDataForCheckReport1_Result> GetDataForCheckReport1(Nullable<int> checkRunID)
        {
            var checkRunIDParameter = checkRunID.HasValue ?
                new ObjectParameter("CheckRunID", checkRunID) :
                new ObjectParameter("CheckRunID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataForCheckReport1_Result>("GetDataForCheckReport1", checkRunIDParameter);
        }
    
        public virtual ObjectResult<string> APVendorsCheckExisting(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("APVendorsCheckExisting", jSONparametersParameter);
        }
    
        public virtual ObjectResult<GetVendorAddPO_Result> GetVendorAddPO(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorAddPO_Result>("GetVendorAddPO", prodIDParameter);
        }
    
        public virtual ObjectResult<GetVendorAddress_Result> GetVendorAddress(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorAddress_Result>("GetVendorAddress", vendorIDParameter);
        }
    
        public virtual ObjectResult<GetVendorDetailByVendorID_Result> GetVendorDetailByVendorID(Nullable<int> vendorID, Nullable<int> prodID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorDetailByVendorID_Result>("GetVendorDetailByVendorID", vendorIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetVendorInfoByVendorId_Result> GetVendorInfoByVendorId(Nullable<int> vendorID, Nullable<int> prodID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorInfoByVendorId_Result>("GetVendorInfoByVendorId", vendorIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetVendorListForCustodian_Result> GetVendorListForCustodian(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorListForCustodian_Result>("GetVendorListForCustodian", prodIdParameter);
        }
    
        public virtual ObjectResult<GetVendorMailingLabels_Result> GetVendorMailingLabels(Nullable<int> prodID, string vendorFrom, string vendorTo, string companyCode, Nullable<System.DateTime> createdDateFrom, Nullable<System.DateTime> createdDateTo, string vendorType, string vendorCountry, string vendorState, Nullable<bool> w9OnFile, Nullable<bool> w9NotOnFile, Nullable<int> userID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var vendorFromParameter = vendorFrom != null ?
                new ObjectParameter("VendorFrom", vendorFrom) :
                new ObjectParameter("VendorFrom", typeof(string));
    
            var vendorToParameter = vendorTo != null ?
                new ObjectParameter("VendorTo", vendorTo) :
                new ObjectParameter("VendorTo", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdDateFromParameter = createdDateFrom.HasValue ?
                new ObjectParameter("createdDateFrom", createdDateFrom) :
                new ObjectParameter("createdDateFrom", typeof(System.DateTime));
    
            var createdDateToParameter = createdDateTo.HasValue ?
                new ObjectParameter("CreatedDateTo", createdDateTo) :
                new ObjectParameter("CreatedDateTo", typeof(System.DateTime));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(string));
    
            var vendorCountryParameter = vendorCountry != null ?
                new ObjectParameter("VendorCountry", vendorCountry) :
                new ObjectParameter("VendorCountry", typeof(string));
    
            var vendorStateParameter = vendorState != null ?
                new ObjectParameter("VendorState", vendorState) :
                new ObjectParameter("VendorState", typeof(string));
    
            var w9OnFileParameter = w9OnFile.HasValue ?
                new ObjectParameter("W9OnFile", w9OnFile) :
                new ObjectParameter("W9OnFile", typeof(bool));
    
            var w9NotOnFileParameter = w9NotOnFile.HasValue ?
                new ObjectParameter("W9NotOnFile", w9NotOnFile) :
                new ObjectParameter("W9NotOnFile", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorMailingLabels_Result>("GetVendorMailingLabels", prodIDParameter, vendorFromParameter, vendorToParameter, companyCodeParameter, createdDateFromParameter, createdDateToParameter, vendorTypeParameter, vendorCountryParameter, vendorStateParameter, w9OnFileParameter, w9NotOnFileParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUpdateVendor(Nullable<int> vendorID, string vendorNumber, string vendorName, string firstName, string middleName, string lastName, string printOncheckAS, string w9Country, string w9Address1, string w9Address2, string w9Address3, string w9City, string w9State, string w9Zip, string remitCountry, string remitAddress1, string remitAddress2, string remitAddress3, string remitCity, string remitState, string remitZip, Nullable<bool> useRemmitAddrs, string qualified, string currency, string defaultAccount, string ledgerAccount, string taxID, string type, Nullable<bool> taxFormOnFile, Nullable<System.DateTime> taxFormExpiry, string defaultForm, string taxName, string foreignTaxId, string paymentType, Nullable<int> duecount, string duetype, Nullable<decimal> netpercentage, string paymentAccount, Nullable<bool> required, string studioVendorNumber, Nullable<bool> isStudioApproved, Nullable<bool> status, Nullable<bool> warning, string defaultDropdown, Nullable<int> createdBy, Nullable<int> prodID, Nullable<int> cOAId, string cOAString, string transactionCodeString, Nullable<int> setId, Nullable<int> seriesId)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorNumberParameter = vendorNumber != null ?
                new ObjectParameter("VendorNumber", vendorNumber) :
                new ObjectParameter("VendorNumber", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var printOncheckASParameter = printOncheckAS != null ?
                new ObjectParameter("PrintOncheckAS", printOncheckAS) :
                new ObjectParameter("PrintOncheckAS", typeof(string));
    
            var w9CountryParameter = w9Country != null ?
                new ObjectParameter("W9Country", w9Country) :
                new ObjectParameter("W9Country", typeof(string));
    
            var w9Address1Parameter = w9Address1 != null ?
                new ObjectParameter("W9Address1", w9Address1) :
                new ObjectParameter("W9Address1", typeof(string));
    
            var w9Address2Parameter = w9Address2 != null ?
                new ObjectParameter("W9Address2", w9Address2) :
                new ObjectParameter("W9Address2", typeof(string));
    
            var w9Address3Parameter = w9Address3 != null ?
                new ObjectParameter("W9Address3", w9Address3) :
                new ObjectParameter("W9Address3", typeof(string));
    
            var w9CityParameter = w9City != null ?
                new ObjectParameter("W9City", w9City) :
                new ObjectParameter("W9City", typeof(string));
    
            var w9StateParameter = w9State != null ?
                new ObjectParameter("W9State", w9State) :
                new ObjectParameter("W9State", typeof(string));
    
            var w9ZipParameter = w9Zip != null ?
                new ObjectParameter("W9Zip", w9Zip) :
                new ObjectParameter("W9Zip", typeof(string));
    
            var remitCountryParameter = remitCountry != null ?
                new ObjectParameter("RemitCountry", remitCountry) :
                new ObjectParameter("RemitCountry", typeof(string));
    
            var remitAddress1Parameter = remitAddress1 != null ?
                new ObjectParameter("RemitAddress1", remitAddress1) :
                new ObjectParameter("RemitAddress1", typeof(string));
    
            var remitAddress2Parameter = remitAddress2 != null ?
                new ObjectParameter("RemitAddress2", remitAddress2) :
                new ObjectParameter("RemitAddress2", typeof(string));
    
            var remitAddress3Parameter = remitAddress3 != null ?
                new ObjectParameter("RemitAddress3", remitAddress3) :
                new ObjectParameter("RemitAddress3", typeof(string));
    
            var remitCityParameter = remitCity != null ?
                new ObjectParameter("RemitCity", remitCity) :
                new ObjectParameter("RemitCity", typeof(string));
    
            var remitStateParameter = remitState != null ?
                new ObjectParameter("RemitState", remitState) :
                new ObjectParameter("RemitState", typeof(string));
    
            var remitZipParameter = remitZip != null ?
                new ObjectParameter("RemitZip", remitZip) :
                new ObjectParameter("RemitZip", typeof(string));
    
            var useRemmitAddrsParameter = useRemmitAddrs.HasValue ?
                new ObjectParameter("UseRemmitAddrs", useRemmitAddrs) :
                new ObjectParameter("UseRemmitAddrs", typeof(bool));
    
            var qualifiedParameter = qualified != null ?
                new ObjectParameter("Qualified", qualified) :
                new ObjectParameter("Qualified", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var defaultAccountParameter = defaultAccount != null ?
                new ObjectParameter("DefaultAccount", defaultAccount) :
                new ObjectParameter("DefaultAccount", typeof(string));
    
            var ledgerAccountParameter = ledgerAccount != null ?
                new ObjectParameter("LedgerAccount", ledgerAccount) :
                new ObjectParameter("LedgerAccount", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var taxFormOnFileParameter = taxFormOnFile.HasValue ?
                new ObjectParameter("TaxFormOnFile", taxFormOnFile) :
                new ObjectParameter("TaxFormOnFile", typeof(bool));
    
            var taxFormExpiryParameter = taxFormExpiry.HasValue ?
                new ObjectParameter("TaxFormExpiry", taxFormExpiry) :
                new ObjectParameter("TaxFormExpiry", typeof(System.DateTime));
    
            var defaultFormParameter = defaultForm != null ?
                new ObjectParameter("DefaultForm", defaultForm) :
                new ObjectParameter("DefaultForm", typeof(string));
    
            var taxNameParameter = taxName != null ?
                new ObjectParameter("TaxName", taxName) :
                new ObjectParameter("TaxName", typeof(string));
    
            var foreignTaxIdParameter = foreignTaxId != null ?
                new ObjectParameter("ForeignTaxId", foreignTaxId) :
                new ObjectParameter("ForeignTaxId", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var duecountParameter = duecount.HasValue ?
                new ObjectParameter("Duecount", duecount) :
                new ObjectParameter("Duecount", typeof(int));
    
            var duetypeParameter = duetype != null ?
                new ObjectParameter("Duetype", duetype) :
                new ObjectParameter("Duetype", typeof(string));
    
            var netpercentageParameter = netpercentage.HasValue ?
                new ObjectParameter("netpercentage", netpercentage) :
                new ObjectParameter("netpercentage", typeof(decimal));
    
            var paymentAccountParameter = paymentAccount != null ?
                new ObjectParameter("PaymentAccount", paymentAccount) :
                new ObjectParameter("PaymentAccount", typeof(string));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("Required", required) :
                new ObjectParameter("Required", typeof(bool));
    
            var studioVendorNumberParameter = studioVendorNumber != null ?
                new ObjectParameter("StudioVendorNumber", studioVendorNumber) :
                new ObjectParameter("StudioVendorNumber", typeof(string));
    
            var isStudioApprovedParameter = isStudioApproved.HasValue ?
                new ObjectParameter("IsStudioApproved", isStudioApproved) :
                new ObjectParameter("IsStudioApproved", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var warningParameter = warning.HasValue ?
                new ObjectParameter("Warning", warning) :
                new ObjectParameter("Warning", typeof(bool));
    
            var defaultDropdownParameter = defaultDropdown != null ?
                new ObjectParameter("DefaultDropdown", defaultDropdown) :
                new ObjectParameter("DefaultDropdown", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var cOAIdParameter = cOAId.HasValue ?
                new ObjectParameter("COAId", cOAId) :
                new ObjectParameter("COAId", typeof(int));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var transactionCodeStringParameter = transactionCodeString != null ?
                new ObjectParameter("TransactionCodeString", transactionCodeString) :
                new ObjectParameter("TransactionCodeString", typeof(string));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            var seriesIdParameter = seriesId.HasValue ?
                new ObjectParameter("SeriesId", seriesId) :
                new ObjectParameter("SeriesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUpdateVendor", vendorIDParameter, vendorNumberParameter, vendorNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, printOncheckASParameter, w9CountryParameter, w9Address1Parameter, w9Address2Parameter, w9Address3Parameter, w9CityParameter, w9StateParameter, w9ZipParameter, remitCountryParameter, remitAddress1Parameter, remitAddress2Parameter, remitAddress3Parameter, remitCityParameter, remitStateParameter, remitZipParameter, useRemmitAddrsParameter, qualifiedParameter, currencyParameter, defaultAccountParameter, ledgerAccountParameter, taxIDParameter, typeParameter, taxFormOnFileParameter, taxFormExpiryParameter, defaultFormParameter, taxNameParameter, foreignTaxIdParameter, paymentTypeParameter, duecountParameter, duetypeParameter, netpercentageParameter, paymentAccountParameter, requiredParameter, studioVendorNumberParameter, isStudioApprovedParameter, statusParameter, warningParameter, defaultDropdownParameter, createdByParameter, prodIDParameter, cOAIdParameter, cOAStringParameter, transactionCodeStringParameter, setIdParameter, seriesIdParameter);
        }
    
        public virtual int InsertUpdateVendorInfo(Nullable<int> vendorInfoId, Nullable<int> vendorID, string contactInfoType, string vendorContInfo, Nullable<int> createdBy, Nullable<int> prodID)
        {
            var vendorInfoIdParameter = vendorInfoId.HasValue ?
                new ObjectParameter("vendorInfoId", vendorInfoId) :
                new ObjectParameter("vendorInfoId", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var contactInfoTypeParameter = contactInfoType != null ?
                new ObjectParameter("ContactInfoType", contactInfoType) :
                new ObjectParameter("ContactInfoType", typeof(string));
    
            var vendorContInfoParameter = vendorContInfo != null ?
                new ObjectParameter("VendorContInfo", vendorContInfo) :
                new ObjectParameter("VendorContInfo", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateVendorInfo", vendorInfoIdParameter, vendorIDParameter, contactInfoTypeParameter, vendorContInfoParameter, createdByParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBankInfoList_Result> GetBankInfoList(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankInfoList_Result>("GetBankInfoList", prodIdParameter);
        }
    
        public virtual ObjectResult<ReportsPOListingReportsJSON_Result> ReportsPOListingReportsJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsPOListingReportsJSON_Result>("ReportsPOListingReportsJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsBankingCheckRunRegisterJSON_Result> ReportsBankingCheckRunRegisterJSON(string reportParametersJson)
        {
            var reportParametersJsonParameter = reportParametersJson != null ?
                new ObjectParameter("reportParametersJson", reportParametersJson) :
                new ObjectParameter("reportParametersJson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsBankingCheckRunRegisterJSON_Result>("ReportsBankingCheckRunRegisterJSON", reportParametersJsonParameter);
        }
    
        public virtual ObjectResult<ReportsLedgerCOAJSON_Result> ReportsLedgerCOAJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsLedgerCOAJSON_Result>("ReportsLedgerCOAJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsLedgerInQuiryAccountJSON_Result> ReportsLedgerInQuiryAccountJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsLedgerInQuiryAccountJSON_Result>("ReportsLedgerInQuiryAccountJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<SettingBankAccounts_Result> SettingBankAccounts(Nullable<int> prodId, Nullable<int> accountType, Nullable<int> companyId, Nullable<int> bankid, string clearingType, Nullable<int> segmentPosition, string cOACode, string accountName)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("Bankid", bankid) :
                new ObjectParameter("Bankid", typeof(int));
    
            var clearingTypeParameter = clearingType != null ?
                new ObjectParameter("ClearingType", clearingType) :
                new ObjectParameter("ClearingType", typeof(string));
    
            var segmentPositionParameter = segmentPosition.HasValue ?
                new ObjectParameter("SegmentPosition", segmentPosition) :
                new ObjectParameter("SegmentPosition", typeof(int));
    
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SettingBankAccounts_Result>("SettingBankAccounts", prodIdParameter, accountTypeParameter, companyIdParameter, bankidParameter, clearingTypeParameter, segmentPositionParameter, cOACodeParameter, accountNameParameter);
        }
    
        public virtual ObjectResult<BankReconcilatinAction_Result> BankReconcilatinAction(Nullable<int> reconcilationID, Nullable<int> mode, Nullable<int> userID)
        {
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankReconcilatinAction_Result>("BankReconcilatinAction", reconcilationIDParameter, modeParameter, userIDParameter);
        }
    
        public virtual int ClearedCheck(Nullable<int> reconcilationID, Nullable<int> paymentID, Nullable<int> mode, Nullable<int> userID)
        {
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearedCheck", reconcilationIDParameter, paymentIDParameter, modeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GenerateBankReconcilation(Nullable<int> bankID, Nullable<int> userID, Nullable<int> prodID, Nullable<System.DateTime> statementDate, string statementEndingAmount)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var statementDateParameter = statementDate.HasValue ?
                new ObjectParameter("StatementDate", statementDate) :
                new ObjectParameter("StatementDate", typeof(System.DateTime));
    
            var statementEndingAmountParameter = statementEndingAmount != null ?
                new ObjectParameter("StatementEndingAmount", statementEndingAmount) :
                new ObjectParameter("StatementEndingAmount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GenerateBankReconcilation", bankIDParameter, userIDParameter, prodIDParameter, statementDateParameter, statementEndingAmountParameter);
        }
    
        public virtual ObjectResult<GetBankAdjustmentData_Result> GetBankAdjustmentData(Nullable<int> reconcilationID, Nullable<int> bankID, Nullable<int> prodID)
        {
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankAdjustmentData_Result>("GetBankAdjustmentData", reconcilationIDParameter, bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBankBalance_Result> GetBankBalance(Nullable<int> bankID, Nullable<int> prodID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankBalance_Result>("GetBankBalance", bankIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBankInfoDetails_Result> GetBankInfoDetails(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankInfoDetails_Result>("GetBankInfoDetails", prodIdParameter);
        }
    
        public virtual ObjectResult<GetBankReconcilation_Result> GetBankReconcilation(Nullable<int> bankID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankReconcilation_Result>("GetBankReconcilation", bankIDParameter);
        }
    
        public virtual int UpdateAdjustment(Nullable<int> adjustmentID, Nullable<System.DateTime> aDate, Nullable<double> amount, string description, Nullable<int> mode)
        {
            var adjustmentIDParameter = adjustmentID.HasValue ?
                new ObjectParameter("AdjustmentID", adjustmentID) :
                new ObjectParameter("AdjustmentID", typeof(int));
    
            var aDateParameter = aDate.HasValue ?
                new ObjectParameter("ADate", aDate) :
                new ObjectParameter("ADate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdjustment", adjustmentIDParameter, aDateParameter, amountParameter, descriptionParameter, modeParameter);
        }
    
        public virtual int UpdateCheckProperty(Nullable<int> reconcilationID, Nullable<int> mode, Nullable<int> value)
        {
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCheckProperty", reconcilationIDParameter, modeParameter, valueParameter);
        }
    
        public virtual ObjectResult<GetBankTransaction_Result> GetBankTransaction(Nullable<int> bankID, Nullable<int> reconcilationID, Nullable<int> prodID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankTransaction_Result>("GetBankTransaction", bankIDParameter, reconcilationIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<GetBankTransactionDisplayAll_Result> GetBankTransactionDisplayAll(Nullable<int> bankID, Nullable<int> reconcilationID, Nullable<int> prodID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankTransactionDisplayAll_Result>("GetBankTransactionDisplayAll", bankIDParameter, reconcilationIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Reconciliation_ClearedTransaction_Result> Reconciliation_ClearedTransaction(Nullable<int> reconcilationID, Nullable<int> jEID, string checkNumber, Nullable<bool> mode, Nullable<int> userID)
        {
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var jEIDParameter = jEID.HasValue ?
                new ObjectParameter("JEID", jEID) :
                new ObjectParameter("JEID", typeof(int));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Reconciliation_ClearedTransaction_Result>("Reconciliation_ClearedTransaction", reconcilationIDParameter, jEIDParameter, checkNumberParameter, modeParameter, userIDParameter);
        }
    
        public virtual int AdminAPIToolsLedgerJournal(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminAPIToolsLedgerJournal", jSONparametersParameter);
        }
    
        public virtual ObjectResult<GetCOAForClearingWithCOADiscription_Result> GetCOAForClearingWithCOADiscription(Nullable<int> prodId, Nullable<int> accountType, Nullable<int> companyId, Nullable<int> bankid, string clearingType, Nullable<int> segmentPosition, string cOACode, string accountName)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var bankidParameter = bankid.HasValue ?
                new ObjectParameter("Bankid", bankid) :
                new ObjectParameter("Bankid", typeof(int));
    
            var clearingTypeParameter = clearingType != null ?
                new ObjectParameter("ClearingType", clearingType) :
                new ObjectParameter("ClearingType", typeof(string));
    
            var segmentPositionParameter = segmentPosition.HasValue ?
                new ObjectParameter("SegmentPosition", segmentPosition) :
                new ObjectParameter("SegmentPosition", typeof(int));
    
            var cOACodeParameter = cOACode != null ?
                new ObjectParameter("COACode", cOACode) :
                new ObjectParameter("COACode", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCOAForClearingWithCOADiscription_Result>("GetCOAForClearingWithCOADiscription", prodIdParameter, accountTypeParameter, companyIdParameter, bankidParameter, clearingTypeParameter, segmentPositionParameter, cOACodeParameter, accountNameParameter);
        }
    
        public virtual ObjectResult<SettingBankAccountsJSON_Result> SettingBankAccountsJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SettingBankAccountsJSON_Result>("SettingBankAccountsJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<GetRecipientList_Result> GetRecipientList(Nullable<int> prodId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecipientList_Result>("GetRecipientList", prodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPCEnvelopeReverse(Nullable<int> pCEnvelopeId, string batchNumber, Nullable<int> createdBy, Nullable<int> prodID)
        {
            var pCEnvelopeIdParameter = pCEnvelopeId.HasValue ?
                new ObjectParameter("PCEnvelopeId", pCEnvelopeId) :
                new ObjectParameter("PCEnvelopeId", typeof(int));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("batchNumber", batchNumber) :
                new ObjectParameter("batchNumber", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPCEnvelopeReverse", pCEnvelopeIdParameter, batchNumberParameter, createdByParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<AtlasUtilities_Navigation_Result> AtlasUtilities_Navigation(Nullable<int> prodID, string configName)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AtlasUtilities_Navigation_Result>("AtlasUtilities_Navigation", prodIDParameter, configNameParameter);
        }
    
        public virtual ObjectResult<string> AtlasUtilities_SegmentsJSON(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AtlasUtilities_SegmentsJSON", prodIDParameter);
        }
    
        public virtual ObjectResult<Budgetv2GetHistory_Result> Budgetv2GetHistory(Nullable<int> budgetID, Nullable<int> prodID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Budgetv2GetHistory_Result>("Budgetv2GetHistory", budgetIDParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<Budgetv2List_Result> Budgetv2List(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Budgetv2List_Result>("Budgetv2List", prodIDParameter);
        }
    
        public virtual ObjectResult<Budgetv2Upsert_Result> Budgetv2Upsert(Nullable<int> budgetID, string budgetName, string budgetDescription, Nullable<int> budgetOrigin, string segmentJSON, Nullable<int> userID, Nullable<int> prodID, Nullable<bool> islocked, Nullable<bool> active)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetNameParameter = budgetName != null ?
                new ObjectParameter("BudgetName", budgetName) :
                new ObjectParameter("BudgetName", typeof(string));
    
            var budgetDescriptionParameter = budgetDescription != null ?
                new ObjectParameter("BudgetDescription", budgetDescription) :
                new ObjectParameter("BudgetDescription", typeof(string));
    
            var budgetOriginParameter = budgetOrigin.HasValue ?
                new ObjectParameter("BudgetOrigin", budgetOrigin) :
                new ObjectParameter("BudgetOrigin", typeof(int));
    
            var segmentJSONParameter = segmentJSON != null ?
                new ObjectParameter("segmentJSON", segmentJSON) :
                new ObjectParameter("segmentJSON", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("prodID", prodID) :
                new ObjectParameter("prodID", typeof(int));
    
            var islockedParameter = islocked.HasValue ?
                new ObjectParameter("islocked", islocked) :
                new ObjectParameter("islocked", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Budgetv2Upsert_Result>("Budgetv2Upsert", budgetIDParameter, budgetNameParameter, budgetDescriptionParameter, budgetOriginParameter, segmentJSONParameter, userIDParameter, prodIDParameter, islockedParameter, activeParameter);
        }
    
        public virtual ObjectResult<string> CRWv2GetCRWData(string jSONParameters)
        {
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CRWv2GetCRWData", jSONParametersParameter);
        }
    
        public virtual int LedgerSharedJSON(string pCompanyid, string pPeriodStatus, Nullable<int> pProdId, Nullable<System.DateTime> pEFDateFrom, Nullable<System.DateTime> pEFDateTo, string pBatch, string pCreatedBy, Nullable<int> pTrStart, Nullable<int> pTrend, string pDocumentNo, string pTT, string pVendorFrom, string pVendorTo, string pLocation, string pAccountFrom, string pAccountTo, string pSortExpr, string pJSON)
        {
            var pCompanyidParameter = pCompanyid != null ?
                new ObjectParameter("PCompanyid", pCompanyid) :
                new ObjectParameter("PCompanyid", typeof(string));
    
            var pPeriodStatusParameter = pPeriodStatus != null ?
                new ObjectParameter("PPeriodStatus", pPeriodStatus) :
                new ObjectParameter("PPeriodStatus", typeof(string));
    
            var pProdIdParameter = pProdId.HasValue ?
                new ObjectParameter("PProdId", pProdId) :
                new ObjectParameter("PProdId", typeof(int));
    
            var pEFDateFromParameter = pEFDateFrom.HasValue ?
                new ObjectParameter("PEFDateFrom", pEFDateFrom) :
                new ObjectParameter("PEFDateFrom", typeof(System.DateTime));
    
            var pEFDateToParameter = pEFDateTo.HasValue ?
                new ObjectParameter("PEFDateTo", pEFDateTo) :
                new ObjectParameter("PEFDateTo", typeof(System.DateTime));
    
            var pBatchParameter = pBatch != null ?
                new ObjectParameter("PBatch", pBatch) :
                new ObjectParameter("PBatch", typeof(string));
    
            var pCreatedByParameter = pCreatedBy != null ?
                new ObjectParameter("PCreatedBy", pCreatedBy) :
                new ObjectParameter("PCreatedBy", typeof(string));
    
            var pTrStartParameter = pTrStart.HasValue ?
                new ObjectParameter("PTrStart", pTrStart) :
                new ObjectParameter("PTrStart", typeof(int));
    
            var pTrendParameter = pTrend.HasValue ?
                new ObjectParameter("PTrend", pTrend) :
                new ObjectParameter("PTrend", typeof(int));
    
            var pDocumentNoParameter = pDocumentNo != null ?
                new ObjectParameter("PDocumentNo", pDocumentNo) :
                new ObjectParameter("PDocumentNo", typeof(string));
    
            var pTTParameter = pTT != null ?
                new ObjectParameter("PTT", pTT) :
                new ObjectParameter("PTT", typeof(string));
    
            var pVendorFromParameter = pVendorFrom != null ?
                new ObjectParameter("PVendorFrom", pVendorFrom) :
                new ObjectParameter("PVendorFrom", typeof(string));
    
            var pVendorToParameter = pVendorTo != null ?
                new ObjectParameter("PVendorTo", pVendorTo) :
                new ObjectParameter("PVendorTo", typeof(string));
    
            var pLocationParameter = pLocation != null ?
                new ObjectParameter("PLocation", pLocation) :
                new ObjectParameter("PLocation", typeof(string));
    
            var pAccountFromParameter = pAccountFrom != null ?
                new ObjectParameter("PAccountFrom", pAccountFrom) :
                new ObjectParameter("PAccountFrom", typeof(string));
    
            var pAccountToParameter = pAccountTo != null ?
                new ObjectParameter("PAccountTo", pAccountTo) :
                new ObjectParameter("PAccountTo", typeof(string));
    
            var pSortExprParameter = pSortExpr != null ?
                new ObjectParameter("PSortExpr", pSortExpr) :
                new ObjectParameter("PSortExpr", typeof(string));
    
            var pJSONParameter = pJSON != null ?
                new ObjectParameter("PJSON", pJSON) :
                new ObjectParameter("PJSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LedgerSharedJSON", pCompanyidParameter, pPeriodStatusParameter, pProdIdParameter, pEFDateFromParameter, pEFDateToParameter, pBatchParameter, pCreatedByParameter, pTrStartParameter, pTrendParameter, pDocumentNoParameter, pTTParameter, pVendorFromParameter, pVendorToParameter, pLocationParameter, pAccountFromParameter, pAccountToParameter, pSortExprParameter, pJSONParameter);
        }
    
        public virtual ObjectResult<ReportsBankingCheckRegisterSummaryJSON_Result> ReportsBankingCheckRegisterSummaryJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsBankingCheckRegisterSummaryJSON_Result>("ReportsBankingCheckRegisterSummaryJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsBankingCheckRunRegReportJSON_Result> ReportsBankingCheckRunRegReportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsBankingCheckRunRegReportJSON_Result>("ReportsBankingCheckRunRegReportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsCostReportJSON_Result> ReportsCostReportJSON(string jSONParameters)
        {
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsCostReportJSON_Result>("ReportsCostReportJSON", jSONParametersParameter);
        }
    
        public virtual ObjectResult<ReportsLedgerBibleJSON_Result> ReportsLedgerBibleJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsLedgerBibleJSON_Result>("ReportsLedgerBibleJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsLedgerJEPostingJSON_Result> ReportsLedgerJEPostingJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsLedgerJEPostingJSON_Result>("ReportsLedgerJEPostingJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsLedgerTBJSON_Result> ReportsLedgerTBJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsLedgerTBJSON_Result>("ReportsLedgerTBJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsPayrollFilterJSON_Result> ReportsPayrollFilterJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsPayrollFilterJSON_Result>("ReportsPayrollFilterJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsPettyCashFilterJSON_Result> ReportsPettyCashFilterJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsPettyCashFilterJSON_Result>("ReportsPettyCashFilterJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsPOAuditJSON_Result> ReportsPOAuditJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsPOAuditJSON_Result>("ReportsPOAuditJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsVendorDetailReportJSON_Result> ReportsVendorDetailReportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsVendorDetailReportJSON_Result>("ReportsVendorDetailReportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsVendorFolderReportJSON_Result> ReportsVendorFolderReportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsVendorFolderReportJSON_Result>("ReportsVendorFolderReportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsVendorListingReportJson_Result> ReportsVendorListingReportJson(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsVendorListingReportJson_Result>("ReportsVendorListingReportJson", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsVendorMailingReportJSON_Result> ReportsVendorMailingReportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsVendorMailingReportJSON_Result>("ReportsVendorMailingReportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<AtlasUtilities_Access_Result> AtlasUtilities_Access(Nullable<int> prodID, Nullable<int> userID, string hash)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AtlasUtilities_Access_Result>("AtlasUtilities_Access", prodIDParameter, userIDParameter, hashParameter);
        }
    
        public virtual ObjectResult<UpsertInvoiceLine_Result> UpsertInvoiceLine(Nullable<int> invoiceLineID, Nullable<int> invoiceID, Nullable<int> cOAID, Nullable<decimal> amount, string lineDescription, string invoiceLinestatus, string cOAString, string transactionstring, Nullable<int> polineid, Nullable<int> createdBy, Nullable<int> prodID, Nullable<int> paymentID, Nullable<int> setId, Nullable<int> seriesId, Nullable<bool> clearedFlag, string taxCode)
        {
            var invoiceLineIDParameter = invoiceLineID.HasValue ?
                new ObjectParameter("InvoiceLineID", invoiceLineID) :
                new ObjectParameter("InvoiceLineID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var lineDescriptionParameter = lineDescription != null ?
                new ObjectParameter("LineDescription", lineDescription) :
                new ObjectParameter("LineDescription", typeof(string));
    
            var invoiceLinestatusParameter = invoiceLinestatus != null ?
                new ObjectParameter("InvoiceLinestatus", invoiceLinestatus) :
                new ObjectParameter("InvoiceLinestatus", typeof(string));
    
            var cOAStringParameter = cOAString != null ?
                new ObjectParameter("COAString", cOAString) :
                new ObjectParameter("COAString", typeof(string));
    
            var transactionstringParameter = transactionstring != null ?
                new ObjectParameter("Transactionstring", transactionstring) :
                new ObjectParameter("Transactionstring", typeof(string));
    
            var polineidParameter = polineid.HasValue ?
                new ObjectParameter("Polineid", polineid) :
                new ObjectParameter("Polineid", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            var seriesIdParameter = seriesId.HasValue ?
                new ObjectParameter("SeriesId", seriesId) :
                new ObjectParameter("SeriesId", typeof(int));
    
            var clearedFlagParameter = clearedFlag.HasValue ?
                new ObjectParameter("ClearedFlag", clearedFlag) :
                new ObjectParameter("ClearedFlag", typeof(bool));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpsertInvoiceLine_Result>("UpsertInvoiceLine", invoiceLineIDParameter, invoiceIDParameter, cOAIDParameter, amountParameter, lineDescriptionParameter, invoiceLinestatusParameter, cOAStringParameter, transactionstringParameter, polineidParameter, createdByParameter, prodIDParameter, paymentIDParameter, setIdParameter, seriesIdParameter, clearedFlagParameter, taxCodeParameter);
        }
    
        public virtual ObjectResult<v2CRW_Save_Result> v2CRW_Save(Nullable<int> budgetID, Nullable<int> userID, Nullable<bool> isSave, Nullable<int> prodID, string cRWJSON)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isSaveParameter = isSave.HasValue ?
                new ObjectParameter("isSave", isSave) :
                new ObjectParameter("isSave", typeof(bool));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var cRWJSONParameter = cRWJSON != null ?
                new ObjectParameter("CRWJSON", cRWJSON) :
                new ObjectParameter("CRWJSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<v2CRW_Save_Result>("v2CRW_Save", budgetIDParameter, userIDParameter, isSaveParameter, prodIDParameter, cRWJSONParameter);
        }
    
        public virtual ObjectResult<APVendorsTaxFiling_GET_Result> APVendorsTaxFiling_GET(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APVendorsTaxFiling_GET_Result>("APVendorsTaxFiling_GET", prodIDParameter);
        }
    
        public virtual ObjectResult<APVendorsTaxFiling_INIT_Result> APVendorsTaxFiling_INIT(Nullable<int> prodID, Nullable<short> taxYear, Nullable<int> companyID, Nullable<int> createdby)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(short));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APVendorsTaxFiling_INIT_Result>("APVendorsTaxFiling_INIT", prodIDParameter, taxYearParameter, companyIDParameter, createdbyParameter);
        }
    
        public virtual ObjectResult<APVendorsTaxFilingTransactionDetails_GET_Result> APVendorsTaxFilingTransactionDetails_GET(string jSONParameters)
        {
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APVendorsTaxFilingTransactionDetails_GET_Result>("APVendorsTaxFilingTransactionDetails_GET", jSONParametersParameter);
        }
    
        public virtual ObjectResult<APVendorsTaxFilingTransactionLines_INIT_Result> APVendorsTaxFilingTransactionLines_INIT(Nullable<int> taxFilingID, Nullable<short> taxYear)
        {
            var taxFilingIDParameter = taxFilingID.HasValue ?
                new ObjectParameter("TaxFilingID", taxFilingID) :
                new ObjectParameter("TaxFilingID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APVendorsTaxFilingTransactionLines_INIT_Result>("APVendorsTaxFilingTransactionLines_INIT", taxFilingIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<APVendorsTaxFilingTransactions_INIT_Result> APVendorsTaxFilingTransactions_INIT(Nullable<int> taxFilingID, Nullable<short> taxYear)
        {
            var taxFilingIDParameter = taxFilingID.HasValue ?
                new ObjectParameter("TaxFilingID", taxFilingID) :
                new ObjectParameter("TaxFilingID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APVendorsTaxFilingTransactions_INIT_Result>("APVendorsTaxFilingTransactions_INIT", taxFilingIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<string> APVendorsTaxFiling_SAVE(Nullable<int> prodID, Nullable<int> taxFilingID, string jSON)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var taxFilingIDParameter = taxFilingID.HasValue ?
                new ObjectParameter("TaxFilingID", taxFilingID) :
                new ObjectParameter("TaxFilingID", typeof(int));
    
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("APVendorsTaxFiling_SAVE", prodIDParameter, taxFilingIDParameter, jSONParameter);
        }
    
        public virtual ObjectResult<ReportsBankingCheckRegDetailReportJSON_Result> ReportsBankingCheckRegDetailReportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsBankingCheckRegDetailReportJSON_Result>("ReportsBankingCheckRegDetailReportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<GetVarianceReportData_Result> GetVarianceReportData(Nullable<int> budgetID, Nullable<int> budgetFileID, Nullable<int> userID)
        {
            var budgetIDParameter = budgetID.HasValue ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(int));
    
            var budgetFileIDParameter = budgetFileID.HasValue ?
                new ObjectParameter("BudgetFileID", budgetFileID) :
                new ObjectParameter("BudgetFileID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVarianceReportData_Result>("GetVarianceReportData", budgetIDParameter, budgetFileIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ReportsLedgerJEExportJSON_Result> ReportsLedgerJEExportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsLedgerJEExportJSON_Result>("ReportsLedgerJEExportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsVendorInqReportJSON_Result> ReportsVendorInqReportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsVendorInqReportJSON_Result>("ReportsVendorInqReportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<GetPayrollAuditList_Result> GetPayrollAuditList(Nullable<int> companyID, Nullable<int> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollAuditList_Result>("GetPayrollAuditList", companyIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetDetailPCEnvelopeById_Result> GetDetailPCEnvelopeById(Nullable<int> pcEnvelopeId)
        {
            var pcEnvelopeIdParameter = pcEnvelopeId.HasValue ?
                new ObjectParameter("PcEnvelopeId", pcEnvelopeId) :
                new ObjectParameter("PcEnvelopeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetailPCEnvelopeById_Result>("GetDetailPCEnvelopeById", pcEnvelopeIdParameter);
        }
    
        public virtual ObjectResult<GetJEDetailByJEId_Result> GetJEDetailByJEId(Nullable<int> journalEntryId)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("JournalEntryId", journalEntryId) :
                new ObjectParameter("JournalEntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJEDetailByJEId_Result>("GetJEDetailByJEId", journalEntryIdParameter);
        }
    
        public virtual ObjectResult<GetPODetail_Result> GetPODetail(Nullable<int> pOID)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPODetail_Result>("GetPODetail", pOIDParameter);
        }
    
        public virtual ObjectResult<ReportsPOListingExportJSON_Result> ReportsPOListingExportJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsPOListingExportJSON_Result>("ReportsPOListingExportJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<GetJEntryByJEId_Result> GetJEntryByJEId(Nullable<int> journalEntryId)
        {
            var journalEntryIdParameter = journalEntryId.HasValue ?
                new ObjectParameter("JournalEntryId", journalEntryId) :
                new ObjectParameter("JournalEntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetJEntryByJEId_Result>("GetJEntryByJEId", journalEntryIdParameter);
        }
    
        public virtual ObjectResult<ReportsLedgerJEAuditJSON_Result> ReportsLedgerJEAuditJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsLedgerJEAuditJSON_Result>("ReportsLedgerJEAuditJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<GetReconcilationList_Result> GetReconcilationList(Nullable<int> prodID, Nullable<int> bankID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReconcilationList_Result>("GetReconcilationList", prodIDParameter, bankIDParameter);
        }
    
        public virtual ObjectResult<SaveBankAdjustment_Result> SaveBankAdjustment(Nullable<int> bankID, Nullable<int> prodID, Nullable<int> reconcilationID, string adjustmentNumber, Nullable<System.DateTime> date, Nullable<decimal> amount, string description, Nullable<int> userID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var reconcilationIDParameter = reconcilationID.HasValue ?
                new ObjectParameter("ReconcilationID", reconcilationID) :
                new ObjectParameter("ReconcilationID", typeof(int));
    
            var adjustmentNumberParameter = adjustmentNumber != null ?
                new ObjectParameter("AdjustmentNumber", adjustmentNumber) :
                new ObjectParameter("AdjustmentNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveBankAdjustment_Result>("SaveBankAdjustment", bankIDParameter, prodIDParameter, reconcilationIDParameter, adjustmentNumberParameter, dateParameter, amountParameter, descriptionParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> AtlasConfig_TransactionCodes(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AtlasConfig_TransactionCodes", prodIDParameter);
        }
    
        public virtual ObjectResult<string> CheckCycleGet(string jSONParameters)
        {
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CheckCycleGet", jSONParametersParameter);
        }
    
        public virtual ObjectResult<GetVendorListByProdID_Result> GetVendorListByProdID(Nullable<int> prodID, string sortBy)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorListByProdID_Result>("GetVendorListByProdID", prodIDParameter, sortByParameter);
        }
    
        public virtual ObjectResult<APInvoicesList_Result> APInvoicesList(Nullable<bool> paid, Nullable<int> prodId)
        {
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(bool));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APInvoicesList_Result>("APInvoicesList", paidParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<GetListOfInvoiceById_Result> GetListOfInvoiceById(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListOfInvoiceById_Result>("GetListOfInvoiceById", invoiceIdParameter);
        }
    
        public virtual ObjectResult<GetPaymentVoidData1_Result> GetPaymentVoidData1(Nullable<int> bankID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentVoidData1_Result>("GetPaymentVoidData1", bankIDParameter);
        }
    
        public virtual ObjectResult<APIAtlasUtilities_Config_Result> APIAtlasUtilities_Config(string configName, Nullable<int> configID, Nullable<int> prodID, Nullable<int> userID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APIAtlasUtilities_Config_Result>("APIAtlasUtilities_Config", configNameParameter, configIDParameter, prodIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<APIAtlasUtilities_Config_Upsert_Result> APIAtlasUtilities_Config_Upsert(Nullable<int> configID, string configName, string configJSON, Nullable<int> prodID, Nullable<int> userID)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var configJSONParameter = configJSON != null ?
                new ObjectParameter("ConfigJSON", configJSON) :
                new ObjectParameter("ConfigJSON", typeof(string));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APIAtlasUtilities_Config_Upsert_Result>("APIAtlasUtilities_Config_Upsert", configIDParameter, configNameParameter, configJSONParameter, prodIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> PosPayGet(Nullable<int> bankID, Nullable<int> prodID, Nullable<bool> isAdvanced)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var isAdvancedParameter = isAdvanced.HasValue ?
                new ObjectParameter("isAdvanced", isAdvanced) :
                new ObjectParameter("isAdvanced", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PosPayGet", bankIDParameter, prodIDParameter, isAdvancedParameter);
        }
    
        public virtual ObjectResult<string> BankInfoConfig_Update(Nullable<int> bankID, string configSettingAttribute, string configSettingJSON, Nullable<bool> isstrict, Nullable<int> prodID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var configSettingAttributeParameter = configSettingAttribute != null ?
                new ObjectParameter("ConfigSettingAttribute", configSettingAttribute) :
                new ObjectParameter("ConfigSettingAttribute", typeof(string));
    
            var configSettingJSONParameter = configSettingJSON != null ?
                new ObjectParameter("ConfigSettingJSON", configSettingJSON) :
                new ObjectParameter("ConfigSettingJSON", typeof(string));
    
            var isstrictParameter = isstrict.HasValue ?
                new ObjectParameter("isstrict", isstrict) :
                new ObjectParameter("isstrict", typeof(bool));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BankInfoConfig_Update", bankIDParameter, configSettingAttributeParameter, configSettingJSONParameter, isstrictParameter, prodIDParameter);
        }
    
        public virtual ObjectResult<ReportsInvoiceAccountJSON_Result> ReportsInvoiceAccountJSON(string jSONparameters)
        {
            var jSONparametersParameter = jSONparameters != null ?
                new ObjectParameter("JSONparameters", jSONparameters) :
                new ObjectParameter("JSONparameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsInvoiceAccountJSON_Result>("ReportsInvoiceAccountJSON", jSONparametersParameter);
        }
    
        public virtual ObjectResult<ReportsInvoiceTransactionJSON_Result> ReportsInvoiceTransactionJSON(string jSONParameters)
        {
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportsInvoiceTransactionJSON_Result>("ReportsInvoiceTransactionJSON", jSONParametersParameter);
        }
    
        public virtual ObjectResult<string> PosPaySet(Nullable<int> bankID, Nullable<int> prodID, Nullable<bool> isAdvanced, string jSONParameters)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var isAdvancedParameter = isAdvanced.HasValue ?
                new ObjectParameter("isAdvanced", isAdvanced) :
                new ObjectParameter("isAdvanced", typeof(bool));
    
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PosPaySet", bankIDParameter, prodIDParameter, isAdvancedParameter, jSONParametersParameter);
        }
    
        public virtual ObjectResult<GetInvoiceLineDetailById_Result> GetInvoiceLineDetailById(Nullable<int> invoiceId, Nullable<int> prodId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceLineDetailById_Result>("GetInvoiceLineDetailById", invoiceIdParameter, prodIdParameter);
        }
    
        public virtual ObjectResult<APInvoiceGet_Result> APInvoiceGet(Nullable<int> prodID, Nullable<int> invoiceID, Nullable<int> userID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APInvoiceGet_Result>("APInvoiceGet", prodIDParameter, invoiceIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<APAtlasPaymentMapGet_Result> APAtlasPaymentMapGet(string jSONParameters)
        {
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APAtlasPaymentMapGet_Result>("APAtlasPaymentMapGet", jSONParametersParameter);
        }
    
        public virtual ObjectResult<APAtlasPaymentInformationGet_Result> APAtlasPaymentInformationGet(string jSONParameters)
        {
            var jSONParametersParameter = jSONParameters != null ?
                new ObjectParameter("JSONParameters", jSONParameters) :
                new ObjectParameter("JSONParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APAtlasPaymentInformationGet_Result>("APAtlasPaymentInformationGet", jSONParametersParameter);
        }
    }
}
